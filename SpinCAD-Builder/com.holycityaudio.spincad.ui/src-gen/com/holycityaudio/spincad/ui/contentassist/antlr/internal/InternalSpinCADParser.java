package com.holycityaudio.spincad.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.holycityaudio.spincad.services.SpinCADGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("all")
public class InternalSpinCADParser extends AbstractInternalContentAssistParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_ID", "RULE_STRING", "RULE_INT", "RULE_SC_COMMENT", "RULE_ESCAPED_CHAR", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER", "'#'", "'^'", "'+'", "'-'", "'true'", "'false'", "'@name'", "'@color'", "'@audioInput'", "'@audioOutput'", "'@controlInput'", "'@controlOutput'", "'equ'", "'int'", "'mem'", "'offset'", "'bool'", "'@sliderLabel'", "'@sliderLabelSpinner'", "'@sliderLabelCheckBox'", "'@checkbox'", "'@logFreqSliderLabel'", "'@logFreq2SliderLabel'", "'@spinRadioButton'", "'@comboBox'", "':'", "'@isPinConnected'", "'@isGreaterThan'", "'@isLessThan'", "'@isEqualTo'", "'@isTrue'", "'@else'", "'@endif'", "'@isOr'", "'@getInputDefault'", "'@getDelayScaleControl'", "'@readChorusTap'", "'@getSamplesFromRatio'", "'@semitonesToRmpRate'", "'@getBaseAddress'", "'@setOutputPin'", "'@minusDouble'", "'@divideDouble'", "'@equals'", "'@equalsBool'", "'@divideInt'", "'@multiplyDouble'", "'@setChorusWidth'", "'rdax'", "','", "'wrlx'", "'wrhx'", "'wrax'", "'maxx'", "'rdfx'", "'mulx'", "'ldax'", "'exp'", "'log'", "'sof'", "'wra'", "'wrap'", "'rda'", "'wlds'", "'wldr'", "'cho rda'", "'cho rdal'", "'cho sof'", "'rmpa'", "'and'", "'or'", "'xor'", "'jam'", "'clr'", "'not'", "'absa'", "'skp'", "'|'", "'.'", "'*'", "'%'", "'$'"
    };
    public static final int T__50=50;
    public static final int T__59=59;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int RULE_ID=4;
    public static final int RULE_INT=6;
    public static final int T__66=66;
    public static final int RULE_SC_COMMENT=7;
    public static final int RULE_ML_COMMENT=9;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int RULE_ESCAPED_CHAR=8;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__90=90;
    public static final int T__19=19;
    public static final int T__15=15;
    public static final int T__16=16;
    public static final int T__17=17;
    public static final int T__18=18;
    public static final int T__13=13;
    public static final int T__14=14;
    public static final int T__26=26;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__22=22;
    public static final int T__23=23;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__20=20;
    public static final int T__21=21;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int RULE_STRING=5;
    public static final int RULE_SL_COMMENT=10;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__73=73;
    public static final int EOF=-1;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int RULE_WS=11;
    public static final int RULE_ANY_OTHER=12;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;

    // delegates
    // delegators


        public InternalSpinCADParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalSpinCADParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalSpinCADParser.tokenNames; }
    public String getGrammarFileName() { return "InternalSpinCAD.g"; }


     
     	private SpinCADGrammarAccess grammarAccess;
     	
        public void setGrammarAccess(SpinCADGrammarAccess grammarAccess) {
        	this.grammarAccess = grammarAccess;
        }
        
        @Override
        protected Grammar getGrammar() {
        	return grammarAccess.getGrammar();
        }
        
        @Override
        protected String getValueForTokenName(String tokenName) {
        	return tokenName;
        }




    // $ANTLR start "entryRuleProgram"
    // InternalSpinCAD.g:60:1: entryRuleProgram : ruleProgram EOF ;
    public final void entryRuleProgram() throws RecognitionException {
        try {
            // InternalSpinCAD.g:61:1: ( ruleProgram EOF )
            // InternalSpinCAD.g:62:1: ruleProgram EOF
            {
             before(grammarAccess.getProgramRule()); 
            pushFollow(FOLLOW_1);
            ruleProgram();

            state._fsp--;

             after(grammarAccess.getProgramRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProgram"


    // $ANTLR start "ruleProgram"
    // InternalSpinCAD.g:69:1: ruleProgram : ( ( rule__Program__Group__0 ) ) ;
    public final void ruleProgram() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:73:2: ( ( ( rule__Program__Group__0 ) ) )
            // InternalSpinCAD.g:74:1: ( ( rule__Program__Group__0 ) )
            {
            // InternalSpinCAD.g:74:1: ( ( rule__Program__Group__0 ) )
            // InternalSpinCAD.g:75:1: ( rule__Program__Group__0 )
            {
             before(grammarAccess.getProgramAccess().getGroup()); 
            // InternalSpinCAD.g:76:1: ( rule__Program__Group__0 )
            // InternalSpinCAD.g:76:2: rule__Program__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Program__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProgram"


    // $ANTLR start "entryRulePin"
    // InternalSpinCAD.g:88:1: entryRulePin : rulePin EOF ;
    public final void entryRulePin() throws RecognitionException {
        try {
            // InternalSpinCAD.g:89:1: ( rulePin EOF )
            // InternalSpinCAD.g:90:1: rulePin EOF
            {
             before(grammarAccess.getPinRule()); 
            pushFollow(FOLLOW_1);
            rulePin();

            state._fsp--;

             after(grammarAccess.getPinRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePin"


    // $ANTLR start "rulePin"
    // InternalSpinCAD.g:97:1: rulePin : ( ( rule__Pin__Alternatives ) ) ;
    public final void rulePin() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:101:2: ( ( ( rule__Pin__Alternatives ) ) )
            // InternalSpinCAD.g:102:1: ( ( rule__Pin__Alternatives ) )
            {
            // InternalSpinCAD.g:102:1: ( ( rule__Pin__Alternatives ) )
            // InternalSpinCAD.g:103:1: ( rule__Pin__Alternatives )
            {
             before(grammarAccess.getPinAccess().getAlternatives()); 
            // InternalSpinCAD.g:104:1: ( rule__Pin__Alternatives )
            // InternalSpinCAD.g:104:2: rule__Pin__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Pin__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getPinAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePin"


    // $ANTLR start "entryRuleInputPin"
    // InternalSpinCAD.g:116:1: entryRuleInputPin : ruleInputPin EOF ;
    public final void entryRuleInputPin() throws RecognitionException {
        try {
            // InternalSpinCAD.g:117:1: ( ruleInputPin EOF )
            // InternalSpinCAD.g:118:1: ruleInputPin EOF
            {
             before(grammarAccess.getInputPinRule()); 
            pushFollow(FOLLOW_1);
            ruleInputPin();

            state._fsp--;

             after(grammarAccess.getInputPinRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInputPin"


    // $ANTLR start "ruleInputPin"
    // InternalSpinCAD.g:125:1: ruleInputPin : ( ( rule__InputPin__Alternatives ) ) ;
    public final void ruleInputPin() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:129:2: ( ( ( rule__InputPin__Alternatives ) ) )
            // InternalSpinCAD.g:130:1: ( ( rule__InputPin__Alternatives ) )
            {
            // InternalSpinCAD.g:130:1: ( ( rule__InputPin__Alternatives ) )
            // InternalSpinCAD.g:131:1: ( rule__InputPin__Alternatives )
            {
             before(grammarAccess.getInputPinAccess().getAlternatives()); 
            // InternalSpinCAD.g:132:1: ( rule__InputPin__Alternatives )
            // InternalSpinCAD.g:132:2: rule__InputPin__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__InputPin__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInputPinAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInputPin"


    // $ANTLR start "entryRuleOutputPin"
    // InternalSpinCAD.g:144:1: entryRuleOutputPin : ruleOutputPin EOF ;
    public final void entryRuleOutputPin() throws RecognitionException {
        try {
            // InternalSpinCAD.g:145:1: ( ruleOutputPin EOF )
            // InternalSpinCAD.g:146:1: ruleOutputPin EOF
            {
             before(grammarAccess.getOutputPinRule()); 
            pushFollow(FOLLOW_1);
            ruleOutputPin();

            state._fsp--;

             after(grammarAccess.getOutputPinRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOutputPin"


    // $ANTLR start "ruleOutputPin"
    // InternalSpinCAD.g:153:1: ruleOutputPin : ( ( rule__OutputPin__Alternatives ) ) ;
    public final void ruleOutputPin() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:157:2: ( ( ( rule__OutputPin__Alternatives ) ) )
            // InternalSpinCAD.g:158:1: ( ( rule__OutputPin__Alternatives ) )
            {
            // InternalSpinCAD.g:158:1: ( ( rule__OutputPin__Alternatives ) )
            // InternalSpinCAD.g:159:1: ( rule__OutputPin__Alternatives )
            {
             before(grammarAccess.getOutputPinAccess().getAlternatives()); 
            // InternalSpinCAD.g:160:1: ( rule__OutputPin__Alternatives )
            // InternalSpinCAD.g:160:2: rule__OutputPin__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__OutputPin__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getOutputPinAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOutputPin"


    // $ANTLR start "entryRuleAudioInput"
    // InternalSpinCAD.g:172:1: entryRuleAudioInput : ruleAudioInput EOF ;
    public final void entryRuleAudioInput() throws RecognitionException {
        try {
            // InternalSpinCAD.g:173:1: ( ruleAudioInput EOF )
            // InternalSpinCAD.g:174:1: ruleAudioInput EOF
            {
             before(grammarAccess.getAudioInputRule()); 
            pushFollow(FOLLOW_1);
            ruleAudioInput();

            state._fsp--;

             after(grammarAccess.getAudioInputRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAudioInput"


    // $ANTLR start "ruleAudioInput"
    // InternalSpinCAD.g:181:1: ruleAudioInput : ( ( rule__AudioInput__Group__0 ) ) ;
    public final void ruleAudioInput() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:185:2: ( ( ( rule__AudioInput__Group__0 ) ) )
            // InternalSpinCAD.g:186:1: ( ( rule__AudioInput__Group__0 ) )
            {
            // InternalSpinCAD.g:186:1: ( ( rule__AudioInput__Group__0 ) )
            // InternalSpinCAD.g:187:1: ( rule__AudioInput__Group__0 )
            {
             before(grammarAccess.getAudioInputAccess().getGroup()); 
            // InternalSpinCAD.g:188:1: ( rule__AudioInput__Group__0 )
            // InternalSpinCAD.g:188:2: rule__AudioInput__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__AudioInput__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getAudioInputAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAudioInput"


    // $ANTLR start "entryRuleAudioOutput"
    // InternalSpinCAD.g:200:1: entryRuleAudioOutput : ruleAudioOutput EOF ;
    public final void entryRuleAudioOutput() throws RecognitionException {
        try {
            // InternalSpinCAD.g:201:1: ( ruleAudioOutput EOF )
            // InternalSpinCAD.g:202:1: ruleAudioOutput EOF
            {
             before(grammarAccess.getAudioOutputRule()); 
            pushFollow(FOLLOW_1);
            ruleAudioOutput();

            state._fsp--;

             after(grammarAccess.getAudioOutputRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAudioOutput"


    // $ANTLR start "ruleAudioOutput"
    // InternalSpinCAD.g:209:1: ruleAudioOutput : ( ( rule__AudioOutput__Group__0 ) ) ;
    public final void ruleAudioOutput() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:213:2: ( ( ( rule__AudioOutput__Group__0 ) ) )
            // InternalSpinCAD.g:214:1: ( ( rule__AudioOutput__Group__0 ) )
            {
            // InternalSpinCAD.g:214:1: ( ( rule__AudioOutput__Group__0 ) )
            // InternalSpinCAD.g:215:1: ( rule__AudioOutput__Group__0 )
            {
             before(grammarAccess.getAudioOutputAccess().getGroup()); 
            // InternalSpinCAD.g:216:1: ( rule__AudioOutput__Group__0 )
            // InternalSpinCAD.g:216:2: rule__AudioOutput__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__AudioOutput__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getAudioOutputAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAudioOutput"


    // $ANTLR start "entryRuleControlInput"
    // InternalSpinCAD.g:228:1: entryRuleControlInput : ruleControlInput EOF ;
    public final void entryRuleControlInput() throws RecognitionException {
        try {
            // InternalSpinCAD.g:229:1: ( ruleControlInput EOF )
            // InternalSpinCAD.g:230:1: ruleControlInput EOF
            {
             before(grammarAccess.getControlInputRule()); 
            pushFollow(FOLLOW_1);
            ruleControlInput();

            state._fsp--;

             after(grammarAccess.getControlInputRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleControlInput"


    // $ANTLR start "ruleControlInput"
    // InternalSpinCAD.g:237:1: ruleControlInput : ( ( rule__ControlInput__Group__0 ) ) ;
    public final void ruleControlInput() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:241:2: ( ( ( rule__ControlInput__Group__0 ) ) )
            // InternalSpinCAD.g:242:1: ( ( rule__ControlInput__Group__0 ) )
            {
            // InternalSpinCAD.g:242:1: ( ( rule__ControlInput__Group__0 ) )
            // InternalSpinCAD.g:243:1: ( rule__ControlInput__Group__0 )
            {
             before(grammarAccess.getControlInputAccess().getGroup()); 
            // InternalSpinCAD.g:244:1: ( rule__ControlInput__Group__0 )
            // InternalSpinCAD.g:244:2: rule__ControlInput__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ControlInput__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getControlInputAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleControlInput"


    // $ANTLR start "entryRuleControlOutput"
    // InternalSpinCAD.g:256:1: entryRuleControlOutput : ruleControlOutput EOF ;
    public final void entryRuleControlOutput() throws RecognitionException {
        try {
            // InternalSpinCAD.g:257:1: ( ruleControlOutput EOF )
            // InternalSpinCAD.g:258:1: ruleControlOutput EOF
            {
             before(grammarAccess.getControlOutputRule()); 
            pushFollow(FOLLOW_1);
            ruleControlOutput();

            state._fsp--;

             after(grammarAccess.getControlOutputRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleControlOutput"


    // $ANTLR start "ruleControlOutput"
    // InternalSpinCAD.g:265:1: ruleControlOutput : ( ( rule__ControlOutput__Group__0 ) ) ;
    public final void ruleControlOutput() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:269:2: ( ( ( rule__ControlOutput__Group__0 ) ) )
            // InternalSpinCAD.g:270:1: ( ( rule__ControlOutput__Group__0 ) )
            {
            // InternalSpinCAD.g:270:1: ( ( rule__ControlOutput__Group__0 ) )
            // InternalSpinCAD.g:271:1: ( rule__ControlOutput__Group__0 )
            {
             before(grammarAccess.getControlOutputAccess().getGroup()); 
            // InternalSpinCAD.g:272:1: ( rule__ControlOutput__Group__0 )
            // InternalSpinCAD.g:272:2: rule__ControlOutput__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ControlOutput__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getControlOutputAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleControlOutput"


    // $ANTLR start "entryRuleSpinElement"
    // InternalSpinCAD.g:284:1: entryRuleSpinElement : ruleSpinElement EOF ;
    public final void entryRuleSpinElement() throws RecognitionException {
        try {
            // InternalSpinCAD.g:285:1: ( ruleSpinElement EOF )
            // InternalSpinCAD.g:286:1: ruleSpinElement EOF
            {
             before(grammarAccess.getSpinElementRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinElement();

            state._fsp--;

             after(grammarAccess.getSpinElementRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinElement"


    // $ANTLR start "ruleSpinElement"
    // InternalSpinCAD.g:293:1: ruleSpinElement : ( ( rule__SpinElement__Alternatives ) ) ;
    public final void ruleSpinElement() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:297:2: ( ( ( rule__SpinElement__Alternatives ) ) )
            // InternalSpinCAD.g:298:1: ( ( rule__SpinElement__Alternatives ) )
            {
            // InternalSpinCAD.g:298:1: ( ( rule__SpinElement__Alternatives ) )
            // InternalSpinCAD.g:299:1: ( rule__SpinElement__Alternatives )
            {
             before(grammarAccess.getSpinElementAccess().getAlternatives()); 
            // InternalSpinCAD.g:300:1: ( rule__SpinElement__Alternatives )
            // InternalSpinCAD.g:300:2: rule__SpinElement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SpinElement__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getSpinElementAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinElement"


    // $ANTLR start "entryRuleSpinEquate"
    // InternalSpinCAD.g:312:1: entryRuleSpinEquate : ruleSpinEquate EOF ;
    public final void entryRuleSpinEquate() throws RecognitionException {
        try {
            // InternalSpinCAD.g:313:1: ( ruleSpinEquate EOF )
            // InternalSpinCAD.g:314:1: ruleSpinEquate EOF
            {
             before(grammarAccess.getSpinEquateRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinEquate();

            state._fsp--;

             after(grammarAccess.getSpinEquateRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinEquate"


    // $ANTLR start "ruleSpinEquate"
    // InternalSpinCAD.g:321:1: ruleSpinEquate : ( ( rule__SpinEquate__Group__0 ) ) ;
    public final void ruleSpinEquate() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:325:2: ( ( ( rule__SpinEquate__Group__0 ) ) )
            // InternalSpinCAD.g:326:1: ( ( rule__SpinEquate__Group__0 ) )
            {
            // InternalSpinCAD.g:326:1: ( ( rule__SpinEquate__Group__0 ) )
            // InternalSpinCAD.g:327:1: ( rule__SpinEquate__Group__0 )
            {
             before(grammarAccess.getSpinEquateAccess().getGroup()); 
            // InternalSpinCAD.g:328:1: ( rule__SpinEquate__Group__0 )
            // InternalSpinCAD.g:328:2: rule__SpinEquate__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinEquate__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinEquateAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinEquate"


    // $ANTLR start "entryRuleSpinInt"
    // InternalSpinCAD.g:340:1: entryRuleSpinInt : ruleSpinInt EOF ;
    public final void entryRuleSpinInt() throws RecognitionException {
        try {
            // InternalSpinCAD.g:341:1: ( ruleSpinInt EOF )
            // InternalSpinCAD.g:342:1: ruleSpinInt EOF
            {
             before(grammarAccess.getSpinIntRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinInt();

            state._fsp--;

             after(grammarAccess.getSpinIntRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinInt"


    // $ANTLR start "ruleSpinInt"
    // InternalSpinCAD.g:349:1: ruleSpinInt : ( ( rule__SpinInt__Group__0 ) ) ;
    public final void ruleSpinInt() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:353:2: ( ( ( rule__SpinInt__Group__0 ) ) )
            // InternalSpinCAD.g:354:1: ( ( rule__SpinInt__Group__0 ) )
            {
            // InternalSpinCAD.g:354:1: ( ( rule__SpinInt__Group__0 ) )
            // InternalSpinCAD.g:355:1: ( rule__SpinInt__Group__0 )
            {
             before(grammarAccess.getSpinIntAccess().getGroup()); 
            // InternalSpinCAD.g:356:1: ( rule__SpinInt__Group__0 )
            // InternalSpinCAD.g:356:2: rule__SpinInt__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinInt__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinIntAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinInt"


    // $ANTLR start "entryRuleMem"
    // InternalSpinCAD.g:368:1: entryRuleMem : ruleMem EOF ;
    public final void entryRuleMem() throws RecognitionException {
        try {
            // InternalSpinCAD.g:369:1: ( ruleMem EOF )
            // InternalSpinCAD.g:370:1: ruleMem EOF
            {
             before(grammarAccess.getMemRule()); 
            pushFollow(FOLLOW_1);
            ruleMem();

            state._fsp--;

             after(grammarAccess.getMemRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMem"


    // $ANTLR start "ruleMem"
    // InternalSpinCAD.g:377:1: ruleMem : ( ( rule__Mem__Group__0 ) ) ;
    public final void ruleMem() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:381:2: ( ( ( rule__Mem__Group__0 ) ) )
            // InternalSpinCAD.g:382:1: ( ( rule__Mem__Group__0 ) )
            {
            // InternalSpinCAD.g:382:1: ( ( rule__Mem__Group__0 ) )
            // InternalSpinCAD.g:383:1: ( rule__Mem__Group__0 )
            {
             before(grammarAccess.getMemAccess().getGroup()); 
            // InternalSpinCAD.g:384:1: ( rule__Mem__Group__0 )
            // InternalSpinCAD.g:384:2: rule__Mem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Mem__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getMemAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMem"


    // $ANTLR start "entryRuleOffset"
    // InternalSpinCAD.g:396:1: entryRuleOffset : ruleOffset EOF ;
    public final void entryRuleOffset() throws RecognitionException {
        try {
            // InternalSpinCAD.g:397:1: ( ruleOffset EOF )
            // InternalSpinCAD.g:398:1: ruleOffset EOF
            {
             before(grammarAccess.getOffsetRule()); 
            pushFollow(FOLLOW_1);
            ruleOffset();

            state._fsp--;

             after(grammarAccess.getOffsetRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOffset"


    // $ANTLR start "ruleOffset"
    // InternalSpinCAD.g:405:1: ruleOffset : ( ( rule__Offset__Group__0 ) ) ;
    public final void ruleOffset() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:409:2: ( ( ( rule__Offset__Group__0 ) ) )
            // InternalSpinCAD.g:410:1: ( ( rule__Offset__Group__0 ) )
            {
            // InternalSpinCAD.g:410:1: ( ( rule__Offset__Group__0 ) )
            // InternalSpinCAD.g:411:1: ( rule__Offset__Group__0 )
            {
             before(grammarAccess.getOffsetAccess().getGroup()); 
            // InternalSpinCAD.g:412:1: ( rule__Offset__Group__0 )
            // InternalSpinCAD.g:412:2: rule__Offset__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Offset__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getOffsetAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOffset"


    // $ANTLR start "entryRuleSpinBool"
    // InternalSpinCAD.g:424:1: entryRuleSpinBool : ruleSpinBool EOF ;
    public final void entryRuleSpinBool() throws RecognitionException {
        try {
            // InternalSpinCAD.g:425:1: ( ruleSpinBool EOF )
            // InternalSpinCAD.g:426:1: ruleSpinBool EOF
            {
             before(grammarAccess.getSpinBoolRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinBool();

            state._fsp--;

             after(grammarAccess.getSpinBoolRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinBool"


    // $ANTLR start "ruleSpinBool"
    // InternalSpinCAD.g:433:1: ruleSpinBool : ( ( rule__SpinBool__Group__0 ) ) ;
    public final void ruleSpinBool() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:437:2: ( ( ( rule__SpinBool__Group__0 ) ) )
            // InternalSpinCAD.g:438:1: ( ( rule__SpinBool__Group__0 ) )
            {
            // InternalSpinCAD.g:438:1: ( ( rule__SpinBool__Group__0 ) )
            // InternalSpinCAD.g:439:1: ( rule__SpinBool__Group__0 )
            {
             before(grammarAccess.getSpinBoolAccess().getGroup()); 
            // InternalSpinCAD.g:440:1: ( rule__SpinBool__Group__0 )
            // InternalSpinCAD.g:440:2: rule__SpinBool__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinBool__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinBoolAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinBool"


    // $ANTLR start "entryRuleControl"
    // InternalSpinCAD.g:452:1: entryRuleControl : ruleControl EOF ;
    public final void entryRuleControl() throws RecognitionException {
        try {
            // InternalSpinCAD.g:453:1: ( ruleControl EOF )
            // InternalSpinCAD.g:454:1: ruleControl EOF
            {
             before(grammarAccess.getControlRule()); 
            pushFollow(FOLLOW_1);
            ruleControl();

            state._fsp--;

             after(grammarAccess.getControlRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleControl"


    // $ANTLR start "ruleControl"
    // InternalSpinCAD.g:461:1: ruleControl : ( ( rule__Control__Alternatives ) ) ;
    public final void ruleControl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:465:2: ( ( ( rule__Control__Alternatives ) ) )
            // InternalSpinCAD.g:466:1: ( ( rule__Control__Alternatives ) )
            {
            // InternalSpinCAD.g:466:1: ( ( rule__Control__Alternatives ) )
            // InternalSpinCAD.g:467:1: ( rule__Control__Alternatives )
            {
             before(grammarAccess.getControlAccess().getAlternatives()); 
            // InternalSpinCAD.g:468:1: ( rule__Control__Alternatives )
            // InternalSpinCAD.g:468:2: rule__Control__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Control__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getControlAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleControl"


    // $ANTLR start "entryRuleSpinSliderLabel"
    // InternalSpinCAD.g:480:1: entryRuleSpinSliderLabel : ruleSpinSliderLabel EOF ;
    public final void entryRuleSpinSliderLabel() throws RecognitionException {
        try {
            // InternalSpinCAD.g:481:1: ( ruleSpinSliderLabel EOF )
            // InternalSpinCAD.g:482:1: ruleSpinSliderLabel EOF
            {
             before(grammarAccess.getSpinSliderLabelRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinSliderLabel();

            state._fsp--;

             after(grammarAccess.getSpinSliderLabelRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinSliderLabel"


    // $ANTLR start "ruleSpinSliderLabel"
    // InternalSpinCAD.g:489:1: ruleSpinSliderLabel : ( ( rule__SpinSliderLabel__Group__0 ) ) ;
    public final void ruleSpinSliderLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:493:2: ( ( ( rule__SpinSliderLabel__Group__0 ) ) )
            // InternalSpinCAD.g:494:1: ( ( rule__SpinSliderLabel__Group__0 ) )
            {
            // InternalSpinCAD.g:494:1: ( ( rule__SpinSliderLabel__Group__0 ) )
            // InternalSpinCAD.g:495:1: ( rule__SpinSliderLabel__Group__0 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getGroup()); 
            // InternalSpinCAD.g:496:1: ( rule__SpinSliderLabel__Group__0 )
            // InternalSpinCAD.g:496:2: rule__SpinSliderLabel__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinSliderLabel"


    // $ANTLR start "entryRuleSliderLabelSpinner"
    // InternalSpinCAD.g:508:1: entryRuleSliderLabelSpinner : ruleSliderLabelSpinner EOF ;
    public final void entryRuleSliderLabelSpinner() throws RecognitionException {
        try {
            // InternalSpinCAD.g:509:1: ( ruleSliderLabelSpinner EOF )
            // InternalSpinCAD.g:510:1: ruleSliderLabelSpinner EOF
            {
             before(grammarAccess.getSliderLabelSpinnerRule()); 
            pushFollow(FOLLOW_1);
            ruleSliderLabelSpinner();

            state._fsp--;

             after(grammarAccess.getSliderLabelSpinnerRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSliderLabelSpinner"


    // $ANTLR start "ruleSliderLabelSpinner"
    // InternalSpinCAD.g:517:1: ruleSliderLabelSpinner : ( ( rule__SliderLabelSpinner__Group__0 ) ) ;
    public final void ruleSliderLabelSpinner() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:521:2: ( ( ( rule__SliderLabelSpinner__Group__0 ) ) )
            // InternalSpinCAD.g:522:1: ( ( rule__SliderLabelSpinner__Group__0 ) )
            {
            // InternalSpinCAD.g:522:1: ( ( rule__SliderLabelSpinner__Group__0 ) )
            // InternalSpinCAD.g:523:1: ( rule__SliderLabelSpinner__Group__0 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getGroup()); 
            // InternalSpinCAD.g:524:1: ( rule__SliderLabelSpinner__Group__0 )
            // InternalSpinCAD.g:524:2: rule__SliderLabelSpinner__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSliderLabelSpinner"


    // $ANTLR start "entryRuleSliderLabelCheckBox"
    // InternalSpinCAD.g:536:1: entryRuleSliderLabelCheckBox : ruleSliderLabelCheckBox EOF ;
    public final void entryRuleSliderLabelCheckBox() throws RecognitionException {
        try {
            // InternalSpinCAD.g:537:1: ( ruleSliderLabelCheckBox EOF )
            // InternalSpinCAD.g:538:1: ruleSliderLabelCheckBox EOF
            {
             before(grammarAccess.getSliderLabelCheckBoxRule()); 
            pushFollow(FOLLOW_1);
            ruleSliderLabelCheckBox();

            state._fsp--;

             after(grammarAccess.getSliderLabelCheckBoxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSliderLabelCheckBox"


    // $ANTLR start "ruleSliderLabelCheckBox"
    // InternalSpinCAD.g:545:1: ruleSliderLabelCheckBox : ( ( rule__SliderLabelCheckBox__Group__0 ) ) ;
    public final void ruleSliderLabelCheckBox() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:549:2: ( ( ( rule__SliderLabelCheckBox__Group__0 ) ) )
            // InternalSpinCAD.g:550:1: ( ( rule__SliderLabelCheckBox__Group__0 ) )
            {
            // InternalSpinCAD.g:550:1: ( ( rule__SliderLabelCheckBox__Group__0 ) )
            // InternalSpinCAD.g:551:1: ( rule__SliderLabelCheckBox__Group__0 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getGroup()); 
            // InternalSpinCAD.g:552:1: ( rule__SliderLabelCheckBox__Group__0 )
            // InternalSpinCAD.g:552:2: rule__SliderLabelCheckBox__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSliderLabelCheckBox"


    // $ANTLR start "entryRuleSpinCheckBox"
    // InternalSpinCAD.g:564:1: entryRuleSpinCheckBox : ruleSpinCheckBox EOF ;
    public final void entryRuleSpinCheckBox() throws RecognitionException {
        try {
            // InternalSpinCAD.g:565:1: ( ruleSpinCheckBox EOF )
            // InternalSpinCAD.g:566:1: ruleSpinCheckBox EOF
            {
             before(grammarAccess.getSpinCheckBoxRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinCheckBox();

            state._fsp--;

             after(grammarAccess.getSpinCheckBoxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinCheckBox"


    // $ANTLR start "ruleSpinCheckBox"
    // InternalSpinCAD.g:573:1: ruleSpinCheckBox : ( ( rule__SpinCheckBox__Group__0 ) ) ;
    public final void ruleSpinCheckBox() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:577:2: ( ( ( rule__SpinCheckBox__Group__0 ) ) )
            // InternalSpinCAD.g:578:1: ( ( rule__SpinCheckBox__Group__0 ) )
            {
            // InternalSpinCAD.g:578:1: ( ( rule__SpinCheckBox__Group__0 ) )
            // InternalSpinCAD.g:579:1: ( rule__SpinCheckBox__Group__0 )
            {
             before(grammarAccess.getSpinCheckBoxAccess().getGroup()); 
            // InternalSpinCAD.g:580:1: ( rule__SpinCheckBox__Group__0 )
            // InternalSpinCAD.g:580:2: rule__SpinCheckBox__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinCheckBoxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinCheckBox"


    // $ANTLR start "entryRuleLogFreqSliderLabel"
    // InternalSpinCAD.g:592:1: entryRuleLogFreqSliderLabel : ruleLogFreqSliderLabel EOF ;
    public final void entryRuleLogFreqSliderLabel() throws RecognitionException {
        try {
            // InternalSpinCAD.g:593:1: ( ruleLogFreqSliderLabel EOF )
            // InternalSpinCAD.g:594:1: ruleLogFreqSliderLabel EOF
            {
             before(grammarAccess.getLogFreqSliderLabelRule()); 
            pushFollow(FOLLOW_1);
            ruleLogFreqSliderLabel();

            state._fsp--;

             after(grammarAccess.getLogFreqSliderLabelRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLogFreqSliderLabel"


    // $ANTLR start "ruleLogFreqSliderLabel"
    // InternalSpinCAD.g:601:1: ruleLogFreqSliderLabel : ( ( rule__LogFreqSliderLabel__Group__0 ) ) ;
    public final void ruleLogFreqSliderLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:605:2: ( ( ( rule__LogFreqSliderLabel__Group__0 ) ) )
            // InternalSpinCAD.g:606:1: ( ( rule__LogFreqSliderLabel__Group__0 ) )
            {
            // InternalSpinCAD.g:606:1: ( ( rule__LogFreqSliderLabel__Group__0 ) )
            // InternalSpinCAD.g:607:1: ( rule__LogFreqSliderLabel__Group__0 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getGroup()); 
            // InternalSpinCAD.g:608:1: ( rule__LogFreqSliderLabel__Group__0 )
            // InternalSpinCAD.g:608:2: rule__LogFreqSliderLabel__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLogFreqSliderLabel"


    // $ANTLR start "entryRuleLogFreq2SliderLabel"
    // InternalSpinCAD.g:620:1: entryRuleLogFreq2SliderLabel : ruleLogFreq2SliderLabel EOF ;
    public final void entryRuleLogFreq2SliderLabel() throws RecognitionException {
        try {
            // InternalSpinCAD.g:621:1: ( ruleLogFreq2SliderLabel EOF )
            // InternalSpinCAD.g:622:1: ruleLogFreq2SliderLabel EOF
            {
             before(grammarAccess.getLogFreq2SliderLabelRule()); 
            pushFollow(FOLLOW_1);
            ruleLogFreq2SliderLabel();

            state._fsp--;

             after(grammarAccess.getLogFreq2SliderLabelRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLogFreq2SliderLabel"


    // $ANTLR start "ruleLogFreq2SliderLabel"
    // InternalSpinCAD.g:629:1: ruleLogFreq2SliderLabel : ( ( rule__LogFreq2SliderLabel__Group__0 ) ) ;
    public final void ruleLogFreq2SliderLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:633:2: ( ( ( rule__LogFreq2SliderLabel__Group__0 ) ) )
            // InternalSpinCAD.g:634:1: ( ( rule__LogFreq2SliderLabel__Group__0 ) )
            {
            // InternalSpinCAD.g:634:1: ( ( rule__LogFreq2SliderLabel__Group__0 ) )
            // InternalSpinCAD.g:635:1: ( rule__LogFreq2SliderLabel__Group__0 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getGroup()); 
            // InternalSpinCAD.g:636:1: ( rule__LogFreq2SliderLabel__Group__0 )
            // InternalSpinCAD.g:636:2: rule__LogFreq2SliderLabel__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLogFreq2SliderLabel"


    // $ANTLR start "entryRuleSpinRadioButton"
    // InternalSpinCAD.g:648:1: entryRuleSpinRadioButton : ruleSpinRadioButton EOF ;
    public final void entryRuleSpinRadioButton() throws RecognitionException {
        try {
            // InternalSpinCAD.g:649:1: ( ruleSpinRadioButton EOF )
            // InternalSpinCAD.g:650:1: ruleSpinRadioButton EOF
            {
             before(grammarAccess.getSpinRadioButtonRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinRadioButton();

            state._fsp--;

             after(grammarAccess.getSpinRadioButtonRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinRadioButton"


    // $ANTLR start "ruleSpinRadioButton"
    // InternalSpinCAD.g:657:1: ruleSpinRadioButton : ( ( rule__SpinRadioButton__Group__0 ) ) ;
    public final void ruleSpinRadioButton() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:661:2: ( ( ( rule__SpinRadioButton__Group__0 ) ) )
            // InternalSpinCAD.g:662:1: ( ( rule__SpinRadioButton__Group__0 ) )
            {
            // InternalSpinCAD.g:662:1: ( ( rule__SpinRadioButton__Group__0 ) )
            // InternalSpinCAD.g:663:1: ( rule__SpinRadioButton__Group__0 )
            {
             before(grammarAccess.getSpinRadioButtonAccess().getGroup()); 
            // InternalSpinCAD.g:664:1: ( rule__SpinRadioButton__Group__0 )
            // InternalSpinCAD.g:664:2: rule__SpinRadioButton__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinRadioButtonAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinRadioButton"


    // $ANTLR start "entryRuleSpinComboBox"
    // InternalSpinCAD.g:676:1: entryRuleSpinComboBox : ruleSpinComboBox EOF ;
    public final void entryRuleSpinComboBox() throws RecognitionException {
        try {
            // InternalSpinCAD.g:677:1: ( ruleSpinComboBox EOF )
            // InternalSpinCAD.g:678:1: ruleSpinComboBox EOF
            {
             before(grammarAccess.getSpinComboBoxRule()); 
            pushFollow(FOLLOW_1);
            ruleSpinComboBox();

            state._fsp--;

             after(grammarAccess.getSpinComboBoxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSpinComboBox"


    // $ANTLR start "ruleSpinComboBox"
    // InternalSpinCAD.g:685:1: ruleSpinComboBox : ( ( rule__SpinComboBox__Group__0 ) ) ;
    public final void ruleSpinComboBox() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:689:2: ( ( ( rule__SpinComboBox__Group__0 ) ) )
            // InternalSpinCAD.g:690:1: ( ( rule__SpinComboBox__Group__0 ) )
            {
            // InternalSpinCAD.g:690:1: ( ( rule__SpinComboBox__Group__0 ) )
            // InternalSpinCAD.g:691:1: ( rule__SpinComboBox__Group__0 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getGroup()); 
            // InternalSpinCAD.g:692:1: ( rule__SpinComboBox__Group__0 )
            // InternalSpinCAD.g:692:2: rule__SpinComboBox__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSpinComboBox"


    // $ANTLR start "entryRuleComment"
    // InternalSpinCAD.g:704:1: entryRuleComment : ruleComment EOF ;
    public final void entryRuleComment() throws RecognitionException {
        try {
            // InternalSpinCAD.g:705:1: ( ruleComment EOF )
            // InternalSpinCAD.g:706:1: ruleComment EOF
            {
             before(grammarAccess.getCommentRule()); 
            pushFollow(FOLLOW_1);
            ruleComment();

            state._fsp--;

             after(grammarAccess.getCommentRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleComment"


    // $ANTLR start "ruleComment"
    // InternalSpinCAD.g:713:1: ruleComment : ( ( rule__Comment__RemarkAssignment ) ) ;
    public final void ruleComment() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:717:2: ( ( ( rule__Comment__RemarkAssignment ) ) )
            // InternalSpinCAD.g:718:1: ( ( rule__Comment__RemarkAssignment ) )
            {
            // InternalSpinCAD.g:718:1: ( ( rule__Comment__RemarkAssignment ) )
            // InternalSpinCAD.g:719:1: ( rule__Comment__RemarkAssignment )
            {
             before(grammarAccess.getCommentAccess().getRemarkAssignment()); 
            // InternalSpinCAD.g:720:1: ( rule__Comment__RemarkAssignment )
            // InternalSpinCAD.g:720:2: rule__Comment__RemarkAssignment
            {
            pushFollow(FOLLOW_2);
            rule__Comment__RemarkAssignment();

            state._fsp--;


            }

             after(grammarAccess.getCommentAccess().getRemarkAssignment()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleComment"


    // $ANTLR start "entryRuleLabel"
    // InternalSpinCAD.g:732:1: entryRuleLabel : ruleLabel EOF ;
    public final void entryRuleLabel() throws RecognitionException {
        try {
            // InternalSpinCAD.g:733:1: ( ruleLabel EOF )
            // InternalSpinCAD.g:734:1: ruleLabel EOF
            {
             before(grammarAccess.getLabelRule()); 
            pushFollow(FOLLOW_1);
            ruleLabel();

            state._fsp--;

             after(grammarAccess.getLabelRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLabel"


    // $ANTLR start "ruleLabel"
    // InternalSpinCAD.g:741:1: ruleLabel : ( ( rule__Label__Group__0 ) ) ;
    public final void ruleLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:745:2: ( ( ( rule__Label__Group__0 ) ) )
            // InternalSpinCAD.g:746:1: ( ( rule__Label__Group__0 ) )
            {
            // InternalSpinCAD.g:746:1: ( ( rule__Label__Group__0 ) )
            // InternalSpinCAD.g:747:1: ( rule__Label__Group__0 )
            {
             before(grammarAccess.getLabelAccess().getGroup()); 
            // InternalSpinCAD.g:748:1: ( rule__Label__Group__0 )
            // InternalSpinCAD.g:748:2: rule__Label__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Label__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLabelAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLabel"


    // $ANTLR start "entryRuleMacro"
    // InternalSpinCAD.g:760:1: entryRuleMacro : ruleMacro EOF ;
    public final void entryRuleMacro() throws RecognitionException {
        try {
            // InternalSpinCAD.g:761:1: ( ruleMacro EOF )
            // InternalSpinCAD.g:762:1: ruleMacro EOF
            {
             before(grammarAccess.getMacroRule()); 
            pushFollow(FOLLOW_1);
            ruleMacro();

            state._fsp--;

             after(grammarAccess.getMacroRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMacro"


    // $ANTLR start "ruleMacro"
    // InternalSpinCAD.g:769:1: ruleMacro : ( ( rule__Macro__Alternatives ) ) ;
    public final void ruleMacro() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:773:2: ( ( ( rule__Macro__Alternatives ) ) )
            // InternalSpinCAD.g:774:1: ( ( rule__Macro__Alternatives ) )
            {
            // InternalSpinCAD.g:774:1: ( ( rule__Macro__Alternatives ) )
            // InternalSpinCAD.g:775:1: ( rule__Macro__Alternatives )
            {
             before(grammarAccess.getMacroAccess().getAlternatives()); 
            // InternalSpinCAD.g:776:1: ( rule__Macro__Alternatives )
            // InternalSpinCAD.g:776:2: rule__Macro__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Macro__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getMacroAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMacro"


    // $ANTLR start "entryRuleIsPinConnected"
    // InternalSpinCAD.g:788:1: entryRuleIsPinConnected : ruleIsPinConnected EOF ;
    public final void entryRuleIsPinConnected() throws RecognitionException {
        try {
            // InternalSpinCAD.g:789:1: ( ruleIsPinConnected EOF )
            // InternalSpinCAD.g:790:1: ruleIsPinConnected EOF
            {
             before(grammarAccess.getIsPinConnectedRule()); 
            pushFollow(FOLLOW_1);
            ruleIsPinConnected();

            state._fsp--;

             after(grammarAccess.getIsPinConnectedRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsPinConnected"


    // $ANTLR start "ruleIsPinConnected"
    // InternalSpinCAD.g:797:1: ruleIsPinConnected : ( ( rule__IsPinConnected__Group__0 ) ) ;
    public final void ruleIsPinConnected() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:801:2: ( ( ( rule__IsPinConnected__Group__0 ) ) )
            // InternalSpinCAD.g:802:1: ( ( rule__IsPinConnected__Group__0 ) )
            {
            // InternalSpinCAD.g:802:1: ( ( rule__IsPinConnected__Group__0 ) )
            // InternalSpinCAD.g:803:1: ( rule__IsPinConnected__Group__0 )
            {
             before(grammarAccess.getIsPinConnectedAccess().getGroup()); 
            // InternalSpinCAD.g:804:1: ( rule__IsPinConnected__Group__0 )
            // InternalSpinCAD.g:804:2: rule__IsPinConnected__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsPinConnected__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsPinConnectedAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsPinConnected"


    // $ANTLR start "entryRuleIsGreaterThan"
    // InternalSpinCAD.g:816:1: entryRuleIsGreaterThan : ruleIsGreaterThan EOF ;
    public final void entryRuleIsGreaterThan() throws RecognitionException {
        try {
            // InternalSpinCAD.g:817:1: ( ruleIsGreaterThan EOF )
            // InternalSpinCAD.g:818:1: ruleIsGreaterThan EOF
            {
             before(grammarAccess.getIsGreaterThanRule()); 
            pushFollow(FOLLOW_1);
            ruleIsGreaterThan();

            state._fsp--;

             after(grammarAccess.getIsGreaterThanRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsGreaterThan"


    // $ANTLR start "ruleIsGreaterThan"
    // InternalSpinCAD.g:825:1: ruleIsGreaterThan : ( ( rule__IsGreaterThan__Group__0 ) ) ;
    public final void ruleIsGreaterThan() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:829:2: ( ( ( rule__IsGreaterThan__Group__0 ) ) )
            // InternalSpinCAD.g:830:1: ( ( rule__IsGreaterThan__Group__0 ) )
            {
            // InternalSpinCAD.g:830:1: ( ( rule__IsGreaterThan__Group__0 ) )
            // InternalSpinCAD.g:831:1: ( rule__IsGreaterThan__Group__0 )
            {
             before(grammarAccess.getIsGreaterThanAccess().getGroup()); 
            // InternalSpinCAD.g:832:1: ( rule__IsGreaterThan__Group__0 )
            // InternalSpinCAD.g:832:2: rule__IsGreaterThan__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsGreaterThanAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsGreaterThan"


    // $ANTLR start "entryRuleIsLessThan"
    // InternalSpinCAD.g:844:1: entryRuleIsLessThan : ruleIsLessThan EOF ;
    public final void entryRuleIsLessThan() throws RecognitionException {
        try {
            // InternalSpinCAD.g:845:1: ( ruleIsLessThan EOF )
            // InternalSpinCAD.g:846:1: ruleIsLessThan EOF
            {
             before(grammarAccess.getIsLessThanRule()); 
            pushFollow(FOLLOW_1);
            ruleIsLessThan();

            state._fsp--;

             after(grammarAccess.getIsLessThanRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsLessThan"


    // $ANTLR start "ruleIsLessThan"
    // InternalSpinCAD.g:853:1: ruleIsLessThan : ( ( rule__IsLessThan__Group__0 ) ) ;
    public final void ruleIsLessThan() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:857:2: ( ( ( rule__IsLessThan__Group__0 ) ) )
            // InternalSpinCAD.g:858:1: ( ( rule__IsLessThan__Group__0 ) )
            {
            // InternalSpinCAD.g:858:1: ( ( rule__IsLessThan__Group__0 ) )
            // InternalSpinCAD.g:859:1: ( rule__IsLessThan__Group__0 )
            {
             before(grammarAccess.getIsLessThanAccess().getGroup()); 
            // InternalSpinCAD.g:860:1: ( rule__IsLessThan__Group__0 )
            // InternalSpinCAD.g:860:2: rule__IsLessThan__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsLessThan__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsLessThanAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsLessThan"


    // $ANTLR start "entryRuleIsEqualTo"
    // InternalSpinCAD.g:872:1: entryRuleIsEqualTo : ruleIsEqualTo EOF ;
    public final void entryRuleIsEqualTo() throws RecognitionException {
        try {
            // InternalSpinCAD.g:873:1: ( ruleIsEqualTo EOF )
            // InternalSpinCAD.g:874:1: ruleIsEqualTo EOF
            {
             before(grammarAccess.getIsEqualToRule()); 
            pushFollow(FOLLOW_1);
            ruleIsEqualTo();

            state._fsp--;

             after(grammarAccess.getIsEqualToRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsEqualTo"


    // $ANTLR start "ruleIsEqualTo"
    // InternalSpinCAD.g:881:1: ruleIsEqualTo : ( ( rule__IsEqualTo__Group__0 ) ) ;
    public final void ruleIsEqualTo() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:885:2: ( ( ( rule__IsEqualTo__Group__0 ) ) )
            // InternalSpinCAD.g:886:1: ( ( rule__IsEqualTo__Group__0 ) )
            {
            // InternalSpinCAD.g:886:1: ( ( rule__IsEqualTo__Group__0 ) )
            // InternalSpinCAD.g:887:1: ( rule__IsEqualTo__Group__0 )
            {
             before(grammarAccess.getIsEqualToAccess().getGroup()); 
            // InternalSpinCAD.g:888:1: ( rule__IsEqualTo__Group__0 )
            // InternalSpinCAD.g:888:2: rule__IsEqualTo__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsEqualTo__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsEqualToAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsEqualTo"


    // $ANTLR start "entryRuleIsTrue"
    // InternalSpinCAD.g:900:1: entryRuleIsTrue : ruleIsTrue EOF ;
    public final void entryRuleIsTrue() throws RecognitionException {
        try {
            // InternalSpinCAD.g:901:1: ( ruleIsTrue EOF )
            // InternalSpinCAD.g:902:1: ruleIsTrue EOF
            {
             before(grammarAccess.getIsTrueRule()); 
            pushFollow(FOLLOW_1);
            ruleIsTrue();

            state._fsp--;

             after(grammarAccess.getIsTrueRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsTrue"


    // $ANTLR start "ruleIsTrue"
    // InternalSpinCAD.g:909:1: ruleIsTrue : ( ( rule__IsTrue__Group__0 ) ) ;
    public final void ruleIsTrue() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:913:2: ( ( ( rule__IsTrue__Group__0 ) ) )
            // InternalSpinCAD.g:914:1: ( ( rule__IsTrue__Group__0 ) )
            {
            // InternalSpinCAD.g:914:1: ( ( rule__IsTrue__Group__0 ) )
            // InternalSpinCAD.g:915:1: ( rule__IsTrue__Group__0 )
            {
             before(grammarAccess.getIsTrueAccess().getGroup()); 
            // InternalSpinCAD.g:916:1: ( rule__IsTrue__Group__0 )
            // InternalSpinCAD.g:916:2: rule__IsTrue__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsTrue__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsTrueAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsTrue"


    // $ANTLR start "entryRuleIsElse"
    // InternalSpinCAD.g:928:1: entryRuleIsElse : ruleIsElse EOF ;
    public final void entryRuleIsElse() throws RecognitionException {
        try {
            // InternalSpinCAD.g:929:1: ( ruleIsElse EOF )
            // InternalSpinCAD.g:930:1: ruleIsElse EOF
            {
             before(grammarAccess.getIsElseRule()); 
            pushFollow(FOLLOW_1);
            ruleIsElse();

            state._fsp--;

             after(grammarAccess.getIsElseRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsElse"


    // $ANTLR start "ruleIsElse"
    // InternalSpinCAD.g:937:1: ruleIsElse : ( ( rule__IsElse__Group__0 ) ) ;
    public final void ruleIsElse() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:941:2: ( ( ( rule__IsElse__Group__0 ) ) )
            // InternalSpinCAD.g:942:1: ( ( rule__IsElse__Group__0 ) )
            {
            // InternalSpinCAD.g:942:1: ( ( rule__IsElse__Group__0 ) )
            // InternalSpinCAD.g:943:1: ( rule__IsElse__Group__0 )
            {
             before(grammarAccess.getIsElseAccess().getGroup()); 
            // InternalSpinCAD.g:944:1: ( rule__IsElse__Group__0 )
            // InternalSpinCAD.g:944:2: rule__IsElse__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsElse__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsElseAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsElse"


    // $ANTLR start "entryRuleIsEndif"
    // InternalSpinCAD.g:956:1: entryRuleIsEndif : ruleIsEndif EOF ;
    public final void entryRuleIsEndif() throws RecognitionException {
        try {
            // InternalSpinCAD.g:957:1: ( ruleIsEndif EOF )
            // InternalSpinCAD.g:958:1: ruleIsEndif EOF
            {
             before(grammarAccess.getIsEndifRule()); 
            pushFollow(FOLLOW_1);
            ruleIsEndif();

            state._fsp--;

             after(grammarAccess.getIsEndifRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsEndif"


    // $ANTLR start "ruleIsEndif"
    // InternalSpinCAD.g:965:1: ruleIsEndif : ( ( rule__IsEndif__Group__0 ) ) ;
    public final void ruleIsEndif() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:969:2: ( ( ( rule__IsEndif__Group__0 ) ) )
            // InternalSpinCAD.g:970:1: ( ( rule__IsEndif__Group__0 ) )
            {
            // InternalSpinCAD.g:970:1: ( ( rule__IsEndif__Group__0 ) )
            // InternalSpinCAD.g:971:1: ( rule__IsEndif__Group__0 )
            {
             before(grammarAccess.getIsEndifAccess().getGroup()); 
            // InternalSpinCAD.g:972:1: ( rule__IsEndif__Group__0 )
            // InternalSpinCAD.g:972:2: rule__IsEndif__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsEndif__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsEndifAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsEndif"


    // $ANTLR start "entryRuleIsOr"
    // InternalSpinCAD.g:984:1: entryRuleIsOr : ruleIsOr EOF ;
    public final void entryRuleIsOr() throws RecognitionException {
        try {
            // InternalSpinCAD.g:985:1: ( ruleIsOr EOF )
            // InternalSpinCAD.g:986:1: ruleIsOr EOF
            {
             before(grammarAccess.getIsOrRule()); 
            pushFollow(FOLLOW_1);
            ruleIsOr();

            state._fsp--;

             after(grammarAccess.getIsOrRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIsOr"


    // $ANTLR start "ruleIsOr"
    // InternalSpinCAD.g:993:1: ruleIsOr : ( ( rule__IsOr__Group__0 ) ) ;
    public final void ruleIsOr() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:997:2: ( ( ( rule__IsOr__Group__0 ) ) )
            // InternalSpinCAD.g:998:1: ( ( rule__IsOr__Group__0 ) )
            {
            // InternalSpinCAD.g:998:1: ( ( rule__IsOr__Group__0 ) )
            // InternalSpinCAD.g:999:1: ( rule__IsOr__Group__0 )
            {
             before(grammarAccess.getIsOrAccess().getGroup()); 
            // InternalSpinCAD.g:1000:1: ( rule__IsOr__Group__0 )
            // InternalSpinCAD.g:1000:2: rule__IsOr__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IsOr__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getIsOrAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIsOr"


    // $ANTLR start "entryRuleGetInputDefault"
    // InternalSpinCAD.g:1012:1: entryRuleGetInputDefault : ruleGetInputDefault EOF ;
    public final void entryRuleGetInputDefault() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1013:1: ( ruleGetInputDefault EOF )
            // InternalSpinCAD.g:1014:1: ruleGetInputDefault EOF
            {
             before(grammarAccess.getGetInputDefaultRule()); 
            pushFollow(FOLLOW_1);
            ruleGetInputDefault();

            state._fsp--;

             after(grammarAccess.getGetInputDefaultRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleGetInputDefault"


    // $ANTLR start "ruleGetInputDefault"
    // InternalSpinCAD.g:1021:1: ruleGetInputDefault : ( ( rule__GetInputDefault__Group__0 ) ) ;
    public final void ruleGetInputDefault() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1025:2: ( ( ( rule__GetInputDefault__Group__0 ) ) )
            // InternalSpinCAD.g:1026:1: ( ( rule__GetInputDefault__Group__0 ) )
            {
            // InternalSpinCAD.g:1026:1: ( ( rule__GetInputDefault__Group__0 ) )
            // InternalSpinCAD.g:1027:1: ( rule__GetInputDefault__Group__0 )
            {
             before(grammarAccess.getGetInputDefaultAccess().getGroup()); 
            // InternalSpinCAD.g:1028:1: ( rule__GetInputDefault__Group__0 )
            // InternalSpinCAD.g:1028:2: rule__GetInputDefault__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getGetInputDefaultAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleGetInputDefault"


    // $ANTLR start "entryRuleGetDelayScaleControl"
    // InternalSpinCAD.g:1040:1: entryRuleGetDelayScaleControl : ruleGetDelayScaleControl EOF ;
    public final void entryRuleGetDelayScaleControl() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1041:1: ( ruleGetDelayScaleControl EOF )
            // InternalSpinCAD.g:1042:1: ruleGetDelayScaleControl EOF
            {
             before(grammarAccess.getGetDelayScaleControlRule()); 
            pushFollow(FOLLOW_1);
            ruleGetDelayScaleControl();

            state._fsp--;

             after(grammarAccess.getGetDelayScaleControlRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleGetDelayScaleControl"


    // $ANTLR start "ruleGetDelayScaleControl"
    // InternalSpinCAD.g:1049:1: ruleGetDelayScaleControl : ( ( rule__GetDelayScaleControl__Group__0 ) ) ;
    public final void ruleGetDelayScaleControl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1053:2: ( ( ( rule__GetDelayScaleControl__Group__0 ) ) )
            // InternalSpinCAD.g:1054:1: ( ( rule__GetDelayScaleControl__Group__0 ) )
            {
            // InternalSpinCAD.g:1054:1: ( ( rule__GetDelayScaleControl__Group__0 ) )
            // InternalSpinCAD.g:1055:1: ( rule__GetDelayScaleControl__Group__0 )
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getGroup()); 
            // InternalSpinCAD.g:1056:1: ( rule__GetDelayScaleControl__Group__0 )
            // InternalSpinCAD.g:1056:2: rule__GetDelayScaleControl__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getGetDelayScaleControlAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleGetDelayScaleControl"


    // $ANTLR start "entryRuleReadChorusTap"
    // InternalSpinCAD.g:1068:1: entryRuleReadChorusTap : ruleReadChorusTap EOF ;
    public final void entryRuleReadChorusTap() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1069:1: ( ruleReadChorusTap EOF )
            // InternalSpinCAD.g:1070:1: ruleReadChorusTap EOF
            {
             before(grammarAccess.getReadChorusTapRule()); 
            pushFollow(FOLLOW_1);
            ruleReadChorusTap();

            state._fsp--;

             after(grammarAccess.getReadChorusTapRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadChorusTap"


    // $ANTLR start "ruleReadChorusTap"
    // InternalSpinCAD.g:1077:1: ruleReadChorusTap : ( ( rule__ReadChorusTap__Group__0 ) ) ;
    public final void ruleReadChorusTap() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1081:2: ( ( ( rule__ReadChorusTap__Group__0 ) ) )
            // InternalSpinCAD.g:1082:1: ( ( rule__ReadChorusTap__Group__0 ) )
            {
            // InternalSpinCAD.g:1082:1: ( ( rule__ReadChorusTap__Group__0 ) )
            // InternalSpinCAD.g:1083:1: ( rule__ReadChorusTap__Group__0 )
            {
             before(grammarAccess.getReadChorusTapAccess().getGroup()); 
            // InternalSpinCAD.g:1084:1: ( rule__ReadChorusTap__Group__0 )
            // InternalSpinCAD.g:1084:2: rule__ReadChorusTap__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadChorusTap"


    // $ANTLR start "entryRuleGetSamplesFromRatio"
    // InternalSpinCAD.g:1096:1: entryRuleGetSamplesFromRatio : ruleGetSamplesFromRatio EOF ;
    public final void entryRuleGetSamplesFromRatio() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1097:1: ( ruleGetSamplesFromRatio EOF )
            // InternalSpinCAD.g:1098:1: ruleGetSamplesFromRatio EOF
            {
             before(grammarAccess.getGetSamplesFromRatioRule()); 
            pushFollow(FOLLOW_1);
            ruleGetSamplesFromRatio();

            state._fsp--;

             after(grammarAccess.getGetSamplesFromRatioRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleGetSamplesFromRatio"


    // $ANTLR start "ruleGetSamplesFromRatio"
    // InternalSpinCAD.g:1105:1: ruleGetSamplesFromRatio : ( ( rule__GetSamplesFromRatio__Group__0 ) ) ;
    public final void ruleGetSamplesFromRatio() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1109:2: ( ( ( rule__GetSamplesFromRatio__Group__0 ) ) )
            // InternalSpinCAD.g:1110:1: ( ( rule__GetSamplesFromRatio__Group__0 ) )
            {
            // InternalSpinCAD.g:1110:1: ( ( rule__GetSamplesFromRatio__Group__0 ) )
            // InternalSpinCAD.g:1111:1: ( rule__GetSamplesFromRatio__Group__0 )
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getGroup()); 
            // InternalSpinCAD.g:1112:1: ( rule__GetSamplesFromRatio__Group__0 )
            // InternalSpinCAD.g:1112:2: rule__GetSamplesFromRatio__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getGetSamplesFromRatioAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleGetSamplesFromRatio"


    // $ANTLR start "entryRuleSemitonesToRmpRate"
    // InternalSpinCAD.g:1124:1: entryRuleSemitonesToRmpRate : ruleSemitonesToRmpRate EOF ;
    public final void entryRuleSemitonesToRmpRate() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1125:1: ( ruleSemitonesToRmpRate EOF )
            // InternalSpinCAD.g:1126:1: ruleSemitonesToRmpRate EOF
            {
             before(grammarAccess.getSemitonesToRmpRateRule()); 
            pushFollow(FOLLOW_1);
            ruleSemitonesToRmpRate();

            state._fsp--;

             after(grammarAccess.getSemitonesToRmpRateRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSemitonesToRmpRate"


    // $ANTLR start "ruleSemitonesToRmpRate"
    // InternalSpinCAD.g:1133:1: ruleSemitonesToRmpRate : ( ( rule__SemitonesToRmpRate__Group__0 ) ) ;
    public final void ruleSemitonesToRmpRate() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1137:2: ( ( ( rule__SemitonesToRmpRate__Group__0 ) ) )
            // InternalSpinCAD.g:1138:1: ( ( rule__SemitonesToRmpRate__Group__0 ) )
            {
            // InternalSpinCAD.g:1138:1: ( ( rule__SemitonesToRmpRate__Group__0 ) )
            // InternalSpinCAD.g:1139:1: ( rule__SemitonesToRmpRate__Group__0 )
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getGroup()); 
            // InternalSpinCAD.g:1140:1: ( rule__SemitonesToRmpRate__Group__0 )
            // InternalSpinCAD.g:1140:2: rule__SemitonesToRmpRate__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSemitonesToRmpRateAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSemitonesToRmpRate"


    // $ANTLR start "entryRuleGetBaseAddress"
    // InternalSpinCAD.g:1152:1: entryRuleGetBaseAddress : ruleGetBaseAddress EOF ;
    public final void entryRuleGetBaseAddress() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1153:1: ( ruleGetBaseAddress EOF )
            // InternalSpinCAD.g:1154:1: ruleGetBaseAddress EOF
            {
             before(grammarAccess.getGetBaseAddressRule()); 
            pushFollow(FOLLOW_1);
            ruleGetBaseAddress();

            state._fsp--;

             after(grammarAccess.getGetBaseAddressRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleGetBaseAddress"


    // $ANTLR start "ruleGetBaseAddress"
    // InternalSpinCAD.g:1161:1: ruleGetBaseAddress : ( ( rule__GetBaseAddress__Group__0 ) ) ;
    public final void ruleGetBaseAddress() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1165:2: ( ( ( rule__GetBaseAddress__Group__0 ) ) )
            // InternalSpinCAD.g:1166:1: ( ( rule__GetBaseAddress__Group__0 ) )
            {
            // InternalSpinCAD.g:1166:1: ( ( rule__GetBaseAddress__Group__0 ) )
            // InternalSpinCAD.g:1167:1: ( rule__GetBaseAddress__Group__0 )
            {
             before(grammarAccess.getGetBaseAddressAccess().getGroup()); 
            // InternalSpinCAD.g:1168:1: ( rule__GetBaseAddress__Group__0 )
            // InternalSpinCAD.g:1168:2: rule__GetBaseAddress__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__GetBaseAddress__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getGetBaseAddressAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleGetBaseAddress"


    // $ANTLR start "entryRuleSetOutputPin"
    // InternalSpinCAD.g:1180:1: entryRuleSetOutputPin : ruleSetOutputPin EOF ;
    public final void entryRuleSetOutputPin() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1181:1: ( ruleSetOutputPin EOF )
            // InternalSpinCAD.g:1182:1: ruleSetOutputPin EOF
            {
             before(grammarAccess.getSetOutputPinRule()); 
            pushFollow(FOLLOW_1);
            ruleSetOutputPin();

            state._fsp--;

             after(grammarAccess.getSetOutputPinRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSetOutputPin"


    // $ANTLR start "ruleSetOutputPin"
    // InternalSpinCAD.g:1189:1: ruleSetOutputPin : ( ( rule__SetOutputPin__Group__0 ) ) ;
    public final void ruleSetOutputPin() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1193:2: ( ( ( rule__SetOutputPin__Group__0 ) ) )
            // InternalSpinCAD.g:1194:1: ( ( rule__SetOutputPin__Group__0 ) )
            {
            // InternalSpinCAD.g:1194:1: ( ( rule__SetOutputPin__Group__0 ) )
            // InternalSpinCAD.g:1195:1: ( rule__SetOutputPin__Group__0 )
            {
             before(grammarAccess.getSetOutputPinAccess().getGroup()); 
            // InternalSpinCAD.g:1196:1: ( rule__SetOutputPin__Group__0 )
            // InternalSpinCAD.g:1196:2: rule__SetOutputPin__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SetOutputPin__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSetOutputPinAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSetOutputPin"


    // $ANTLR start "entryRuleMinusDouble"
    // InternalSpinCAD.g:1208:1: entryRuleMinusDouble : ruleMinusDouble EOF ;
    public final void entryRuleMinusDouble() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1209:1: ( ruleMinusDouble EOF )
            // InternalSpinCAD.g:1210:1: ruleMinusDouble EOF
            {
             before(grammarAccess.getMinusDoubleRule()); 
            pushFollow(FOLLOW_1);
            ruleMinusDouble();

            state._fsp--;

             after(grammarAccess.getMinusDoubleRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMinusDouble"


    // $ANTLR start "ruleMinusDouble"
    // InternalSpinCAD.g:1217:1: ruleMinusDouble : ( ( rule__MinusDouble__Group__0 ) ) ;
    public final void ruleMinusDouble() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1221:2: ( ( ( rule__MinusDouble__Group__0 ) ) )
            // InternalSpinCAD.g:1222:1: ( ( rule__MinusDouble__Group__0 ) )
            {
            // InternalSpinCAD.g:1222:1: ( ( rule__MinusDouble__Group__0 ) )
            // InternalSpinCAD.g:1223:1: ( rule__MinusDouble__Group__0 )
            {
             before(grammarAccess.getMinusDoubleAccess().getGroup()); 
            // InternalSpinCAD.g:1224:1: ( rule__MinusDouble__Group__0 )
            // InternalSpinCAD.g:1224:2: rule__MinusDouble__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MinusDouble__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getMinusDoubleAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMinusDouble"


    // $ANTLR start "entryRuleDivideDouble"
    // InternalSpinCAD.g:1236:1: entryRuleDivideDouble : ruleDivideDouble EOF ;
    public final void entryRuleDivideDouble() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1237:1: ( ruleDivideDouble EOF )
            // InternalSpinCAD.g:1238:1: ruleDivideDouble EOF
            {
             before(grammarAccess.getDivideDoubleRule()); 
            pushFollow(FOLLOW_1);
            ruleDivideDouble();

            state._fsp--;

             after(grammarAccess.getDivideDoubleRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDivideDouble"


    // $ANTLR start "ruleDivideDouble"
    // InternalSpinCAD.g:1245:1: ruleDivideDouble : ( ( rule__DivideDouble__Group__0 ) ) ;
    public final void ruleDivideDouble() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1249:2: ( ( ( rule__DivideDouble__Group__0 ) ) )
            // InternalSpinCAD.g:1250:1: ( ( rule__DivideDouble__Group__0 ) )
            {
            // InternalSpinCAD.g:1250:1: ( ( rule__DivideDouble__Group__0 ) )
            // InternalSpinCAD.g:1251:1: ( rule__DivideDouble__Group__0 )
            {
             before(grammarAccess.getDivideDoubleAccess().getGroup()); 
            // InternalSpinCAD.g:1252:1: ( rule__DivideDouble__Group__0 )
            // InternalSpinCAD.g:1252:2: rule__DivideDouble__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DivideDouble__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getDivideDoubleAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDivideDouble"


    // $ANTLR start "entryRuleEquals"
    // InternalSpinCAD.g:1264:1: entryRuleEquals : ruleEquals EOF ;
    public final void entryRuleEquals() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1265:1: ( ruleEquals EOF )
            // InternalSpinCAD.g:1266:1: ruleEquals EOF
            {
             before(grammarAccess.getEqualsRule()); 
            pushFollow(FOLLOW_1);
            ruleEquals();

            state._fsp--;

             after(grammarAccess.getEqualsRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleEquals"


    // $ANTLR start "ruleEquals"
    // InternalSpinCAD.g:1273:1: ruleEquals : ( ( rule__Equals__Group__0 ) ) ;
    public final void ruleEquals() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1277:2: ( ( ( rule__Equals__Group__0 ) ) )
            // InternalSpinCAD.g:1278:1: ( ( rule__Equals__Group__0 ) )
            {
            // InternalSpinCAD.g:1278:1: ( ( rule__Equals__Group__0 ) )
            // InternalSpinCAD.g:1279:1: ( rule__Equals__Group__0 )
            {
             before(grammarAccess.getEqualsAccess().getGroup()); 
            // InternalSpinCAD.g:1280:1: ( rule__Equals__Group__0 )
            // InternalSpinCAD.g:1280:2: rule__Equals__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Equals__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getEqualsAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleEquals"


    // $ANTLR start "entryRuleEqualsBool"
    // InternalSpinCAD.g:1292:1: entryRuleEqualsBool : ruleEqualsBool EOF ;
    public final void entryRuleEqualsBool() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1293:1: ( ruleEqualsBool EOF )
            // InternalSpinCAD.g:1294:1: ruleEqualsBool EOF
            {
             before(grammarAccess.getEqualsBoolRule()); 
            pushFollow(FOLLOW_1);
            ruleEqualsBool();

            state._fsp--;

             after(grammarAccess.getEqualsBoolRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleEqualsBool"


    // $ANTLR start "ruleEqualsBool"
    // InternalSpinCAD.g:1301:1: ruleEqualsBool : ( ( rule__EqualsBool__Group__0 ) ) ;
    public final void ruleEqualsBool() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1305:2: ( ( ( rule__EqualsBool__Group__0 ) ) )
            // InternalSpinCAD.g:1306:1: ( ( rule__EqualsBool__Group__0 ) )
            {
            // InternalSpinCAD.g:1306:1: ( ( rule__EqualsBool__Group__0 ) )
            // InternalSpinCAD.g:1307:1: ( rule__EqualsBool__Group__0 )
            {
             before(grammarAccess.getEqualsBoolAccess().getGroup()); 
            // InternalSpinCAD.g:1308:1: ( rule__EqualsBool__Group__0 )
            // InternalSpinCAD.g:1308:2: rule__EqualsBool__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__EqualsBool__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getEqualsBoolAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleEqualsBool"


    // $ANTLR start "entryRuleDivideInt"
    // InternalSpinCAD.g:1320:1: entryRuleDivideInt : ruleDivideInt EOF ;
    public final void entryRuleDivideInt() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1321:1: ( ruleDivideInt EOF )
            // InternalSpinCAD.g:1322:1: ruleDivideInt EOF
            {
             before(grammarAccess.getDivideIntRule()); 
            pushFollow(FOLLOW_1);
            ruleDivideInt();

            state._fsp--;

             after(grammarAccess.getDivideIntRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDivideInt"


    // $ANTLR start "ruleDivideInt"
    // InternalSpinCAD.g:1329:1: ruleDivideInt : ( ( rule__DivideInt__Group__0 ) ) ;
    public final void ruleDivideInt() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1333:2: ( ( ( rule__DivideInt__Group__0 ) ) )
            // InternalSpinCAD.g:1334:1: ( ( rule__DivideInt__Group__0 ) )
            {
            // InternalSpinCAD.g:1334:1: ( ( rule__DivideInt__Group__0 ) )
            // InternalSpinCAD.g:1335:1: ( rule__DivideInt__Group__0 )
            {
             before(grammarAccess.getDivideIntAccess().getGroup()); 
            // InternalSpinCAD.g:1336:1: ( rule__DivideInt__Group__0 )
            // InternalSpinCAD.g:1336:2: rule__DivideInt__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DivideInt__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getDivideIntAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDivideInt"


    // $ANTLR start "entryRuleMultiplyDouble"
    // InternalSpinCAD.g:1348:1: entryRuleMultiplyDouble : ruleMultiplyDouble EOF ;
    public final void entryRuleMultiplyDouble() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1349:1: ( ruleMultiplyDouble EOF )
            // InternalSpinCAD.g:1350:1: ruleMultiplyDouble EOF
            {
             before(grammarAccess.getMultiplyDoubleRule()); 
            pushFollow(FOLLOW_1);
            ruleMultiplyDouble();

            state._fsp--;

             after(grammarAccess.getMultiplyDoubleRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMultiplyDouble"


    // $ANTLR start "ruleMultiplyDouble"
    // InternalSpinCAD.g:1357:1: ruleMultiplyDouble : ( ( rule__MultiplyDouble__Group__0 ) ) ;
    public final void ruleMultiplyDouble() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1361:2: ( ( ( rule__MultiplyDouble__Group__0 ) ) )
            // InternalSpinCAD.g:1362:1: ( ( rule__MultiplyDouble__Group__0 ) )
            {
            // InternalSpinCAD.g:1362:1: ( ( rule__MultiplyDouble__Group__0 ) )
            // InternalSpinCAD.g:1363:1: ( rule__MultiplyDouble__Group__0 )
            {
             before(grammarAccess.getMultiplyDoubleAccess().getGroup()); 
            // InternalSpinCAD.g:1364:1: ( rule__MultiplyDouble__Group__0 )
            // InternalSpinCAD.g:1364:2: rule__MultiplyDouble__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getMultiplyDoubleAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMultiplyDouble"


    // $ANTLR start "entryRuleSetChorusWidth"
    // InternalSpinCAD.g:1376:1: entryRuleSetChorusWidth : ruleSetChorusWidth EOF ;
    public final void entryRuleSetChorusWidth() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1377:1: ( ruleSetChorusWidth EOF )
            // InternalSpinCAD.g:1378:1: ruleSetChorusWidth EOF
            {
             before(grammarAccess.getSetChorusWidthRule()); 
            pushFollow(FOLLOW_1);
            ruleSetChorusWidth();

            state._fsp--;

             after(grammarAccess.getSetChorusWidthRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSetChorusWidth"


    // $ANTLR start "ruleSetChorusWidth"
    // InternalSpinCAD.g:1385:1: ruleSetChorusWidth : ( ( rule__SetChorusWidth__Group__0 ) ) ;
    public final void ruleSetChorusWidth() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1389:2: ( ( ( rule__SetChorusWidth__Group__0 ) ) )
            // InternalSpinCAD.g:1390:1: ( ( rule__SetChorusWidth__Group__0 ) )
            {
            // InternalSpinCAD.g:1390:1: ( ( rule__SetChorusWidth__Group__0 ) )
            // InternalSpinCAD.g:1391:1: ( rule__SetChorusWidth__Group__0 )
            {
             before(grammarAccess.getSetChorusWidthAccess().getGroup()); 
            // InternalSpinCAD.g:1392:1: ( rule__SetChorusWidth__Group__0 )
            // InternalSpinCAD.g:1392:2: rule__SetChorusWidth__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSetChorusWidthAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSetChorusWidth"


    // $ANTLR start "entryRuleInstruction"
    // InternalSpinCAD.g:1404:1: entryRuleInstruction : ruleInstruction EOF ;
    public final void entryRuleInstruction() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1405:1: ( ruleInstruction EOF )
            // InternalSpinCAD.g:1406:1: ruleInstruction EOF
            {
             before(grammarAccess.getInstructionRule()); 
            pushFollow(FOLLOW_1);
            ruleInstruction();

            state._fsp--;

             after(grammarAccess.getInstructionRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInstruction"


    // $ANTLR start "ruleInstruction"
    // InternalSpinCAD.g:1413:1: ruleInstruction : ( ( rule__Instruction__Alternatives ) ) ;
    public final void ruleInstruction() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1417:2: ( ( ( rule__Instruction__Alternatives ) ) )
            // InternalSpinCAD.g:1418:1: ( ( rule__Instruction__Alternatives ) )
            {
            // InternalSpinCAD.g:1418:1: ( ( rule__Instruction__Alternatives ) )
            // InternalSpinCAD.g:1419:1: ( rule__Instruction__Alternatives )
            {
             before(grammarAccess.getInstructionAccess().getAlternatives()); 
            // InternalSpinCAD.g:1420:1: ( rule__Instruction__Alternatives )
            // InternalSpinCAD.g:1420:2: rule__Instruction__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Instruction__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInstructionAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInstruction"


    // $ANTLR start "entryRuleInst_B6_S1_14"
    // InternalSpinCAD.g:1432:1: entryRuleInst_B6_S1_14 : ruleInst_B6_S1_14 EOF ;
    public final void entryRuleInst_B6_S1_14() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1433:1: ( ruleInst_B6_S1_14 EOF )
            // InternalSpinCAD.g:1434:1: ruleInst_B6_S1_14 EOF
            {
             before(grammarAccess.getInst_B6_S1_14Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_B6_S1_14();

            state._fsp--;

             after(grammarAccess.getInst_B6_S1_14Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_B6_S1_14"


    // $ANTLR start "ruleInst_B6_S1_14"
    // InternalSpinCAD.g:1441:1: ruleInst_B6_S1_14 : ( ( rule__Inst_B6_S1_14__Alternatives ) ) ;
    public final void ruleInst_B6_S1_14() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1445:2: ( ( ( rule__Inst_B6_S1_14__Alternatives ) ) )
            // InternalSpinCAD.g:1446:1: ( ( rule__Inst_B6_S1_14__Alternatives ) )
            {
            // InternalSpinCAD.g:1446:1: ( ( rule__Inst_B6_S1_14__Alternatives ) )
            // InternalSpinCAD.g:1447:1: ( rule__Inst_B6_S1_14__Alternatives )
            {
             before(grammarAccess.getInst_B6_S1_14Access().getAlternatives()); 
            // InternalSpinCAD.g:1448:1: ( rule__Inst_B6_S1_14__Alternatives )
            // InternalSpinCAD.g:1448:2: rule__Inst_B6_S1_14__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_B6_S1_14__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_B6_S1_14Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_B6_S1_14"


    // $ANTLR start "entryRuleInst_B15_S1_9"
    // InternalSpinCAD.g:1460:1: entryRuleInst_B15_S1_9 : ruleInst_B15_S1_9 EOF ;
    public final void entryRuleInst_B15_S1_9() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1461:1: ( ruleInst_B15_S1_9 EOF )
            // InternalSpinCAD.g:1462:1: ruleInst_B15_S1_9 EOF
            {
             before(grammarAccess.getInst_B15_S1_9Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_B15_S1_9();

            state._fsp--;

             after(grammarAccess.getInst_B15_S1_9Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_B15_S1_9"


    // $ANTLR start "ruleInst_B15_S1_9"
    // InternalSpinCAD.g:1469:1: ruleInst_B15_S1_9 : ( ( rule__Inst_B15_S1_9__Alternatives ) ) ;
    public final void ruleInst_B15_S1_9() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1473:2: ( ( ( rule__Inst_B15_S1_9__Alternatives ) ) )
            // InternalSpinCAD.g:1474:1: ( ( rule__Inst_B15_S1_9__Alternatives ) )
            {
            // InternalSpinCAD.g:1474:1: ( ( rule__Inst_B15_S1_9__Alternatives ) )
            // InternalSpinCAD.g:1475:1: ( rule__Inst_B15_S1_9__Alternatives )
            {
             before(grammarAccess.getInst_B15_S1_9Access().getAlternatives()); 
            // InternalSpinCAD.g:1476:1: ( rule__Inst_B15_S1_9__Alternatives )
            // InternalSpinCAD.g:1476:2: rule__Inst_B15_S1_9__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_B15_S1_9__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_B15_S1_9Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_B15_S1_9"


    // $ANTLR start "entryRuleInst_B6"
    // InternalSpinCAD.g:1488:1: entryRuleInst_B6 : ruleInst_B6 EOF ;
    public final void entryRuleInst_B6() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1489:1: ( ruleInst_B6 EOF )
            // InternalSpinCAD.g:1490:1: ruleInst_B6 EOF
            {
             before(grammarAccess.getInst_B6Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_B6();

            state._fsp--;

             after(grammarAccess.getInst_B6Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_B6"


    // $ANTLR start "ruleInst_B6"
    // InternalSpinCAD.g:1497:1: ruleInst_B6 : ( ( rule__Inst_B6__Alternatives ) ) ;
    public final void ruleInst_B6() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1501:2: ( ( ( rule__Inst_B6__Alternatives ) ) )
            // InternalSpinCAD.g:1502:1: ( ( rule__Inst_B6__Alternatives ) )
            {
            // InternalSpinCAD.g:1502:1: ( ( rule__Inst_B6__Alternatives ) )
            // InternalSpinCAD.g:1503:1: ( rule__Inst_B6__Alternatives )
            {
             before(grammarAccess.getInst_B6Access().getAlternatives()); 
            // InternalSpinCAD.g:1504:1: ( rule__Inst_B6__Alternatives )
            // InternalSpinCAD.g:1504:2: rule__Inst_B6__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_B6__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_B6Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_B6"


    // $ANTLR start "entryRuleInst_B24"
    // InternalSpinCAD.g:1516:1: entryRuleInst_B24 : ruleInst_B24 EOF ;
    public final void entryRuleInst_B24() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1517:1: ( ruleInst_B24 EOF )
            // InternalSpinCAD.g:1518:1: ruleInst_B24 EOF
            {
             before(grammarAccess.getInst_B24Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_B24();

            state._fsp--;

             after(grammarAccess.getInst_B24Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_B24"


    // $ANTLR start "ruleInst_B24"
    // InternalSpinCAD.g:1525:1: ruleInst_B24 : ( ( rule__Inst_B24__Alternatives ) ) ;
    public final void ruleInst_B24() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1529:2: ( ( ( rule__Inst_B24__Alternatives ) ) )
            // InternalSpinCAD.g:1530:1: ( ( rule__Inst_B24__Alternatives ) )
            {
            // InternalSpinCAD.g:1530:1: ( ( rule__Inst_B24__Alternatives ) )
            // InternalSpinCAD.g:1531:1: ( rule__Inst_B24__Alternatives )
            {
             before(grammarAccess.getInst_B24Access().getAlternatives()); 
            // InternalSpinCAD.g:1532:1: ( rule__Inst_B24__Alternatives )
            // InternalSpinCAD.g:1532:2: rule__Inst_B24__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_B24__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_B24Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_B24"


    // $ANTLR start "entryRuleInst_X0"
    // InternalSpinCAD.g:1544:1: entryRuleInst_X0 : ruleInst_X0 EOF ;
    public final void entryRuleInst_X0() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1545:1: ( ruleInst_X0 EOF )
            // InternalSpinCAD.g:1546:1: ruleInst_X0 EOF
            {
             before(grammarAccess.getInst_X0Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_X0();

            state._fsp--;

             after(grammarAccess.getInst_X0Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_X0"


    // $ANTLR start "ruleInst_X0"
    // InternalSpinCAD.g:1553:1: ruleInst_X0 : ( ( rule__Inst_X0__Alternatives ) ) ;
    public final void ruleInst_X0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1557:2: ( ( ( rule__Inst_X0__Alternatives ) ) )
            // InternalSpinCAD.g:1558:1: ( ( rule__Inst_X0__Alternatives ) )
            {
            // InternalSpinCAD.g:1558:1: ( ( rule__Inst_X0__Alternatives ) )
            // InternalSpinCAD.g:1559:1: ( rule__Inst_X0__Alternatives )
            {
             before(grammarAccess.getInst_X0Access().getAlternatives()); 
            // InternalSpinCAD.g:1560:1: ( rule__Inst_X0__Alternatives )
            // InternalSpinCAD.g:1560:2: rule__Inst_X0__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_X0__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_X0Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_X0"


    // $ANTLR start "entryRuleInst_S1_14_S1_10"
    // InternalSpinCAD.g:1572:1: entryRuleInst_S1_14_S1_10 : ruleInst_S1_14_S1_10 EOF ;
    public final void entryRuleInst_S1_14_S1_10() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1573:1: ( ruleInst_S1_14_S1_10 EOF )
            // InternalSpinCAD.g:1574:1: ruleInst_S1_14_S1_10 EOF
            {
             before(grammarAccess.getInst_S1_14_S1_10Rule()); 
            pushFollow(FOLLOW_1);
            ruleInst_S1_14_S1_10();

            state._fsp--;

             after(grammarAccess.getInst_S1_14_S1_10Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInst_S1_14_S1_10"


    // $ANTLR start "ruleInst_S1_14_S1_10"
    // InternalSpinCAD.g:1581:1: ruleInst_S1_14_S1_10 : ( ( rule__Inst_S1_14_S1_10__Alternatives ) ) ;
    public final void ruleInst_S1_14_S1_10() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1585:2: ( ( ( rule__Inst_S1_14_S1_10__Alternatives ) ) )
            // InternalSpinCAD.g:1586:1: ( ( rule__Inst_S1_14_S1_10__Alternatives ) )
            {
            // InternalSpinCAD.g:1586:1: ( ( rule__Inst_S1_14_S1_10__Alternatives ) )
            // InternalSpinCAD.g:1587:1: ( rule__Inst_S1_14_S1_10__Alternatives )
            {
             before(grammarAccess.getInst_S1_14_S1_10Access().getAlternatives()); 
            // InternalSpinCAD.g:1588:1: ( rule__Inst_S1_14_S1_10__Alternatives )
            // InternalSpinCAD.g:1588:2: rule__Inst_S1_14_S1_10__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Inst_S1_14_S1_10__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getInst_S1_14_S1_10Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInst_S1_14_S1_10"


    // $ANTLR start "entryRuleReadRegister"
    // InternalSpinCAD.g:1600:1: entryRuleReadRegister : ruleReadRegister EOF ;
    public final void entryRuleReadRegister() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1601:1: ( ruleReadRegister EOF )
            // InternalSpinCAD.g:1602:1: ruleReadRegister EOF
            {
             before(grammarAccess.getReadRegisterRule()); 
            pushFollow(FOLLOW_1);
            ruleReadRegister();

            state._fsp--;

             after(grammarAccess.getReadRegisterRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadRegister"


    // $ANTLR start "ruleReadRegister"
    // InternalSpinCAD.g:1609:1: ruleReadRegister : ( ( rule__ReadRegister__Group__0 ) ) ;
    public final void ruleReadRegister() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1613:2: ( ( ( rule__ReadRegister__Group__0 ) ) )
            // InternalSpinCAD.g:1614:1: ( ( rule__ReadRegister__Group__0 ) )
            {
            // InternalSpinCAD.g:1614:1: ( ( rule__ReadRegister__Group__0 ) )
            // InternalSpinCAD.g:1615:1: ( rule__ReadRegister__Group__0 )
            {
             before(grammarAccess.getReadRegisterAccess().getGroup()); 
            // InternalSpinCAD.g:1616:1: ( rule__ReadRegister__Group__0 )
            // InternalSpinCAD.g:1616:2: rule__ReadRegister__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegister__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadRegister"


    // $ANTLR start "entryRuleWriteRegisterLowshelf"
    // InternalSpinCAD.g:1628:1: entryRuleWriteRegisterLowshelf : ruleWriteRegisterLowshelf EOF ;
    public final void entryRuleWriteRegisterLowshelf() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1629:1: ( ruleWriteRegisterLowshelf EOF )
            // InternalSpinCAD.g:1630:1: ruleWriteRegisterLowshelf EOF
            {
             before(grammarAccess.getWriteRegisterLowshelfRule()); 
            pushFollow(FOLLOW_1);
            ruleWriteRegisterLowshelf();

            state._fsp--;

             after(grammarAccess.getWriteRegisterLowshelfRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWriteRegisterLowshelf"


    // $ANTLR start "ruleWriteRegisterLowshelf"
    // InternalSpinCAD.g:1637:1: ruleWriteRegisterLowshelf : ( ( rule__WriteRegisterLowshelf__Group__0 ) ) ;
    public final void ruleWriteRegisterLowshelf() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1641:2: ( ( ( rule__WriteRegisterLowshelf__Group__0 ) ) )
            // InternalSpinCAD.g:1642:1: ( ( rule__WriteRegisterLowshelf__Group__0 ) )
            {
            // InternalSpinCAD.g:1642:1: ( ( rule__WriteRegisterLowshelf__Group__0 ) )
            // InternalSpinCAD.g:1643:1: ( rule__WriteRegisterLowshelf__Group__0 )
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getGroup()); 
            // InternalSpinCAD.g:1644:1: ( rule__WriteRegisterLowshelf__Group__0 )
            // InternalSpinCAD.g:1644:2: rule__WriteRegisterLowshelf__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterLowshelfAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWriteRegisterLowshelf"


    // $ANTLR start "entryRuleWriteRegisterHighshelf"
    // InternalSpinCAD.g:1656:1: entryRuleWriteRegisterHighshelf : ruleWriteRegisterHighshelf EOF ;
    public final void entryRuleWriteRegisterHighshelf() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1657:1: ( ruleWriteRegisterHighshelf EOF )
            // InternalSpinCAD.g:1658:1: ruleWriteRegisterHighshelf EOF
            {
             before(grammarAccess.getWriteRegisterHighshelfRule()); 
            pushFollow(FOLLOW_1);
            ruleWriteRegisterHighshelf();

            state._fsp--;

             after(grammarAccess.getWriteRegisterHighshelfRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWriteRegisterHighshelf"


    // $ANTLR start "ruleWriteRegisterHighshelf"
    // InternalSpinCAD.g:1665:1: ruleWriteRegisterHighshelf : ( ( rule__WriteRegisterHighshelf__Group__0 ) ) ;
    public final void ruleWriteRegisterHighshelf() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1669:2: ( ( ( rule__WriteRegisterHighshelf__Group__0 ) ) )
            // InternalSpinCAD.g:1670:1: ( ( rule__WriteRegisterHighshelf__Group__0 ) )
            {
            // InternalSpinCAD.g:1670:1: ( ( rule__WriteRegisterHighshelf__Group__0 ) )
            // InternalSpinCAD.g:1671:1: ( rule__WriteRegisterHighshelf__Group__0 )
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getGroup()); 
            // InternalSpinCAD.g:1672:1: ( rule__WriteRegisterHighshelf__Group__0 )
            // InternalSpinCAD.g:1672:2: rule__WriteRegisterHighshelf__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterHighshelfAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWriteRegisterHighshelf"


    // $ANTLR start "entryRuleWriteRegister"
    // InternalSpinCAD.g:1684:1: entryRuleWriteRegister : ruleWriteRegister EOF ;
    public final void entryRuleWriteRegister() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1685:1: ( ruleWriteRegister EOF )
            // InternalSpinCAD.g:1686:1: ruleWriteRegister EOF
            {
             before(grammarAccess.getWriteRegisterRule()); 
            pushFollow(FOLLOW_1);
            ruleWriteRegister();

            state._fsp--;

             after(grammarAccess.getWriteRegisterRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWriteRegister"


    // $ANTLR start "ruleWriteRegister"
    // InternalSpinCAD.g:1693:1: ruleWriteRegister : ( ( rule__WriteRegister__Group__0 ) ) ;
    public final void ruleWriteRegister() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1697:2: ( ( ( rule__WriteRegister__Group__0 ) ) )
            // InternalSpinCAD.g:1698:1: ( ( rule__WriteRegister__Group__0 ) )
            {
            // InternalSpinCAD.g:1698:1: ( ( rule__WriteRegister__Group__0 ) )
            // InternalSpinCAD.g:1699:1: ( rule__WriteRegister__Group__0 )
            {
             before(grammarAccess.getWriteRegisterAccess().getGroup()); 
            // InternalSpinCAD.g:1700:1: ( rule__WriteRegister__Group__0 )
            // InternalSpinCAD.g:1700:2: rule__WriteRegister__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegister__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWriteRegister"


    // $ANTLR start "entryRuleMaxx"
    // InternalSpinCAD.g:1712:1: entryRuleMaxx : ruleMaxx EOF ;
    public final void entryRuleMaxx() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1713:1: ( ruleMaxx EOF )
            // InternalSpinCAD.g:1714:1: ruleMaxx EOF
            {
             before(grammarAccess.getMaxxRule()); 
            pushFollow(FOLLOW_1);
            ruleMaxx();

            state._fsp--;

             after(grammarAccess.getMaxxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMaxx"


    // $ANTLR start "ruleMaxx"
    // InternalSpinCAD.g:1721:1: ruleMaxx : ( ( rule__Maxx__Group__0 ) ) ;
    public final void ruleMaxx() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1725:2: ( ( ( rule__Maxx__Group__0 ) ) )
            // InternalSpinCAD.g:1726:1: ( ( rule__Maxx__Group__0 ) )
            {
            // InternalSpinCAD.g:1726:1: ( ( rule__Maxx__Group__0 ) )
            // InternalSpinCAD.g:1727:1: ( rule__Maxx__Group__0 )
            {
             before(grammarAccess.getMaxxAccess().getGroup()); 
            // InternalSpinCAD.g:1728:1: ( rule__Maxx__Group__0 )
            // InternalSpinCAD.g:1728:2: rule__Maxx__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Maxx__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getMaxxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMaxx"


    // $ANTLR start "entryRuleReadRegisterFilter"
    // InternalSpinCAD.g:1740:1: entryRuleReadRegisterFilter : ruleReadRegisterFilter EOF ;
    public final void entryRuleReadRegisterFilter() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1741:1: ( ruleReadRegisterFilter EOF )
            // InternalSpinCAD.g:1742:1: ruleReadRegisterFilter EOF
            {
             before(grammarAccess.getReadRegisterFilterRule()); 
            pushFollow(FOLLOW_1);
            ruleReadRegisterFilter();

            state._fsp--;

             after(grammarAccess.getReadRegisterFilterRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadRegisterFilter"


    // $ANTLR start "ruleReadRegisterFilter"
    // InternalSpinCAD.g:1749:1: ruleReadRegisterFilter : ( ( rule__ReadRegisterFilter__Group__0 ) ) ;
    public final void ruleReadRegisterFilter() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1753:2: ( ( ( rule__ReadRegisterFilter__Group__0 ) ) )
            // InternalSpinCAD.g:1754:1: ( ( rule__ReadRegisterFilter__Group__0 ) )
            {
            // InternalSpinCAD.g:1754:1: ( ( rule__ReadRegisterFilter__Group__0 ) )
            // InternalSpinCAD.g:1755:1: ( rule__ReadRegisterFilter__Group__0 )
            {
             before(grammarAccess.getReadRegisterFilterAccess().getGroup()); 
            // InternalSpinCAD.g:1756:1: ( rule__ReadRegisterFilter__Group__0 )
            // InternalSpinCAD.g:1756:2: rule__ReadRegisterFilter__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterFilterAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadRegisterFilter"


    // $ANTLR start "entryRuleMulx"
    // InternalSpinCAD.g:1768:1: entryRuleMulx : ruleMulx EOF ;
    public final void entryRuleMulx() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1769:1: ( ruleMulx EOF )
            // InternalSpinCAD.g:1770:1: ruleMulx EOF
            {
             before(grammarAccess.getMulxRule()); 
            pushFollow(FOLLOW_1);
            ruleMulx();

            state._fsp--;

             after(grammarAccess.getMulxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMulx"


    // $ANTLR start "ruleMulx"
    // InternalSpinCAD.g:1777:1: ruleMulx : ( ( rule__Mulx__Group__0 ) ) ;
    public final void ruleMulx() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1781:2: ( ( ( rule__Mulx__Group__0 ) ) )
            // InternalSpinCAD.g:1782:1: ( ( rule__Mulx__Group__0 ) )
            {
            // InternalSpinCAD.g:1782:1: ( ( rule__Mulx__Group__0 ) )
            // InternalSpinCAD.g:1783:1: ( rule__Mulx__Group__0 )
            {
             before(grammarAccess.getMulxAccess().getGroup()); 
            // InternalSpinCAD.g:1784:1: ( rule__Mulx__Group__0 )
            // InternalSpinCAD.g:1784:2: rule__Mulx__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Mulx__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getMulxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMulx"


    // $ANTLR start "entryRuleLdax"
    // InternalSpinCAD.g:1796:1: entryRuleLdax : ruleLdax EOF ;
    public final void entryRuleLdax() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1797:1: ( ruleLdax EOF )
            // InternalSpinCAD.g:1798:1: ruleLdax EOF
            {
             before(grammarAccess.getLdaxRule()); 
            pushFollow(FOLLOW_1);
            ruleLdax();

            state._fsp--;

             after(grammarAccess.getLdaxRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLdax"


    // $ANTLR start "ruleLdax"
    // InternalSpinCAD.g:1805:1: ruleLdax : ( ( rule__Ldax__Group__0 ) ) ;
    public final void ruleLdax() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1809:2: ( ( ( rule__Ldax__Group__0 ) ) )
            // InternalSpinCAD.g:1810:1: ( ( rule__Ldax__Group__0 ) )
            {
            // InternalSpinCAD.g:1810:1: ( ( rule__Ldax__Group__0 ) )
            // InternalSpinCAD.g:1811:1: ( rule__Ldax__Group__0 )
            {
             before(grammarAccess.getLdaxAccess().getGroup()); 
            // InternalSpinCAD.g:1812:1: ( rule__Ldax__Group__0 )
            // InternalSpinCAD.g:1812:2: rule__Ldax__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Ldax__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLdaxAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLdax"


    // $ANTLR start "entryRuleExp"
    // InternalSpinCAD.g:1824:1: entryRuleExp : ruleExp EOF ;
    public final void entryRuleExp() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1825:1: ( ruleExp EOF )
            // InternalSpinCAD.g:1826:1: ruleExp EOF
            {
             before(grammarAccess.getExpRule()); 
            pushFollow(FOLLOW_1);
            ruleExp();

            state._fsp--;

             after(grammarAccess.getExpRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExp"


    // $ANTLR start "ruleExp"
    // InternalSpinCAD.g:1833:1: ruleExp : ( ( rule__Exp__Group__0 ) ) ;
    public final void ruleExp() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1837:2: ( ( ( rule__Exp__Group__0 ) ) )
            // InternalSpinCAD.g:1838:1: ( ( rule__Exp__Group__0 ) )
            {
            // InternalSpinCAD.g:1838:1: ( ( rule__Exp__Group__0 ) )
            // InternalSpinCAD.g:1839:1: ( rule__Exp__Group__0 )
            {
             before(grammarAccess.getExpAccess().getGroup()); 
            // InternalSpinCAD.g:1840:1: ( rule__Exp__Group__0 )
            // InternalSpinCAD.g:1840:2: rule__Exp__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Exp__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getExpAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExp"


    // $ANTLR start "entryRuleLog"
    // InternalSpinCAD.g:1852:1: entryRuleLog : ruleLog EOF ;
    public final void entryRuleLog() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1853:1: ( ruleLog EOF )
            // InternalSpinCAD.g:1854:1: ruleLog EOF
            {
             before(grammarAccess.getLogRule()); 
            pushFollow(FOLLOW_1);
            ruleLog();

            state._fsp--;

             after(grammarAccess.getLogRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLog"


    // $ANTLR start "ruleLog"
    // InternalSpinCAD.g:1861:1: ruleLog : ( ( rule__Log__Group__0 ) ) ;
    public final void ruleLog() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1865:2: ( ( ( rule__Log__Group__0 ) ) )
            // InternalSpinCAD.g:1866:1: ( ( rule__Log__Group__0 ) )
            {
            // InternalSpinCAD.g:1866:1: ( ( rule__Log__Group__0 ) )
            // InternalSpinCAD.g:1867:1: ( rule__Log__Group__0 )
            {
             before(grammarAccess.getLogAccess().getGroup()); 
            // InternalSpinCAD.g:1868:1: ( rule__Log__Group__0 )
            // InternalSpinCAD.g:1868:2: rule__Log__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Log__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLogAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLog"


    // $ANTLR start "entryRuleScaleOffset"
    // InternalSpinCAD.g:1880:1: entryRuleScaleOffset : ruleScaleOffset EOF ;
    public final void entryRuleScaleOffset() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1881:1: ( ruleScaleOffset EOF )
            // InternalSpinCAD.g:1882:1: ruleScaleOffset EOF
            {
             before(grammarAccess.getScaleOffsetRule()); 
            pushFollow(FOLLOW_1);
            ruleScaleOffset();

            state._fsp--;

             after(grammarAccess.getScaleOffsetRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleScaleOffset"


    // $ANTLR start "ruleScaleOffset"
    // InternalSpinCAD.g:1889:1: ruleScaleOffset : ( ( rule__ScaleOffset__Group__0 ) ) ;
    public final void ruleScaleOffset() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1893:2: ( ( ( rule__ScaleOffset__Group__0 ) ) )
            // InternalSpinCAD.g:1894:1: ( ( rule__ScaleOffset__Group__0 ) )
            {
            // InternalSpinCAD.g:1894:1: ( ( rule__ScaleOffset__Group__0 ) )
            // InternalSpinCAD.g:1895:1: ( rule__ScaleOffset__Group__0 )
            {
             before(grammarAccess.getScaleOffsetAccess().getGroup()); 
            // InternalSpinCAD.g:1896:1: ( rule__ScaleOffset__Group__0 )
            // InternalSpinCAD.g:1896:2: rule__ScaleOffset__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getScaleOffsetAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleScaleOffset"


    // $ANTLR start "entryRuleWriteDelay"
    // InternalSpinCAD.g:1908:1: entryRuleWriteDelay : ruleWriteDelay EOF ;
    public final void entryRuleWriteDelay() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1909:1: ( ruleWriteDelay EOF )
            // InternalSpinCAD.g:1910:1: ruleWriteDelay EOF
            {
             before(grammarAccess.getWriteDelayRule()); 
            pushFollow(FOLLOW_1);
            ruleWriteDelay();

            state._fsp--;

             after(grammarAccess.getWriteDelayRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWriteDelay"


    // $ANTLR start "ruleWriteDelay"
    // InternalSpinCAD.g:1917:1: ruleWriteDelay : ( ( rule__WriteDelay__Group__0 ) ) ;
    public final void ruleWriteDelay() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1921:2: ( ( ( rule__WriteDelay__Group__0 ) ) )
            // InternalSpinCAD.g:1922:1: ( ( rule__WriteDelay__Group__0 ) )
            {
            // InternalSpinCAD.g:1922:1: ( ( rule__WriteDelay__Group__0 ) )
            // InternalSpinCAD.g:1923:1: ( rule__WriteDelay__Group__0 )
            {
             before(grammarAccess.getWriteDelayAccess().getGroup()); 
            // InternalSpinCAD.g:1924:1: ( rule__WriteDelay__Group__0 )
            // InternalSpinCAD.g:1924:2: rule__WriteDelay__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__WriteDelay__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getWriteDelayAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWriteDelay"


    // $ANTLR start "entryRuleWriteAllpass"
    // InternalSpinCAD.g:1936:1: entryRuleWriteAllpass : ruleWriteAllpass EOF ;
    public final void entryRuleWriteAllpass() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1937:1: ( ruleWriteAllpass EOF )
            // InternalSpinCAD.g:1938:1: ruleWriteAllpass EOF
            {
             before(grammarAccess.getWriteAllpassRule()); 
            pushFollow(FOLLOW_1);
            ruleWriteAllpass();

            state._fsp--;

             after(grammarAccess.getWriteAllpassRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWriteAllpass"


    // $ANTLR start "ruleWriteAllpass"
    // InternalSpinCAD.g:1945:1: ruleWriteAllpass : ( ( rule__WriteAllpass__Group__0 ) ) ;
    public final void ruleWriteAllpass() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1949:2: ( ( ( rule__WriteAllpass__Group__0 ) ) )
            // InternalSpinCAD.g:1950:1: ( ( rule__WriteAllpass__Group__0 ) )
            {
            // InternalSpinCAD.g:1950:1: ( ( rule__WriteAllpass__Group__0 ) )
            // InternalSpinCAD.g:1951:1: ( rule__WriteAllpass__Group__0 )
            {
             before(grammarAccess.getWriteAllpassAccess().getGroup()); 
            // InternalSpinCAD.g:1952:1: ( rule__WriteAllpass__Group__0 )
            // InternalSpinCAD.g:1952:2: rule__WriteAllpass__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getWriteAllpassAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWriteAllpass"


    // $ANTLR start "entryRuleReadDelay"
    // InternalSpinCAD.g:1964:1: entryRuleReadDelay : ruleReadDelay EOF ;
    public final void entryRuleReadDelay() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1965:1: ( ruleReadDelay EOF )
            // InternalSpinCAD.g:1966:1: ruleReadDelay EOF
            {
             before(grammarAccess.getReadDelayRule()); 
            pushFollow(FOLLOW_1);
            ruleReadDelay();

            state._fsp--;

             after(grammarAccess.getReadDelayRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadDelay"


    // $ANTLR start "ruleReadDelay"
    // InternalSpinCAD.g:1973:1: ruleReadDelay : ( ( rule__ReadDelay__Group__0 ) ) ;
    public final void ruleReadDelay() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:1977:2: ( ( ( rule__ReadDelay__Group__0 ) ) )
            // InternalSpinCAD.g:1978:1: ( ( rule__ReadDelay__Group__0 ) )
            {
            // InternalSpinCAD.g:1978:1: ( ( rule__ReadDelay__Group__0 ) )
            // InternalSpinCAD.g:1979:1: ( rule__ReadDelay__Group__0 )
            {
             before(grammarAccess.getReadDelayAccess().getGroup()); 
            // InternalSpinCAD.g:1980:1: ( rule__ReadDelay__Group__0 )
            // InternalSpinCAD.g:1980:2: rule__ReadDelay__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelay__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getReadDelayAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadDelay"


    // $ANTLR start "entryRuleLoadSinLFO"
    // InternalSpinCAD.g:1992:1: entryRuleLoadSinLFO : ruleLoadSinLFO EOF ;
    public final void entryRuleLoadSinLFO() throws RecognitionException {
        try {
            // InternalSpinCAD.g:1993:1: ( ruleLoadSinLFO EOF )
            // InternalSpinCAD.g:1994:1: ruleLoadSinLFO EOF
            {
             before(grammarAccess.getLoadSinLFORule()); 
            pushFollow(FOLLOW_1);
            ruleLoadSinLFO();

            state._fsp--;

             after(grammarAccess.getLoadSinLFORule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadSinLFO"


    // $ANTLR start "ruleLoadSinLFO"
    // InternalSpinCAD.g:2001:1: ruleLoadSinLFO : ( ( rule__LoadSinLFO__Group__0 ) ) ;
    public final void ruleLoadSinLFO() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2005:2: ( ( ( rule__LoadSinLFO__Group__0 ) ) )
            // InternalSpinCAD.g:2006:1: ( ( rule__LoadSinLFO__Group__0 ) )
            {
            // InternalSpinCAD.g:2006:1: ( ( rule__LoadSinLFO__Group__0 ) )
            // InternalSpinCAD.g:2007:1: ( rule__LoadSinLFO__Group__0 )
            {
             before(grammarAccess.getLoadSinLFOAccess().getGroup()); 
            // InternalSpinCAD.g:2008:1: ( rule__LoadSinLFO__Group__0 )
            // InternalSpinCAD.g:2008:2: rule__LoadSinLFO__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLoadSinLFOAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadSinLFO"


    // $ANTLR start "entryRuleLoadRampLFO"
    // InternalSpinCAD.g:2020:1: entryRuleLoadRampLFO : ruleLoadRampLFO EOF ;
    public final void entryRuleLoadRampLFO() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2021:1: ( ruleLoadRampLFO EOF )
            // InternalSpinCAD.g:2022:1: ruleLoadRampLFO EOF
            {
             before(grammarAccess.getLoadRampLFORule()); 
            pushFollow(FOLLOW_1);
            ruleLoadRampLFO();

            state._fsp--;

             after(grammarAccess.getLoadRampLFORule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadRampLFO"


    // $ANTLR start "ruleLoadRampLFO"
    // InternalSpinCAD.g:2029:1: ruleLoadRampLFO : ( ( rule__LoadRampLFO__Group__0 ) ) ;
    public final void ruleLoadRampLFO() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2033:2: ( ( ( rule__LoadRampLFO__Group__0 ) ) )
            // InternalSpinCAD.g:2034:1: ( ( rule__LoadRampLFO__Group__0 ) )
            {
            // InternalSpinCAD.g:2034:1: ( ( rule__LoadRampLFO__Group__0 ) )
            // InternalSpinCAD.g:2035:1: ( rule__LoadRampLFO__Group__0 )
            {
             before(grammarAccess.getLoadRampLFOAccess().getGroup()); 
            // InternalSpinCAD.g:2036:1: ( rule__LoadRampLFO__Group__0 )
            // InternalSpinCAD.g:2036:2: rule__LoadRampLFO__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getLoadRampLFOAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadRampLFO"


    // $ANTLR start "entryRuleChorusReadDelay"
    // InternalSpinCAD.g:2048:1: entryRuleChorusReadDelay : ruleChorusReadDelay EOF ;
    public final void entryRuleChorusReadDelay() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2049:1: ( ruleChorusReadDelay EOF )
            // InternalSpinCAD.g:2050:1: ruleChorusReadDelay EOF
            {
             before(grammarAccess.getChorusReadDelayRule()); 
            pushFollow(FOLLOW_1);
            ruleChorusReadDelay();

            state._fsp--;

             after(grammarAccess.getChorusReadDelayRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleChorusReadDelay"


    // $ANTLR start "ruleChorusReadDelay"
    // InternalSpinCAD.g:2057:1: ruleChorusReadDelay : ( ( rule__ChorusReadDelay__Group__0 ) ) ;
    public final void ruleChorusReadDelay() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2061:2: ( ( ( rule__ChorusReadDelay__Group__0 ) ) )
            // InternalSpinCAD.g:2062:1: ( ( rule__ChorusReadDelay__Group__0 ) )
            {
            // InternalSpinCAD.g:2062:1: ( ( rule__ChorusReadDelay__Group__0 ) )
            // InternalSpinCAD.g:2063:1: ( rule__ChorusReadDelay__Group__0 )
            {
             before(grammarAccess.getChorusReadDelayAccess().getGroup()); 
            // InternalSpinCAD.g:2064:1: ( rule__ChorusReadDelay__Group__0 )
            // InternalSpinCAD.g:2064:2: rule__ChorusReadDelay__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadDelayAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleChorusReadDelay"


    // $ANTLR start "entryRuleChorusReadValue"
    // InternalSpinCAD.g:2076:1: entryRuleChorusReadValue : ruleChorusReadValue EOF ;
    public final void entryRuleChorusReadValue() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2077:1: ( ruleChorusReadValue EOF )
            // InternalSpinCAD.g:2078:1: ruleChorusReadValue EOF
            {
             before(grammarAccess.getChorusReadValueRule()); 
            pushFollow(FOLLOW_1);
            ruleChorusReadValue();

            state._fsp--;

             after(grammarAccess.getChorusReadValueRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleChorusReadValue"


    // $ANTLR start "ruleChorusReadValue"
    // InternalSpinCAD.g:2085:1: ruleChorusReadValue : ( ( rule__ChorusReadValue__Group__0 ) ) ;
    public final void ruleChorusReadValue() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2089:2: ( ( ( rule__ChorusReadValue__Group__0 ) ) )
            // InternalSpinCAD.g:2090:1: ( ( rule__ChorusReadValue__Group__0 ) )
            {
            // InternalSpinCAD.g:2090:1: ( ( rule__ChorusReadValue__Group__0 ) )
            // InternalSpinCAD.g:2091:1: ( rule__ChorusReadValue__Group__0 )
            {
             before(grammarAccess.getChorusReadValueAccess().getGroup()); 
            // InternalSpinCAD.g:2092:1: ( rule__ChorusReadValue__Group__0 )
            // InternalSpinCAD.g:2092:2: rule__ChorusReadValue__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadValue__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadValueAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleChorusReadValue"


    // $ANTLR start "entryRuleChorusScaleOffset"
    // InternalSpinCAD.g:2104:1: entryRuleChorusScaleOffset : ruleChorusScaleOffset EOF ;
    public final void entryRuleChorusScaleOffset() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2105:1: ( ruleChorusScaleOffset EOF )
            // InternalSpinCAD.g:2106:1: ruleChorusScaleOffset EOF
            {
             before(grammarAccess.getChorusScaleOffsetRule()); 
            pushFollow(FOLLOW_1);
            ruleChorusScaleOffset();

            state._fsp--;

             after(grammarAccess.getChorusScaleOffsetRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleChorusScaleOffset"


    // $ANTLR start "ruleChorusScaleOffset"
    // InternalSpinCAD.g:2113:1: ruleChorusScaleOffset : ( ( rule__ChorusScaleOffset__Group__0 ) ) ;
    public final void ruleChorusScaleOffset() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2117:2: ( ( ( rule__ChorusScaleOffset__Group__0 ) ) )
            // InternalSpinCAD.g:2118:1: ( ( rule__ChorusScaleOffset__Group__0 ) )
            {
            // InternalSpinCAD.g:2118:1: ( ( rule__ChorusScaleOffset__Group__0 ) )
            // InternalSpinCAD.g:2119:1: ( rule__ChorusScaleOffset__Group__0 )
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getGroup()); 
            // InternalSpinCAD.g:2120:1: ( rule__ChorusScaleOffset__Group__0 )
            // InternalSpinCAD.g:2120:2: rule__ChorusScaleOffset__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getChorusScaleOffsetAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleChorusScaleOffset"


    // $ANTLR start "entryRuleReadDelayPointer"
    // InternalSpinCAD.g:2132:1: entryRuleReadDelayPointer : ruleReadDelayPointer EOF ;
    public final void entryRuleReadDelayPointer() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2133:1: ( ruleReadDelayPointer EOF )
            // InternalSpinCAD.g:2134:1: ruleReadDelayPointer EOF
            {
             before(grammarAccess.getReadDelayPointerRule()); 
            pushFollow(FOLLOW_1);
            ruleReadDelayPointer();

            state._fsp--;

             after(grammarAccess.getReadDelayPointerRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadDelayPointer"


    // $ANTLR start "ruleReadDelayPointer"
    // InternalSpinCAD.g:2141:1: ruleReadDelayPointer : ( ( rule__ReadDelayPointer__Group__0 ) ) ;
    public final void ruleReadDelayPointer() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2145:2: ( ( ( rule__ReadDelayPointer__Group__0 ) ) )
            // InternalSpinCAD.g:2146:1: ( ( rule__ReadDelayPointer__Group__0 ) )
            {
            // InternalSpinCAD.g:2146:1: ( ( rule__ReadDelayPointer__Group__0 ) )
            // InternalSpinCAD.g:2147:1: ( rule__ReadDelayPointer__Group__0 )
            {
             before(grammarAccess.getReadDelayPointerAccess().getGroup()); 
            // InternalSpinCAD.g:2148:1: ( rule__ReadDelayPointer__Group__0 )
            // InternalSpinCAD.g:2148:2: rule__ReadDelayPointer__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelayPointer__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getReadDelayPointerAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadDelayPointer"


    // $ANTLR start "entryRuleAnd"
    // InternalSpinCAD.g:2160:1: entryRuleAnd : ruleAnd EOF ;
    public final void entryRuleAnd() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2161:1: ( ruleAnd EOF )
            // InternalSpinCAD.g:2162:1: ruleAnd EOF
            {
             before(grammarAccess.getAndRule()); 
            pushFollow(FOLLOW_1);
            ruleAnd();

            state._fsp--;

             after(grammarAccess.getAndRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAnd"


    // $ANTLR start "ruleAnd"
    // InternalSpinCAD.g:2169:1: ruleAnd : ( ( rule__And__Group__0 ) ) ;
    public final void ruleAnd() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2173:2: ( ( ( rule__And__Group__0 ) ) )
            // InternalSpinCAD.g:2174:1: ( ( rule__And__Group__0 ) )
            {
            // InternalSpinCAD.g:2174:1: ( ( rule__And__Group__0 ) )
            // InternalSpinCAD.g:2175:1: ( rule__And__Group__0 )
            {
             before(grammarAccess.getAndAccess().getGroup()); 
            // InternalSpinCAD.g:2176:1: ( rule__And__Group__0 )
            // InternalSpinCAD.g:2176:2: rule__And__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__And__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getAndAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAnd"


    // $ANTLR start "entryRuleOr"
    // InternalSpinCAD.g:2188:1: entryRuleOr : ruleOr EOF ;
    public final void entryRuleOr() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2189:1: ( ruleOr EOF )
            // InternalSpinCAD.g:2190:1: ruleOr EOF
            {
             before(grammarAccess.getOrRule()); 
            pushFollow(FOLLOW_1);
            ruleOr();

            state._fsp--;

             after(grammarAccess.getOrRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOr"


    // $ANTLR start "ruleOr"
    // InternalSpinCAD.g:2197:1: ruleOr : ( ( rule__Or__Group__0 ) ) ;
    public final void ruleOr() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2201:2: ( ( ( rule__Or__Group__0 ) ) )
            // InternalSpinCAD.g:2202:1: ( ( rule__Or__Group__0 ) )
            {
            // InternalSpinCAD.g:2202:1: ( ( rule__Or__Group__0 ) )
            // InternalSpinCAD.g:2203:1: ( rule__Or__Group__0 )
            {
             before(grammarAccess.getOrAccess().getGroup()); 
            // InternalSpinCAD.g:2204:1: ( rule__Or__Group__0 )
            // InternalSpinCAD.g:2204:2: rule__Or__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Or__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getOrAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOr"


    // $ANTLR start "entryRuleXor"
    // InternalSpinCAD.g:2216:1: entryRuleXor : ruleXor EOF ;
    public final void entryRuleXor() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2217:1: ( ruleXor EOF )
            // InternalSpinCAD.g:2218:1: ruleXor EOF
            {
             before(grammarAccess.getXorRule()); 
            pushFollow(FOLLOW_1);
            ruleXor();

            state._fsp--;

             after(grammarAccess.getXorRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleXor"


    // $ANTLR start "ruleXor"
    // InternalSpinCAD.g:2225:1: ruleXor : ( ( rule__Xor__Group__0 ) ) ;
    public final void ruleXor() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2229:2: ( ( ( rule__Xor__Group__0 ) ) )
            // InternalSpinCAD.g:2230:1: ( ( rule__Xor__Group__0 ) )
            {
            // InternalSpinCAD.g:2230:1: ( ( rule__Xor__Group__0 ) )
            // InternalSpinCAD.g:2231:1: ( rule__Xor__Group__0 )
            {
             before(grammarAccess.getXorAccess().getGroup()); 
            // InternalSpinCAD.g:2232:1: ( rule__Xor__Group__0 )
            // InternalSpinCAD.g:2232:2: rule__Xor__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Xor__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getXorAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleXor"


    // $ANTLR start "entryRuleJam"
    // InternalSpinCAD.g:2244:1: entryRuleJam : ruleJam EOF ;
    public final void entryRuleJam() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2245:1: ( ruleJam EOF )
            // InternalSpinCAD.g:2246:1: ruleJam EOF
            {
             before(grammarAccess.getJamRule()); 
            pushFollow(FOLLOW_1);
            ruleJam();

            state._fsp--;

             after(grammarAccess.getJamRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleJam"


    // $ANTLR start "ruleJam"
    // InternalSpinCAD.g:2253:1: ruleJam : ( ( rule__Jam__Group__0 ) ) ;
    public final void ruleJam() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2257:2: ( ( ( rule__Jam__Group__0 ) ) )
            // InternalSpinCAD.g:2258:1: ( ( rule__Jam__Group__0 ) )
            {
            // InternalSpinCAD.g:2258:1: ( ( rule__Jam__Group__0 ) )
            // InternalSpinCAD.g:2259:1: ( rule__Jam__Group__0 )
            {
             before(grammarAccess.getJamAccess().getGroup()); 
            // InternalSpinCAD.g:2260:1: ( rule__Jam__Group__0 )
            // InternalSpinCAD.g:2260:2: rule__Jam__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Jam__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getJamAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleJam"


    // $ANTLR start "entryRuleClr"
    // InternalSpinCAD.g:2272:1: entryRuleClr : ruleClr EOF ;
    public final void entryRuleClr() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2273:1: ( ruleClr EOF )
            // InternalSpinCAD.g:2274:1: ruleClr EOF
            {
             before(grammarAccess.getClrRule()); 
            pushFollow(FOLLOW_1);
            ruleClr();

            state._fsp--;

             after(grammarAccess.getClrRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleClr"


    // $ANTLR start "ruleClr"
    // InternalSpinCAD.g:2281:1: ruleClr : ( ( rule__Clr__Group__0 ) ) ;
    public final void ruleClr() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2285:2: ( ( ( rule__Clr__Group__0 ) ) )
            // InternalSpinCAD.g:2286:1: ( ( rule__Clr__Group__0 ) )
            {
            // InternalSpinCAD.g:2286:1: ( ( rule__Clr__Group__0 ) )
            // InternalSpinCAD.g:2287:1: ( rule__Clr__Group__0 )
            {
             before(grammarAccess.getClrAccess().getGroup()); 
            // InternalSpinCAD.g:2288:1: ( rule__Clr__Group__0 )
            // InternalSpinCAD.g:2288:2: rule__Clr__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Clr__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getClrAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleClr"


    // $ANTLR start "entryRuleNot"
    // InternalSpinCAD.g:2300:1: entryRuleNot : ruleNot EOF ;
    public final void entryRuleNot() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2301:1: ( ruleNot EOF )
            // InternalSpinCAD.g:2302:1: ruleNot EOF
            {
             before(grammarAccess.getNotRule()); 
            pushFollow(FOLLOW_1);
            ruleNot();

            state._fsp--;

             after(grammarAccess.getNotRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNot"


    // $ANTLR start "ruleNot"
    // InternalSpinCAD.g:2309:1: ruleNot : ( ( rule__Not__Group__0 ) ) ;
    public final void ruleNot() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2313:2: ( ( ( rule__Not__Group__0 ) ) )
            // InternalSpinCAD.g:2314:1: ( ( rule__Not__Group__0 ) )
            {
            // InternalSpinCAD.g:2314:1: ( ( rule__Not__Group__0 ) )
            // InternalSpinCAD.g:2315:1: ( rule__Not__Group__0 )
            {
             before(grammarAccess.getNotAccess().getGroup()); 
            // InternalSpinCAD.g:2316:1: ( rule__Not__Group__0 )
            // InternalSpinCAD.g:2316:2: rule__Not__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Not__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getNotAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNot"


    // $ANTLR start "entryRuleAbsa"
    // InternalSpinCAD.g:2328:1: entryRuleAbsa : ruleAbsa EOF ;
    public final void entryRuleAbsa() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2329:1: ( ruleAbsa EOF )
            // InternalSpinCAD.g:2330:1: ruleAbsa EOF
            {
             before(grammarAccess.getAbsaRule()); 
            pushFollow(FOLLOW_1);
            ruleAbsa();

            state._fsp--;

             after(grammarAccess.getAbsaRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAbsa"


    // $ANTLR start "ruleAbsa"
    // InternalSpinCAD.g:2337:1: ruleAbsa : ( ( rule__Absa__Group__0 ) ) ;
    public final void ruleAbsa() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2341:2: ( ( ( rule__Absa__Group__0 ) ) )
            // InternalSpinCAD.g:2342:1: ( ( rule__Absa__Group__0 ) )
            {
            // InternalSpinCAD.g:2342:1: ( ( rule__Absa__Group__0 ) )
            // InternalSpinCAD.g:2343:1: ( rule__Absa__Group__0 )
            {
             before(grammarAccess.getAbsaAccess().getGroup()); 
            // InternalSpinCAD.g:2344:1: ( rule__Absa__Group__0 )
            // InternalSpinCAD.g:2344:2: rule__Absa__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Absa__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getAbsaAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAbsa"


    // $ANTLR start "entryRuleSkip"
    // InternalSpinCAD.g:2356:1: entryRuleSkip : ruleSkip EOF ;
    public final void entryRuleSkip() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2357:1: ( ruleSkip EOF )
            // InternalSpinCAD.g:2358:1: ruleSkip EOF
            {
             before(grammarAccess.getSkipRule()); 
            pushFollow(FOLLOW_1);
            ruleSkip();

            state._fsp--;

             after(grammarAccess.getSkipRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalSpinCAD.g:2365:1: ruleSkip : ( ( rule__Skip__Group__0 ) ) ;
    public final void ruleSkip() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2369:2: ( ( ( rule__Skip__Group__0 ) ) )
            // InternalSpinCAD.g:2370:1: ( ( rule__Skip__Group__0 ) )
            {
            // InternalSpinCAD.g:2370:1: ( ( rule__Skip__Group__0 ) )
            // InternalSpinCAD.g:2371:1: ( rule__Skip__Group__0 )
            {
             before(grammarAccess.getSkipAccess().getGroup()); 
            // InternalSpinCAD.g:2372:1: ( rule__Skip__Group__0 )
            // InternalSpinCAD.g:2372:2: rule__Skip__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSkipAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleSPINDOUBLE"
    // InternalSpinCAD.g:2384:1: entryRuleSPINDOUBLE : ruleSPINDOUBLE EOF ;
    public final void entryRuleSPINDOUBLE() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2385:1: ( ruleSPINDOUBLE EOF )
            // InternalSpinCAD.g:2386:1: ruleSPINDOUBLE EOF
            {
             before(grammarAccess.getSPINDOUBLERule()); 
            pushFollow(FOLLOW_1);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSPINDOUBLERule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSPINDOUBLE"


    // $ANTLR start "ruleSPINDOUBLE"
    // InternalSpinCAD.g:2393:1: ruleSPINDOUBLE : ( ( rule__SPINDOUBLE__Group__0 ) ) ;
    public final void ruleSPINDOUBLE() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2397:2: ( ( ( rule__SPINDOUBLE__Group__0 ) ) )
            // InternalSpinCAD.g:2398:1: ( ( rule__SPINDOUBLE__Group__0 ) )
            {
            // InternalSpinCAD.g:2398:1: ( ( rule__SPINDOUBLE__Group__0 ) )
            // InternalSpinCAD.g:2399:1: ( rule__SPINDOUBLE__Group__0 )
            {
             before(grammarAccess.getSPINDOUBLEAccess().getGroup()); 
            // InternalSpinCAD.g:2400:1: ( rule__SPINDOUBLE__Group__0 )
            // InternalSpinCAD.g:2400:2: rule__SPINDOUBLE__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSPINDOUBLEAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSPINDOUBLE"


    // $ANTLR start "entryRuleSPINREGISTER"
    // InternalSpinCAD.g:2412:1: entryRuleSPINREGISTER : ruleSPINREGISTER EOF ;
    public final void entryRuleSPINREGISTER() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2413:1: ( ruleSPINREGISTER EOF )
            // InternalSpinCAD.g:2414:1: ruleSPINREGISTER EOF
            {
             before(grammarAccess.getSPINREGISTERRule()); 
            pushFollow(FOLLOW_1);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getSPINREGISTERRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSPINREGISTER"


    // $ANTLR start "ruleSPINREGISTER"
    // InternalSpinCAD.g:2421:1: ruleSPINREGISTER : ( ( rule__SPINREGISTER__Group__0 ) ) ;
    public final void ruleSPINREGISTER() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2425:2: ( ( ( rule__SPINREGISTER__Group__0 ) ) )
            // InternalSpinCAD.g:2426:1: ( ( rule__SPINREGISTER__Group__0 ) )
            {
            // InternalSpinCAD.g:2426:1: ( ( rule__SPINREGISTER__Group__0 ) )
            // InternalSpinCAD.g:2427:1: ( rule__SPINREGISTER__Group__0 )
            {
             before(grammarAccess.getSPINREGISTERAccess().getGroup()); 
            // InternalSpinCAD.g:2428:1: ( rule__SPINREGISTER__Group__0 )
            // InternalSpinCAD.g:2428:2: rule__SPINREGISTER__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SPINREGISTER__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSPINREGISTERAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSPINREGISTER"


    // $ANTLR start "entryRuleSPINCHOREGFLAGS"
    // InternalSpinCAD.g:2440:1: entryRuleSPINCHOREGFLAGS : ruleSPINCHOREGFLAGS EOF ;
    public final void entryRuleSPINCHOREGFLAGS() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2441:1: ( ruleSPINCHOREGFLAGS EOF )
            // InternalSpinCAD.g:2442:1: ruleSPINCHOREGFLAGS EOF
            {
             before(grammarAccess.getSPINCHOREGFLAGSRule()); 
            pushFollow(FOLLOW_1);
            ruleSPINCHOREGFLAGS();

            state._fsp--;

             after(grammarAccess.getSPINCHOREGFLAGSRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSPINCHOREGFLAGS"


    // $ANTLR start "ruleSPINCHOREGFLAGS"
    // InternalSpinCAD.g:2449:1: ruleSPINCHOREGFLAGS : ( ( rule__SPINCHOREGFLAGS__Alternatives ) ) ;
    public final void ruleSPINCHOREGFLAGS() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2453:2: ( ( ( rule__SPINCHOREGFLAGS__Alternatives ) ) )
            // InternalSpinCAD.g:2454:1: ( ( rule__SPINCHOREGFLAGS__Alternatives ) )
            {
            // InternalSpinCAD.g:2454:1: ( ( rule__SPINCHOREGFLAGS__Alternatives ) )
            // InternalSpinCAD.g:2455:1: ( rule__SPINCHOREGFLAGS__Alternatives )
            {
             before(grammarAccess.getSPINCHOREGFLAGSAccess().getAlternatives()); 
            // InternalSpinCAD.g:2456:1: ( rule__SPINCHOREGFLAGS__Alternatives )
            // InternalSpinCAD.g:2456:2: rule__SPINCHOREGFLAGS__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SPINCHOREGFLAGS__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getSPINCHOREGFLAGSAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSPINCHOREGFLAGS"


    // $ANTLR start "entryRuleSPINMEM"
    // InternalSpinCAD.g:2468:1: entryRuleSPINMEM : ruleSPINMEM EOF ;
    public final void entryRuleSPINMEM() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2469:1: ( ruleSPINMEM EOF )
            // InternalSpinCAD.g:2470:1: ruleSPINMEM EOF
            {
             before(grammarAccess.getSPINMEMRule()); 
            pushFollow(FOLLOW_1);
            ruleSPINMEM();

            state._fsp--;

             after(grammarAccess.getSPINMEMRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSPINMEM"


    // $ANTLR start "ruleSPINMEM"
    // InternalSpinCAD.g:2477:1: ruleSPINMEM : ( ( rule__SPINMEM__Group__0 ) ) ;
    public final void ruleSPINMEM() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2481:2: ( ( ( rule__SPINMEM__Group__0 ) ) )
            // InternalSpinCAD.g:2482:1: ( ( rule__SPINMEM__Group__0 ) )
            {
            // InternalSpinCAD.g:2482:1: ( ( rule__SPINMEM__Group__0 ) )
            // InternalSpinCAD.g:2483:1: ( rule__SPINMEM__Group__0 )
            {
             before(grammarAccess.getSPINMEMAccess().getGroup()); 
            // InternalSpinCAD.g:2484:1: ( rule__SPINMEM__Group__0 )
            // InternalSpinCAD.g:2484:2: rule__SPINMEM__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSPINMEMAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSPINMEM"


    // $ANTLR start "entryRuleSPINBUF"
    // InternalSpinCAD.g:2496:1: entryRuleSPINBUF : ruleSPINBUF EOF ;
    public final void entryRuleSPINBUF() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2497:1: ( ruleSPINBUF EOF )
            // InternalSpinCAD.g:2498:1: ruleSPINBUF EOF
            {
             before(grammarAccess.getSPINBUFRule()); 
            pushFollow(FOLLOW_1);
            ruleSPINBUF();

            state._fsp--;

             after(grammarAccess.getSPINBUFRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSPINBUF"


    // $ANTLR start "ruleSPINBUF"
    // InternalSpinCAD.g:2505:1: ruleSPINBUF : ( ( rule__SPINBUF__Group__0 ) ) ;
    public final void ruleSPINBUF() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2509:2: ( ( ( rule__SPINBUF__Group__0 ) ) )
            // InternalSpinCAD.g:2510:1: ( ( rule__SPINBUF__Group__0 ) )
            {
            // InternalSpinCAD.g:2510:1: ( ( rule__SPINBUF__Group__0 ) )
            // InternalSpinCAD.g:2511:1: ( rule__SPINBUF__Group__0 )
            {
             before(grammarAccess.getSPINBUFAccess().getGroup()); 
            // InternalSpinCAD.g:2512:1: ( rule__SPINBUF__Group__0 )
            // InternalSpinCAD.g:2512:2: rule__SPINBUF__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SPINBUF__Group__0();

            state._fsp--;


            }

             after(grammarAccess.getSPINBUFAccess().getGroup()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSPINBUF"


    // $ANTLR start "entryRuleBINARY24"
    // InternalSpinCAD.g:2524:1: entryRuleBINARY24 : ruleBINARY24 EOF ;
    public final void entryRuleBINARY24() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2525:1: ( ruleBINARY24 EOF )
            // InternalSpinCAD.g:2526:1: ruleBINARY24 EOF
            {
             before(grammarAccess.getBINARY24Rule()); 
            pushFollow(FOLLOW_1);
            ruleBINARY24();

            state._fsp--;

             after(grammarAccess.getBINARY24Rule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBINARY24"


    // $ANTLR start "ruleBINARY24"
    // InternalSpinCAD.g:2533:1: ruleBINARY24 : ( ( rule__BINARY24__Alternatives ) ) ;
    public final void ruleBINARY24() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2537:2: ( ( ( rule__BINARY24__Alternatives ) ) )
            // InternalSpinCAD.g:2538:1: ( ( rule__BINARY24__Alternatives ) )
            {
            // InternalSpinCAD.g:2538:1: ( ( rule__BINARY24__Alternatives ) )
            // InternalSpinCAD.g:2539:1: ( rule__BINARY24__Alternatives )
            {
             before(grammarAccess.getBINARY24Access().getAlternatives()); 
            // InternalSpinCAD.g:2540:1: ( rule__BINARY24__Alternatives )
            // InternalSpinCAD.g:2540:2: rule__BINARY24__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__BINARY24__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getBINARY24Access().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBINARY24"


    // $ANTLR start "entryRuleBOOLEAN"
    // InternalSpinCAD.g:2552:1: entryRuleBOOLEAN : ruleBOOLEAN EOF ;
    public final void entryRuleBOOLEAN() throws RecognitionException {
        try {
            // InternalSpinCAD.g:2553:1: ( ruleBOOLEAN EOF )
            // InternalSpinCAD.g:2554:1: ruleBOOLEAN EOF
            {
             before(grammarAccess.getBOOLEANRule()); 
            pushFollow(FOLLOW_1);
            ruleBOOLEAN();

            state._fsp--;

             after(grammarAccess.getBOOLEANRule()); 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBOOLEAN"


    // $ANTLR start "ruleBOOLEAN"
    // InternalSpinCAD.g:2561:1: ruleBOOLEAN : ( ( rule__BOOLEAN__Alternatives ) ) ;
    public final void ruleBOOLEAN() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2565:2: ( ( ( rule__BOOLEAN__Alternatives ) ) )
            // InternalSpinCAD.g:2566:1: ( ( rule__BOOLEAN__Alternatives ) )
            {
            // InternalSpinCAD.g:2566:1: ( ( rule__BOOLEAN__Alternatives ) )
            // InternalSpinCAD.g:2567:1: ( rule__BOOLEAN__Alternatives )
            {
             before(grammarAccess.getBOOLEANAccess().getAlternatives()); 
            // InternalSpinCAD.g:2568:1: ( rule__BOOLEAN__Alternatives )
            // InternalSpinCAD.g:2568:2: rule__BOOLEAN__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__BOOLEAN__Alternatives();

            state._fsp--;


            }

             after(grammarAccess.getBOOLEANAccess().getAlternatives()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBOOLEAN"


    // $ANTLR start "rule__Program__NameAlternatives_1_0"
    // InternalSpinCAD.g:2580:1: rule__Program__NameAlternatives_1_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__Program__NameAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2584:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==RULE_ID) ) {
                alt1=1;
            }
            else if ( (LA1_0==RULE_STRING) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // InternalSpinCAD.g:2585:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2585:1: ( RULE_ID )
                    // InternalSpinCAD.g:2586:1: RULE_ID
                    {
                     before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2591:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2591:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2592:1: RULE_STRING
                    {
                     before(grammarAccess.getProgramAccess().getNameSTRINGTerminalRuleCall_1_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getProgramAccess().getNameSTRINGTerminalRuleCall_1_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__NameAlternatives_1_0"


    // $ANTLR start "rule__Pin__Alternatives"
    // InternalSpinCAD.g:2602:1: rule__Pin__Alternatives : ( ( ruleInputPin ) | ( ruleOutputPin ) );
    public final void rule__Pin__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2606:1: ( ( ruleInputPin ) | ( ruleOutputPin ) )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==21||LA2_0==23) ) {
                alt2=1;
            }
            else if ( (LA2_0==22||LA2_0==24) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // InternalSpinCAD.g:2607:1: ( ruleInputPin )
                    {
                    // InternalSpinCAD.g:2607:1: ( ruleInputPin )
                    // InternalSpinCAD.g:2608:1: ruleInputPin
                    {
                     before(grammarAccess.getPinAccess().getInputPinParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleInputPin();

                    state._fsp--;

                     after(grammarAccess.getPinAccess().getInputPinParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2613:6: ( ruleOutputPin )
                    {
                    // InternalSpinCAD.g:2613:6: ( ruleOutputPin )
                    // InternalSpinCAD.g:2614:1: ruleOutputPin
                    {
                     before(grammarAccess.getPinAccess().getOutputPinParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleOutputPin();

                    state._fsp--;

                     after(grammarAccess.getPinAccess().getOutputPinParserRuleCall_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pin__Alternatives"


    // $ANTLR start "rule__InputPin__Alternatives"
    // InternalSpinCAD.g:2624:1: rule__InputPin__Alternatives : ( ( ruleAudioInput ) | ( ruleControlInput ) );
    public final void rule__InputPin__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2628:1: ( ( ruleAudioInput ) | ( ruleControlInput ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==21) ) {
                alt3=1;
            }
            else if ( (LA3_0==23) ) {
                alt3=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // InternalSpinCAD.g:2629:1: ( ruleAudioInput )
                    {
                    // InternalSpinCAD.g:2629:1: ( ruleAudioInput )
                    // InternalSpinCAD.g:2630:1: ruleAudioInput
                    {
                     before(grammarAccess.getInputPinAccess().getAudioInputParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleAudioInput();

                    state._fsp--;

                     after(grammarAccess.getInputPinAccess().getAudioInputParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2635:6: ( ruleControlInput )
                    {
                    // InternalSpinCAD.g:2635:6: ( ruleControlInput )
                    // InternalSpinCAD.g:2636:1: ruleControlInput
                    {
                     before(grammarAccess.getInputPinAccess().getControlInputParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleControlInput();

                    state._fsp--;

                     after(grammarAccess.getInputPinAccess().getControlInputParserRuleCall_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InputPin__Alternatives"


    // $ANTLR start "rule__OutputPin__Alternatives"
    // InternalSpinCAD.g:2646:1: rule__OutputPin__Alternatives : ( ( ruleAudioOutput ) | ( ruleControlOutput ) );
    public final void rule__OutputPin__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2650:1: ( ( ruleAudioOutput ) | ( ruleControlOutput ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==22) ) {
                alt4=1;
            }
            else if ( (LA4_0==24) ) {
                alt4=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // InternalSpinCAD.g:2651:1: ( ruleAudioOutput )
                    {
                    // InternalSpinCAD.g:2651:1: ( ruleAudioOutput )
                    // InternalSpinCAD.g:2652:1: ruleAudioOutput
                    {
                     before(grammarAccess.getOutputPinAccess().getAudioOutputParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleAudioOutput();

                    state._fsp--;

                     after(grammarAccess.getOutputPinAccess().getAudioOutputParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2657:6: ( ruleControlOutput )
                    {
                    // InternalSpinCAD.g:2657:6: ( ruleControlOutput )
                    // InternalSpinCAD.g:2658:1: ruleControlOutput
                    {
                     before(grammarAccess.getOutputPinAccess().getControlOutputParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleControlOutput();

                    state._fsp--;

                     after(grammarAccess.getOutputPinAccess().getControlOutputParserRuleCall_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OutputPin__Alternatives"


    // $ANTLR start "rule__AudioInput__LabelAlternatives_2_0"
    // InternalSpinCAD.g:2668:1: rule__AudioInput__LabelAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__AudioInput__LabelAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2672:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==RULE_ID) ) {
                alt5=1;
            }
            else if ( (LA5_0==RULE_STRING) ) {
                alt5=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // InternalSpinCAD.g:2673:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2673:1: ( RULE_ID )
                    // InternalSpinCAD.g:2674:1: RULE_ID
                    {
                     before(grammarAccess.getAudioInputAccess().getLabelIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getAudioInputAccess().getLabelIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2679:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2679:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2680:1: RULE_STRING
                    {
                     before(grammarAccess.getAudioInputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getAudioInputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__LabelAlternatives_2_0"


    // $ANTLR start "rule__AudioOutput__LabelAlternatives_2_0"
    // InternalSpinCAD.g:2690:1: rule__AudioOutput__LabelAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__AudioOutput__LabelAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2694:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==RULE_ID) ) {
                alt6=1;
            }
            else if ( (LA6_0==RULE_STRING) ) {
                alt6=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalSpinCAD.g:2695:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2695:1: ( RULE_ID )
                    // InternalSpinCAD.g:2696:1: RULE_ID
                    {
                     before(grammarAccess.getAudioOutputAccess().getLabelIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getAudioOutputAccess().getLabelIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2701:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2701:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2702:1: RULE_STRING
                    {
                     before(grammarAccess.getAudioOutputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getAudioOutputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__LabelAlternatives_2_0"


    // $ANTLR start "rule__ControlInput__LabelAlternatives_2_0"
    // InternalSpinCAD.g:2712:1: rule__ControlInput__LabelAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__ControlInput__LabelAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2716:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==RULE_ID) ) {
                alt7=1;
            }
            else if ( (LA7_0==RULE_STRING) ) {
                alt7=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalSpinCAD.g:2717:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2717:1: ( RULE_ID )
                    // InternalSpinCAD.g:2718:1: RULE_ID
                    {
                     before(grammarAccess.getControlInputAccess().getLabelIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getControlInputAccess().getLabelIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2723:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2723:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2724:1: RULE_STRING
                    {
                     before(grammarAccess.getControlInputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getControlInputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__LabelAlternatives_2_0"


    // $ANTLR start "rule__ControlOutput__LabelAlternatives_2_0"
    // InternalSpinCAD.g:2734:1: rule__ControlOutput__LabelAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__ControlOutput__LabelAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2738:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==RULE_ID) ) {
                alt8=1;
            }
            else if ( (LA8_0==RULE_STRING) ) {
                alt8=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // InternalSpinCAD.g:2739:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2739:1: ( RULE_ID )
                    // InternalSpinCAD.g:2740:1: RULE_ID
                    {
                     before(grammarAccess.getControlOutputAccess().getLabelIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getControlOutputAccess().getLabelIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2745:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2745:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2746:1: RULE_STRING
                    {
                     before(grammarAccess.getControlOutputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getControlOutputAccess().getLabelSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__LabelAlternatives_2_0"


    // $ANTLR start "rule__SpinElement__Alternatives"
    // InternalSpinCAD.g:2756:1: rule__SpinElement__Alternatives : ( ( ruleSpinInt ) | ( ruleControl ) | ( ruleSpinEquate ) | ( ruleSpinBool ) | ( ruleMem ) | ( ruleInstruction ) | ( ruleLabel ) | ( ruleComment ) | ( ruleMacro ) | ( ruleOffset ) );
    public final void rule__SpinElement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2760:1: ( ( ruleSpinInt ) | ( ruleControl ) | ( ruleSpinEquate ) | ( ruleSpinBool ) | ( ruleMem ) | ( ruleInstruction ) | ( ruleLabel ) | ( ruleComment ) | ( ruleMacro ) | ( ruleOffset ) )
            int alt9=10;
            switch ( input.LA(1) ) {
            case 26:
                {
                alt9=1;
                }
                break;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
                {
                alt9=2;
                }
                break;
            case 25:
                {
                alt9=3;
                }
                break;
            case 29:
                {
                alt9=4;
                }
                break;
            case 27:
                {
                alt9=5;
                }
                break;
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
                {
                alt9=6;
                }
                break;
            case RULE_ID:
                {
                alt9=7;
                }
                break;
            case RULE_SC_COMMENT:
                {
                alt9=8;
                }
                break;
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
                {
                alt9=9;
                }
                break;
            case 28:
                {
                alt9=10;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // InternalSpinCAD.g:2761:1: ( ruleSpinInt )
                    {
                    // InternalSpinCAD.g:2761:1: ( ruleSpinInt )
                    // InternalSpinCAD.g:2762:1: ruleSpinInt
                    {
                     before(grammarAccess.getSpinElementAccess().getSpinIntParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinInt();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getSpinIntParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2767:6: ( ruleControl )
                    {
                    // InternalSpinCAD.g:2767:6: ( ruleControl )
                    // InternalSpinCAD.g:2768:1: ruleControl
                    {
                     before(grammarAccess.getSpinElementAccess().getControlParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleControl();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getControlParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:2773:6: ( ruleSpinEquate )
                    {
                    // InternalSpinCAD.g:2773:6: ( ruleSpinEquate )
                    // InternalSpinCAD.g:2774:1: ruleSpinEquate
                    {
                     before(grammarAccess.getSpinElementAccess().getSpinEquateParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinEquate();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getSpinEquateParserRuleCall_2()); 

                    }


                    }
                    break;
                case 4 :
                    // InternalSpinCAD.g:2779:6: ( ruleSpinBool )
                    {
                    // InternalSpinCAD.g:2779:6: ( ruleSpinBool )
                    // InternalSpinCAD.g:2780:1: ruleSpinBool
                    {
                     before(grammarAccess.getSpinElementAccess().getSpinBoolParserRuleCall_3()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinBool();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getSpinBoolParserRuleCall_3()); 

                    }


                    }
                    break;
                case 5 :
                    // InternalSpinCAD.g:2785:6: ( ruleMem )
                    {
                    // InternalSpinCAD.g:2785:6: ( ruleMem )
                    // InternalSpinCAD.g:2786:1: ruleMem
                    {
                     before(grammarAccess.getSpinElementAccess().getMemParserRuleCall_4()); 
                    pushFollow(FOLLOW_2);
                    ruleMem();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getMemParserRuleCall_4()); 

                    }


                    }
                    break;
                case 6 :
                    // InternalSpinCAD.g:2791:6: ( ruleInstruction )
                    {
                    // InternalSpinCAD.g:2791:6: ( ruleInstruction )
                    // InternalSpinCAD.g:2792:1: ruleInstruction
                    {
                     before(grammarAccess.getSpinElementAccess().getInstructionParserRuleCall_5()); 
                    pushFollow(FOLLOW_2);
                    ruleInstruction();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getInstructionParserRuleCall_5()); 

                    }


                    }
                    break;
                case 7 :
                    // InternalSpinCAD.g:2797:6: ( ruleLabel )
                    {
                    // InternalSpinCAD.g:2797:6: ( ruleLabel )
                    // InternalSpinCAD.g:2798:1: ruleLabel
                    {
                     before(grammarAccess.getSpinElementAccess().getLabelParserRuleCall_6()); 
                    pushFollow(FOLLOW_2);
                    ruleLabel();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getLabelParserRuleCall_6()); 

                    }


                    }
                    break;
                case 8 :
                    // InternalSpinCAD.g:2803:6: ( ruleComment )
                    {
                    // InternalSpinCAD.g:2803:6: ( ruleComment )
                    // InternalSpinCAD.g:2804:1: ruleComment
                    {
                     before(grammarAccess.getSpinElementAccess().getCommentParserRuleCall_7()); 
                    pushFollow(FOLLOW_2);
                    ruleComment();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getCommentParserRuleCall_7()); 

                    }


                    }
                    break;
                case 9 :
                    // InternalSpinCAD.g:2809:6: ( ruleMacro )
                    {
                    // InternalSpinCAD.g:2809:6: ( ruleMacro )
                    // InternalSpinCAD.g:2810:1: ruleMacro
                    {
                     before(grammarAccess.getSpinElementAccess().getMacroParserRuleCall_8()); 
                    pushFollow(FOLLOW_2);
                    ruleMacro();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getMacroParserRuleCall_8()); 

                    }


                    }
                    break;
                case 10 :
                    // InternalSpinCAD.g:2815:6: ( ruleOffset )
                    {
                    // InternalSpinCAD.g:2815:6: ( ruleOffset )
                    // InternalSpinCAD.g:2816:1: ruleOffset
                    {
                     before(grammarAccess.getSpinElementAccess().getOffsetParserRuleCall_9()); 
                    pushFollow(FOLLOW_2);
                    ruleOffset();

                    state._fsp--;

                     after(grammarAccess.getSpinElementAccess().getOffsetParserRuleCall_9()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinElement__Alternatives"


    // $ANTLR start "rule__Control__Alternatives"
    // InternalSpinCAD.g:2826:1: rule__Control__Alternatives : ( ( ruleSpinSliderLabel ) | ( ruleSpinCheckBox ) | ( ruleLogFreqSliderLabel ) | ( ruleLogFreq2SliderLabel ) | ( ruleSpinRadioButton ) | ( ruleSliderLabelCheckBox ) | ( ruleSpinComboBox ) | ( ruleSliderLabelSpinner ) );
    public final void rule__Control__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2830:1: ( ( ruleSpinSliderLabel ) | ( ruleSpinCheckBox ) | ( ruleLogFreqSliderLabel ) | ( ruleLogFreq2SliderLabel ) | ( ruleSpinRadioButton ) | ( ruleSliderLabelCheckBox ) | ( ruleSpinComboBox ) | ( ruleSliderLabelSpinner ) )
            int alt10=8;
            switch ( input.LA(1) ) {
            case 30:
                {
                alt10=1;
                }
                break;
            case 33:
                {
                alt10=2;
                }
                break;
            case 34:
                {
                alt10=3;
                }
                break;
            case 35:
                {
                alt10=4;
                }
                break;
            case 36:
                {
                alt10=5;
                }
                break;
            case 32:
                {
                alt10=6;
                }
                break;
            case 37:
                {
                alt10=7;
                }
                break;
            case 31:
                {
                alt10=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // InternalSpinCAD.g:2831:1: ( ruleSpinSliderLabel )
                    {
                    // InternalSpinCAD.g:2831:1: ( ruleSpinSliderLabel )
                    // InternalSpinCAD.g:2832:1: ruleSpinSliderLabel
                    {
                     before(grammarAccess.getControlAccess().getSpinSliderLabelParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinSliderLabel();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSpinSliderLabelParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2837:6: ( ruleSpinCheckBox )
                    {
                    // InternalSpinCAD.g:2837:6: ( ruleSpinCheckBox )
                    // InternalSpinCAD.g:2838:1: ruleSpinCheckBox
                    {
                     before(grammarAccess.getControlAccess().getSpinCheckBoxParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinCheckBox();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSpinCheckBoxParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:2843:6: ( ruleLogFreqSliderLabel )
                    {
                    // InternalSpinCAD.g:2843:6: ( ruleLogFreqSliderLabel )
                    // InternalSpinCAD.g:2844:1: ruleLogFreqSliderLabel
                    {
                     before(grammarAccess.getControlAccess().getLogFreqSliderLabelParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleLogFreqSliderLabel();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getLogFreqSliderLabelParserRuleCall_2()); 

                    }


                    }
                    break;
                case 4 :
                    // InternalSpinCAD.g:2849:6: ( ruleLogFreq2SliderLabel )
                    {
                    // InternalSpinCAD.g:2849:6: ( ruleLogFreq2SliderLabel )
                    // InternalSpinCAD.g:2850:1: ruleLogFreq2SliderLabel
                    {
                     before(grammarAccess.getControlAccess().getLogFreq2SliderLabelParserRuleCall_3()); 
                    pushFollow(FOLLOW_2);
                    ruleLogFreq2SliderLabel();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getLogFreq2SliderLabelParserRuleCall_3()); 

                    }


                    }
                    break;
                case 5 :
                    // InternalSpinCAD.g:2855:6: ( ruleSpinRadioButton )
                    {
                    // InternalSpinCAD.g:2855:6: ( ruleSpinRadioButton )
                    // InternalSpinCAD.g:2856:1: ruleSpinRadioButton
                    {
                     before(grammarAccess.getControlAccess().getSpinRadioButtonParserRuleCall_4()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinRadioButton();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSpinRadioButtonParserRuleCall_4()); 

                    }


                    }
                    break;
                case 6 :
                    // InternalSpinCAD.g:2861:6: ( ruleSliderLabelCheckBox )
                    {
                    // InternalSpinCAD.g:2861:6: ( ruleSliderLabelCheckBox )
                    // InternalSpinCAD.g:2862:1: ruleSliderLabelCheckBox
                    {
                     before(grammarAccess.getControlAccess().getSliderLabelCheckBoxParserRuleCall_5()); 
                    pushFollow(FOLLOW_2);
                    ruleSliderLabelCheckBox();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSliderLabelCheckBoxParserRuleCall_5()); 

                    }


                    }
                    break;
                case 7 :
                    // InternalSpinCAD.g:2867:6: ( ruleSpinComboBox )
                    {
                    // InternalSpinCAD.g:2867:6: ( ruleSpinComboBox )
                    // InternalSpinCAD.g:2868:1: ruleSpinComboBox
                    {
                     before(grammarAccess.getControlAccess().getSpinComboBoxParserRuleCall_6()); 
                    pushFollow(FOLLOW_2);
                    ruleSpinComboBox();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSpinComboBoxParserRuleCall_6()); 

                    }


                    }
                    break;
                case 8 :
                    // InternalSpinCAD.g:2873:6: ( ruleSliderLabelSpinner )
                    {
                    // InternalSpinCAD.g:2873:6: ( ruleSliderLabelSpinner )
                    // InternalSpinCAD.g:2874:1: ruleSliderLabelSpinner
                    {
                     before(grammarAccess.getControlAccess().getSliderLabelSpinnerParserRuleCall_7()); 
                    pushFollow(FOLLOW_2);
                    ruleSliderLabelSpinner();

                    state._fsp--;

                     after(grammarAccess.getControlAccess().getSliderLabelSpinnerParserRuleCall_7()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Control__Alternatives"


    // $ANTLR start "rule__SpinSliderLabel__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2884:1: rule__SpinSliderLabel__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SpinSliderLabel__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2888:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==RULE_ID) ) {
                alt11=1;
            }
            else if ( (LA11_0==RULE_STRING) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // InternalSpinCAD.g:2889:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2889:1: ( RULE_ID )
                    // InternalSpinCAD.g:2890:1: RULE_ID
                    {
                     before(grammarAccess.getSpinSliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSpinSliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2895:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2895:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2896:1: RULE_STRING
                    {
                     before(grammarAccess.getSpinSliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSpinSliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__SliderLabelSpinner__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2906:1: rule__SliderLabelSpinner__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SliderLabelSpinner__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2910:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==RULE_ID) ) {
                alt12=1;
            }
            else if ( (LA12_0==RULE_STRING) ) {
                alt12=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // InternalSpinCAD.g:2911:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2911:1: ( RULE_ID )
                    // InternalSpinCAD.g:2912:1: RULE_ID
                    {
                     before(grammarAccess.getSliderLabelSpinnerAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSliderLabelSpinnerAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2917:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2917:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2918:1: RULE_STRING
                    {
                     before(grammarAccess.getSliderLabelSpinnerAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSliderLabelSpinnerAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__SliderLabelCheckBox__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2928:1: rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SliderLabelCheckBox__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2932:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==RULE_ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==RULE_STRING) ) {
                alt13=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // InternalSpinCAD.g:2933:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2933:1: ( RULE_ID )
                    // InternalSpinCAD.g:2934:1: RULE_ID
                    {
                     before(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2939:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2939:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2940:1: RULE_STRING
                    {
                     before(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__SpinCheckBox__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2950:1: rule__SpinCheckBox__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SpinCheckBox__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2954:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==RULE_ID) ) {
                alt14=1;
            }
            else if ( (LA14_0==RULE_STRING) ) {
                alt14=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // InternalSpinCAD.g:2955:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2955:1: ( RULE_ID )
                    // InternalSpinCAD.g:2956:1: RULE_ID
                    {
                     before(grammarAccess.getSpinCheckBoxAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSpinCheckBoxAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2961:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2961:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2962:1: RULE_STRING
                    {
                     before(grammarAccess.getSpinCheckBoxAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSpinCheckBoxAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__LogFreqSliderLabel__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2972:1: rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__LogFreqSliderLabel__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2976:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==RULE_ID) ) {
                alt15=1;
            }
            else if ( (LA15_0==RULE_STRING) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalSpinCAD.g:2977:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2977:1: ( RULE_ID )
                    // InternalSpinCAD.g:2978:1: RULE_ID
                    {
                     before(grammarAccess.getLogFreqSliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getLogFreqSliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:2983:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:2983:6: ( RULE_STRING )
                    // InternalSpinCAD.g:2984:1: RULE_STRING
                    {
                     before(grammarAccess.getLogFreqSliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getLogFreqSliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:2994:1: rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:2998:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==RULE_ID) ) {
                alt16=1;
            }
            else if ( (LA16_0==RULE_STRING) ) {
                alt16=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalSpinCAD.g:2999:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:2999:1: ( RULE_ID )
                    // InternalSpinCAD.g:3000:1: RULE_ID
                    {
                     before(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3005:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:3005:6: ( RULE_STRING )
                    // InternalSpinCAD.g:3006:1: RULE_STRING
                    {
                     before(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__SpinRadioButton__ControlNameAlternatives_2_0"
    // InternalSpinCAD.g:3016:1: rule__SpinRadioButton__ControlNameAlternatives_2_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SpinRadioButton__ControlNameAlternatives_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3020:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==RULE_ID) ) {
                alt17=1;
            }
            else if ( (LA17_0==RULE_STRING) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // InternalSpinCAD.g:3021:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:3021:1: ( RULE_ID )
                    // InternalSpinCAD.g:3022:1: RULE_ID
                    {
                     before(grammarAccess.getSpinRadioButtonAccess().getControlNameIDTerminalRuleCall_2_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSpinRadioButtonAccess().getControlNameIDTerminalRuleCall_2_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3027:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:3027:6: ( RULE_STRING )
                    // InternalSpinCAD.g:3028:1: RULE_STRING
                    {
                     before(grammarAccess.getSpinRadioButtonAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSpinRadioButtonAccess().getControlNameSTRINGTerminalRuleCall_2_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__ControlNameAlternatives_2_0"


    // $ANTLR start "rule__Macro__Alternatives"
    // InternalSpinCAD.g:3038:1: rule__Macro__Alternatives : ( ( ruleIsPinConnected ) | ( ruleIsTrue ) | ( ruleIsElse ) | ( ruleIsEndif ) | ( ruleIsGreaterThan ) | ( ruleIsEqualTo ) | ( ruleIsOr ) | ( ruleIsLessThan ) | ( ruleGetInputDefault ) | ( ruleReadChorusTap ) | ( ruleSetChorusWidth ) | ( ruleGetDelayScaleControl ) | ( ruleSetOutputPin ) | ( ruleGetBaseAddress ) | ( ruleGetSamplesFromRatio ) | ( ruleMinusDouble ) | ( ruleDivideDouble ) | ( ruleDivideInt ) | ( ruleMultiplyDouble ) | ( ruleSemitonesToRmpRate ) | ( ruleEquals ) | ( ruleEqualsBool ) );
    public final void rule__Macro__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3042:1: ( ( ruleIsPinConnected ) | ( ruleIsTrue ) | ( ruleIsElse ) | ( ruleIsEndif ) | ( ruleIsGreaterThan ) | ( ruleIsEqualTo ) | ( ruleIsOr ) | ( ruleIsLessThan ) | ( ruleGetInputDefault ) | ( ruleReadChorusTap ) | ( ruleSetChorusWidth ) | ( ruleGetDelayScaleControl ) | ( ruleSetOutputPin ) | ( ruleGetBaseAddress ) | ( ruleGetSamplesFromRatio ) | ( ruleMinusDouble ) | ( ruleDivideDouble ) | ( ruleDivideInt ) | ( ruleMultiplyDouble ) | ( ruleSemitonesToRmpRate ) | ( ruleEquals ) | ( ruleEqualsBool ) )
            int alt18=22;
            switch ( input.LA(1) ) {
            case 39:
                {
                alt18=1;
                }
                break;
            case 43:
                {
                alt18=2;
                }
                break;
            case 44:
                {
                alt18=3;
                }
                break;
            case 45:
                {
                alt18=4;
                }
                break;
            case 40:
                {
                alt18=5;
                }
                break;
            case 42:
                {
                alt18=6;
                }
                break;
            case 46:
                {
                alt18=7;
                }
                break;
            case 41:
                {
                alt18=8;
                }
                break;
            case 47:
                {
                alt18=9;
                }
                break;
            case 49:
                {
                alt18=10;
                }
                break;
            case 60:
                {
                alt18=11;
                }
                break;
            case 48:
                {
                alt18=12;
                }
                break;
            case 53:
                {
                alt18=13;
                }
                break;
            case 52:
                {
                alt18=14;
                }
                break;
            case 50:
                {
                alt18=15;
                }
                break;
            case 54:
                {
                alt18=16;
                }
                break;
            case 55:
                {
                alt18=17;
                }
                break;
            case 58:
                {
                alt18=18;
                }
                break;
            case 59:
                {
                alt18=19;
                }
                break;
            case 51:
                {
                alt18=20;
                }
                break;
            case 56:
                {
                alt18=21;
                }
                break;
            case 57:
                {
                alt18=22;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }

            switch (alt18) {
                case 1 :
                    // InternalSpinCAD.g:3043:1: ( ruleIsPinConnected )
                    {
                    // InternalSpinCAD.g:3043:1: ( ruleIsPinConnected )
                    // InternalSpinCAD.g:3044:1: ruleIsPinConnected
                    {
                     before(grammarAccess.getMacroAccess().getIsPinConnectedParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleIsPinConnected();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsPinConnectedParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3049:6: ( ruleIsTrue )
                    {
                    // InternalSpinCAD.g:3049:6: ( ruleIsTrue )
                    // InternalSpinCAD.g:3050:1: ruleIsTrue
                    {
                     before(grammarAccess.getMacroAccess().getIsTrueParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleIsTrue();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsTrueParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3055:6: ( ruleIsElse )
                    {
                    // InternalSpinCAD.g:3055:6: ( ruleIsElse )
                    // InternalSpinCAD.g:3056:1: ruleIsElse
                    {
                     before(grammarAccess.getMacroAccess().getIsElseParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleIsElse();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsElseParserRuleCall_2()); 

                    }


                    }
                    break;
                case 4 :
                    // InternalSpinCAD.g:3061:6: ( ruleIsEndif )
                    {
                    // InternalSpinCAD.g:3061:6: ( ruleIsEndif )
                    // InternalSpinCAD.g:3062:1: ruleIsEndif
                    {
                     before(grammarAccess.getMacroAccess().getIsEndifParserRuleCall_3()); 
                    pushFollow(FOLLOW_2);
                    ruleIsEndif();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsEndifParserRuleCall_3()); 

                    }


                    }
                    break;
                case 5 :
                    // InternalSpinCAD.g:3067:6: ( ruleIsGreaterThan )
                    {
                    // InternalSpinCAD.g:3067:6: ( ruleIsGreaterThan )
                    // InternalSpinCAD.g:3068:1: ruleIsGreaterThan
                    {
                     before(grammarAccess.getMacroAccess().getIsGreaterThanParserRuleCall_4()); 
                    pushFollow(FOLLOW_2);
                    ruleIsGreaterThan();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsGreaterThanParserRuleCall_4()); 

                    }


                    }
                    break;
                case 6 :
                    // InternalSpinCAD.g:3073:6: ( ruleIsEqualTo )
                    {
                    // InternalSpinCAD.g:3073:6: ( ruleIsEqualTo )
                    // InternalSpinCAD.g:3074:1: ruleIsEqualTo
                    {
                     before(grammarAccess.getMacroAccess().getIsEqualToParserRuleCall_5()); 
                    pushFollow(FOLLOW_2);
                    ruleIsEqualTo();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsEqualToParserRuleCall_5()); 

                    }


                    }
                    break;
                case 7 :
                    // InternalSpinCAD.g:3079:6: ( ruleIsOr )
                    {
                    // InternalSpinCAD.g:3079:6: ( ruleIsOr )
                    // InternalSpinCAD.g:3080:1: ruleIsOr
                    {
                     before(grammarAccess.getMacroAccess().getIsOrParserRuleCall_6()); 
                    pushFollow(FOLLOW_2);
                    ruleIsOr();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsOrParserRuleCall_6()); 

                    }


                    }
                    break;
                case 8 :
                    // InternalSpinCAD.g:3085:6: ( ruleIsLessThan )
                    {
                    // InternalSpinCAD.g:3085:6: ( ruleIsLessThan )
                    // InternalSpinCAD.g:3086:1: ruleIsLessThan
                    {
                     before(grammarAccess.getMacroAccess().getIsLessThanParserRuleCall_7()); 
                    pushFollow(FOLLOW_2);
                    ruleIsLessThan();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getIsLessThanParserRuleCall_7()); 

                    }


                    }
                    break;
                case 9 :
                    // InternalSpinCAD.g:3091:6: ( ruleGetInputDefault )
                    {
                    // InternalSpinCAD.g:3091:6: ( ruleGetInputDefault )
                    // InternalSpinCAD.g:3092:1: ruleGetInputDefault
                    {
                     before(grammarAccess.getMacroAccess().getGetInputDefaultParserRuleCall_8()); 
                    pushFollow(FOLLOW_2);
                    ruleGetInputDefault();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getGetInputDefaultParserRuleCall_8()); 

                    }


                    }
                    break;
                case 10 :
                    // InternalSpinCAD.g:3097:6: ( ruleReadChorusTap )
                    {
                    // InternalSpinCAD.g:3097:6: ( ruleReadChorusTap )
                    // InternalSpinCAD.g:3098:1: ruleReadChorusTap
                    {
                     before(grammarAccess.getMacroAccess().getReadChorusTapParserRuleCall_9()); 
                    pushFollow(FOLLOW_2);
                    ruleReadChorusTap();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getReadChorusTapParserRuleCall_9()); 

                    }


                    }
                    break;
                case 11 :
                    // InternalSpinCAD.g:3103:6: ( ruleSetChorusWidth )
                    {
                    // InternalSpinCAD.g:3103:6: ( ruleSetChorusWidth )
                    // InternalSpinCAD.g:3104:1: ruleSetChorusWidth
                    {
                     before(grammarAccess.getMacroAccess().getSetChorusWidthParserRuleCall_10()); 
                    pushFollow(FOLLOW_2);
                    ruleSetChorusWidth();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getSetChorusWidthParserRuleCall_10()); 

                    }


                    }
                    break;
                case 12 :
                    // InternalSpinCAD.g:3109:6: ( ruleGetDelayScaleControl )
                    {
                    // InternalSpinCAD.g:3109:6: ( ruleGetDelayScaleControl )
                    // InternalSpinCAD.g:3110:1: ruleGetDelayScaleControl
                    {
                     before(grammarAccess.getMacroAccess().getGetDelayScaleControlParserRuleCall_11()); 
                    pushFollow(FOLLOW_2);
                    ruleGetDelayScaleControl();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getGetDelayScaleControlParserRuleCall_11()); 

                    }


                    }
                    break;
                case 13 :
                    // InternalSpinCAD.g:3115:6: ( ruleSetOutputPin )
                    {
                    // InternalSpinCAD.g:3115:6: ( ruleSetOutputPin )
                    // InternalSpinCAD.g:3116:1: ruleSetOutputPin
                    {
                     before(grammarAccess.getMacroAccess().getSetOutputPinParserRuleCall_12()); 
                    pushFollow(FOLLOW_2);
                    ruleSetOutputPin();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getSetOutputPinParserRuleCall_12()); 

                    }


                    }
                    break;
                case 14 :
                    // InternalSpinCAD.g:3121:6: ( ruleGetBaseAddress )
                    {
                    // InternalSpinCAD.g:3121:6: ( ruleGetBaseAddress )
                    // InternalSpinCAD.g:3122:1: ruleGetBaseAddress
                    {
                     before(grammarAccess.getMacroAccess().getGetBaseAddressParserRuleCall_13()); 
                    pushFollow(FOLLOW_2);
                    ruleGetBaseAddress();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getGetBaseAddressParserRuleCall_13()); 

                    }


                    }
                    break;
                case 15 :
                    // InternalSpinCAD.g:3127:6: ( ruleGetSamplesFromRatio )
                    {
                    // InternalSpinCAD.g:3127:6: ( ruleGetSamplesFromRatio )
                    // InternalSpinCAD.g:3128:1: ruleGetSamplesFromRatio
                    {
                     before(grammarAccess.getMacroAccess().getGetSamplesFromRatioParserRuleCall_14()); 
                    pushFollow(FOLLOW_2);
                    ruleGetSamplesFromRatio();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getGetSamplesFromRatioParserRuleCall_14()); 

                    }


                    }
                    break;
                case 16 :
                    // InternalSpinCAD.g:3133:6: ( ruleMinusDouble )
                    {
                    // InternalSpinCAD.g:3133:6: ( ruleMinusDouble )
                    // InternalSpinCAD.g:3134:1: ruleMinusDouble
                    {
                     before(grammarAccess.getMacroAccess().getMinusDoubleParserRuleCall_15()); 
                    pushFollow(FOLLOW_2);
                    ruleMinusDouble();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getMinusDoubleParserRuleCall_15()); 

                    }


                    }
                    break;
                case 17 :
                    // InternalSpinCAD.g:3139:6: ( ruleDivideDouble )
                    {
                    // InternalSpinCAD.g:3139:6: ( ruleDivideDouble )
                    // InternalSpinCAD.g:3140:1: ruleDivideDouble
                    {
                     before(grammarAccess.getMacroAccess().getDivideDoubleParserRuleCall_16()); 
                    pushFollow(FOLLOW_2);
                    ruleDivideDouble();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getDivideDoubleParserRuleCall_16()); 

                    }


                    }
                    break;
                case 18 :
                    // InternalSpinCAD.g:3145:6: ( ruleDivideInt )
                    {
                    // InternalSpinCAD.g:3145:6: ( ruleDivideInt )
                    // InternalSpinCAD.g:3146:1: ruleDivideInt
                    {
                     before(grammarAccess.getMacroAccess().getDivideIntParserRuleCall_17()); 
                    pushFollow(FOLLOW_2);
                    ruleDivideInt();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getDivideIntParserRuleCall_17()); 

                    }


                    }
                    break;
                case 19 :
                    // InternalSpinCAD.g:3151:6: ( ruleMultiplyDouble )
                    {
                    // InternalSpinCAD.g:3151:6: ( ruleMultiplyDouble )
                    // InternalSpinCAD.g:3152:1: ruleMultiplyDouble
                    {
                     before(grammarAccess.getMacroAccess().getMultiplyDoubleParserRuleCall_18()); 
                    pushFollow(FOLLOW_2);
                    ruleMultiplyDouble();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getMultiplyDoubleParserRuleCall_18()); 

                    }


                    }
                    break;
                case 20 :
                    // InternalSpinCAD.g:3157:6: ( ruleSemitonesToRmpRate )
                    {
                    // InternalSpinCAD.g:3157:6: ( ruleSemitonesToRmpRate )
                    // InternalSpinCAD.g:3158:1: ruleSemitonesToRmpRate
                    {
                     before(grammarAccess.getMacroAccess().getSemitonesToRmpRateParserRuleCall_19()); 
                    pushFollow(FOLLOW_2);
                    ruleSemitonesToRmpRate();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getSemitonesToRmpRateParserRuleCall_19()); 

                    }


                    }
                    break;
                case 21 :
                    // InternalSpinCAD.g:3163:6: ( ruleEquals )
                    {
                    // InternalSpinCAD.g:3163:6: ( ruleEquals )
                    // InternalSpinCAD.g:3164:1: ruleEquals
                    {
                     before(grammarAccess.getMacroAccess().getEqualsParserRuleCall_20()); 
                    pushFollow(FOLLOW_2);
                    ruleEquals();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getEqualsParserRuleCall_20()); 

                    }


                    }
                    break;
                case 22 :
                    // InternalSpinCAD.g:3169:6: ( ruleEqualsBool )
                    {
                    // InternalSpinCAD.g:3169:6: ( ruleEqualsBool )
                    // InternalSpinCAD.g:3170:1: ruleEqualsBool
                    {
                     before(grammarAccess.getMacroAccess().getEqualsBoolParserRuleCall_21()); 
                    pushFollow(FOLLOW_2);
                    ruleEqualsBool();

                    state._fsp--;

                     after(grammarAccess.getMacroAccess().getEqualsBoolParserRuleCall_21()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Macro__Alternatives"


    // $ANTLR start "rule__IsPinConnected__Arg1Alternatives_1_0"
    // InternalSpinCAD.g:3180:1: rule__IsPinConnected__Arg1Alternatives_1_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__IsPinConnected__Arg1Alternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3184:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==RULE_ID) ) {
                alt19=1;
            }
            else if ( (LA19_0==RULE_STRING) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // InternalSpinCAD.g:3185:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:3185:1: ( RULE_ID )
                    // InternalSpinCAD.g:3186:1: RULE_ID
                    {
                     before(grammarAccess.getIsPinConnectedAccess().getArg1IDTerminalRuleCall_1_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getIsPinConnectedAccess().getArg1IDTerminalRuleCall_1_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3191:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:3191:6: ( RULE_STRING )
                    // InternalSpinCAD.g:3192:1: RULE_STRING
                    {
                     before(grammarAccess.getIsPinConnectedAccess().getArg1STRINGTerminalRuleCall_1_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getIsPinConnectedAccess().getArg1STRINGTerminalRuleCall_1_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Arg1Alternatives_1_0"


    // $ANTLR start "rule__SetOutputPin__PinNameAlternatives_1_0"
    // InternalSpinCAD.g:3202:1: rule__SetOutputPin__PinNameAlternatives_1_0 : ( ( RULE_ID ) | ( RULE_STRING ) );
    public final void rule__SetOutputPin__PinNameAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3206:1: ( ( RULE_ID ) | ( RULE_STRING ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==RULE_ID) ) {
                alt20=1;
            }
            else if ( (LA20_0==RULE_STRING) ) {
                alt20=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // InternalSpinCAD.g:3207:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:3207:1: ( RULE_ID )
                    // InternalSpinCAD.g:3208:1: RULE_ID
                    {
                     before(grammarAccess.getSetOutputPinAccess().getPinNameIDTerminalRuleCall_1_0_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSetOutputPinAccess().getPinNameIDTerminalRuleCall_1_0_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3213:6: ( RULE_STRING )
                    {
                    // InternalSpinCAD.g:3213:6: ( RULE_STRING )
                    // InternalSpinCAD.g:3214:1: RULE_STRING
                    {
                     before(grammarAccess.getSetOutputPinAccess().getPinNameSTRINGTerminalRuleCall_1_0_1()); 
                    match(input,RULE_STRING,FOLLOW_2); 
                     after(grammarAccess.getSetOutputPinAccess().getPinNameSTRINGTerminalRuleCall_1_0_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__PinNameAlternatives_1_0"


    // $ANTLR start "rule__Instruction__Alternatives"
    // InternalSpinCAD.g:3224:1: rule__Instruction__Alternatives : ( ( ruleInst_B15_S1_9 ) | ( ruleInst_B6_S1_14 ) | ( ruleInst_S1_14_S1_10 ) | ( ruleInst_B6 ) | ( ruleInst_B24 ) | ( ruleSkip ) | ( ruleJam ) | ( ruleInst_X0 ) | ( ruleLoadSinLFO ) | ( ruleLoadRampLFO ) | ( ruleChorusReadDelay ) | ( ruleChorusReadValue ) | ( ruleChorusScaleOffset ) | ( ruleLog ) | ( ruleReadDelayPointer ) );
    public final void rule__Instruction__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3228:1: ( ( ruleInst_B15_S1_9 ) | ( ruleInst_B6_S1_14 ) | ( ruleInst_S1_14_S1_10 ) | ( ruleInst_B6 ) | ( ruleInst_B24 ) | ( ruleSkip ) | ( ruleJam ) | ( ruleInst_X0 ) | ( ruleLoadSinLFO ) | ( ruleLoadRampLFO ) | ( ruleChorusReadDelay ) | ( ruleChorusReadValue ) | ( ruleChorusScaleOffset ) | ( ruleLog ) | ( ruleReadDelayPointer ) )
            int alt21=15;
            switch ( input.LA(1) ) {
            case 73:
            case 74:
            case 75:
                {
                alt21=1;
                }
                break;
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
                {
                alt21=2;
                }
                break;
            case 70:
            case 72:
                {
                alt21=3;
                }
                break;
            case 68:
            case 69:
                {
                alt21=4;
                }
                break;
            case 82:
            case 83:
            case 84:
                {
                alt21=5;
                }
                break;
            case 89:
                {
                alt21=6;
                }
                break;
            case 85:
                {
                alt21=7;
                }
                break;
            case 86:
            case 87:
            case 88:
                {
                alt21=8;
                }
                break;
            case 76:
                {
                alt21=9;
                }
                break;
            case 77:
                {
                alt21=10;
                }
                break;
            case 78:
                {
                alt21=11;
                }
                break;
            case 79:
                {
                alt21=12;
                }
                break;
            case 80:
                {
                alt21=13;
                }
                break;
            case 71:
                {
                alt21=14;
                }
                break;
            case 81:
                {
                alt21=15;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // InternalSpinCAD.g:3229:1: ( ruleInst_B15_S1_9 )
                    {
                    // InternalSpinCAD.g:3229:1: ( ruleInst_B15_S1_9 )
                    // InternalSpinCAD.g:3230:1: ruleInst_B15_S1_9
                    {
                     before(grammarAccess.getInstructionAccess().getInst_B15_S1_9ParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_B15_S1_9();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_B15_S1_9ParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3235:6: ( ruleInst_B6_S1_14 )
                    {
                    // InternalSpinCAD.g:3235:6: ( ruleInst_B6_S1_14 )
                    // InternalSpinCAD.g:3236:1: ruleInst_B6_S1_14
                    {
                     before(grammarAccess.getInstructionAccess().getInst_B6_S1_14ParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_B6_S1_14();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_B6_S1_14ParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3241:6: ( ruleInst_S1_14_S1_10 )
                    {
                    // InternalSpinCAD.g:3241:6: ( ruleInst_S1_14_S1_10 )
                    // InternalSpinCAD.g:3242:1: ruleInst_S1_14_S1_10
                    {
                     before(grammarAccess.getInstructionAccess().getInst_S1_14_S1_10ParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_S1_14_S1_10();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_S1_14_S1_10ParserRuleCall_2()); 

                    }


                    }
                    break;
                case 4 :
                    // InternalSpinCAD.g:3247:6: ( ruleInst_B6 )
                    {
                    // InternalSpinCAD.g:3247:6: ( ruleInst_B6 )
                    // InternalSpinCAD.g:3248:1: ruleInst_B6
                    {
                     before(grammarAccess.getInstructionAccess().getInst_B6ParserRuleCall_3()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_B6();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_B6ParserRuleCall_3()); 

                    }


                    }
                    break;
                case 5 :
                    // InternalSpinCAD.g:3253:6: ( ruleInst_B24 )
                    {
                    // InternalSpinCAD.g:3253:6: ( ruleInst_B24 )
                    // InternalSpinCAD.g:3254:1: ruleInst_B24
                    {
                     before(grammarAccess.getInstructionAccess().getInst_B24ParserRuleCall_4()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_B24();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_B24ParserRuleCall_4()); 

                    }


                    }
                    break;
                case 6 :
                    // InternalSpinCAD.g:3259:6: ( ruleSkip )
                    {
                    // InternalSpinCAD.g:3259:6: ( ruleSkip )
                    // InternalSpinCAD.g:3260:1: ruleSkip
                    {
                     before(grammarAccess.getInstructionAccess().getSkipParserRuleCall_5()); 
                    pushFollow(FOLLOW_2);
                    ruleSkip();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getSkipParserRuleCall_5()); 

                    }


                    }
                    break;
                case 7 :
                    // InternalSpinCAD.g:3265:6: ( ruleJam )
                    {
                    // InternalSpinCAD.g:3265:6: ( ruleJam )
                    // InternalSpinCAD.g:3266:1: ruleJam
                    {
                     before(grammarAccess.getInstructionAccess().getJamParserRuleCall_6()); 
                    pushFollow(FOLLOW_2);
                    ruleJam();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getJamParserRuleCall_6()); 

                    }


                    }
                    break;
                case 8 :
                    // InternalSpinCAD.g:3271:6: ( ruleInst_X0 )
                    {
                    // InternalSpinCAD.g:3271:6: ( ruleInst_X0 )
                    // InternalSpinCAD.g:3272:1: ruleInst_X0
                    {
                     before(grammarAccess.getInstructionAccess().getInst_X0ParserRuleCall_7()); 
                    pushFollow(FOLLOW_2);
                    ruleInst_X0();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getInst_X0ParserRuleCall_7()); 

                    }


                    }
                    break;
                case 9 :
                    // InternalSpinCAD.g:3277:6: ( ruleLoadSinLFO )
                    {
                    // InternalSpinCAD.g:3277:6: ( ruleLoadSinLFO )
                    // InternalSpinCAD.g:3278:1: ruleLoadSinLFO
                    {
                     before(grammarAccess.getInstructionAccess().getLoadSinLFOParserRuleCall_8()); 
                    pushFollow(FOLLOW_2);
                    ruleLoadSinLFO();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getLoadSinLFOParserRuleCall_8()); 

                    }


                    }
                    break;
                case 10 :
                    // InternalSpinCAD.g:3283:6: ( ruleLoadRampLFO )
                    {
                    // InternalSpinCAD.g:3283:6: ( ruleLoadRampLFO )
                    // InternalSpinCAD.g:3284:1: ruleLoadRampLFO
                    {
                     before(grammarAccess.getInstructionAccess().getLoadRampLFOParserRuleCall_9()); 
                    pushFollow(FOLLOW_2);
                    ruleLoadRampLFO();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getLoadRampLFOParserRuleCall_9()); 

                    }


                    }
                    break;
                case 11 :
                    // InternalSpinCAD.g:3289:6: ( ruleChorusReadDelay )
                    {
                    // InternalSpinCAD.g:3289:6: ( ruleChorusReadDelay )
                    // InternalSpinCAD.g:3290:1: ruleChorusReadDelay
                    {
                     before(grammarAccess.getInstructionAccess().getChorusReadDelayParserRuleCall_10()); 
                    pushFollow(FOLLOW_2);
                    ruleChorusReadDelay();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getChorusReadDelayParserRuleCall_10()); 

                    }


                    }
                    break;
                case 12 :
                    // InternalSpinCAD.g:3295:6: ( ruleChorusReadValue )
                    {
                    // InternalSpinCAD.g:3295:6: ( ruleChorusReadValue )
                    // InternalSpinCAD.g:3296:1: ruleChorusReadValue
                    {
                     before(grammarAccess.getInstructionAccess().getChorusReadValueParserRuleCall_11()); 
                    pushFollow(FOLLOW_2);
                    ruleChorusReadValue();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getChorusReadValueParserRuleCall_11()); 

                    }


                    }
                    break;
                case 13 :
                    // InternalSpinCAD.g:3301:6: ( ruleChorusScaleOffset )
                    {
                    // InternalSpinCAD.g:3301:6: ( ruleChorusScaleOffset )
                    // InternalSpinCAD.g:3302:1: ruleChorusScaleOffset
                    {
                     before(grammarAccess.getInstructionAccess().getChorusScaleOffsetParserRuleCall_12()); 
                    pushFollow(FOLLOW_2);
                    ruleChorusScaleOffset();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getChorusScaleOffsetParserRuleCall_12()); 

                    }


                    }
                    break;
                case 14 :
                    // InternalSpinCAD.g:3307:6: ( ruleLog )
                    {
                    // InternalSpinCAD.g:3307:6: ( ruleLog )
                    // InternalSpinCAD.g:3308:1: ruleLog
                    {
                     before(grammarAccess.getInstructionAccess().getLogParserRuleCall_13()); 
                    pushFollow(FOLLOW_2);
                    ruleLog();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getLogParserRuleCall_13()); 

                    }


                    }
                    break;
                case 15 :
                    // InternalSpinCAD.g:3313:6: ( ruleReadDelayPointer )
                    {
                    // InternalSpinCAD.g:3313:6: ( ruleReadDelayPointer )
                    // InternalSpinCAD.g:3314:1: ruleReadDelayPointer
                    {
                     before(grammarAccess.getInstructionAccess().getReadDelayPointerParserRuleCall_14()); 
                    pushFollow(FOLLOW_2);
                    ruleReadDelayPointer();

                    state._fsp--;

                     after(grammarAccess.getInstructionAccess().getReadDelayPointerParserRuleCall_14()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Instruction__Alternatives"


    // $ANTLR start "rule__Inst_B6_S1_14__Alternatives"
    // InternalSpinCAD.g:3324:1: rule__Inst_B6_S1_14__Alternatives : ( ( ruleReadRegister ) | ( ruleWriteRegister ) | ( ruleReadRegisterFilter ) | ( ruleMaxx ) | ( ruleWriteRegisterHighshelf ) | ( ruleWriteRegisterLowshelf ) );
    public final void rule__Inst_B6_S1_14__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3328:1: ( ( ruleReadRegister ) | ( ruleWriteRegister ) | ( ruleReadRegisterFilter ) | ( ruleMaxx ) | ( ruleWriteRegisterHighshelf ) | ( ruleWriteRegisterLowshelf ) )
            int alt22=6;
            switch ( input.LA(1) ) {
            case 61:
                {
                alt22=1;
                }
                break;
            case 65:
                {
                alt22=2;
                }
                break;
            case 67:
                {
                alt22=3;
                }
                break;
            case 66:
                {
                alt22=4;
                }
                break;
            case 64:
                {
                alt22=5;
                }
                break;
            case 63:
                {
                alt22=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }

            switch (alt22) {
                case 1 :
                    // InternalSpinCAD.g:3329:1: ( ruleReadRegister )
                    {
                    // InternalSpinCAD.g:3329:1: ( ruleReadRegister )
                    // InternalSpinCAD.g:3330:1: ruleReadRegister
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getReadRegisterParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleReadRegister();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getReadRegisterParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3335:6: ( ruleWriteRegister )
                    {
                    // InternalSpinCAD.g:3335:6: ( ruleWriteRegister )
                    // InternalSpinCAD.g:3336:1: ruleWriteRegister
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleWriteRegister();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3341:6: ( ruleReadRegisterFilter )
                    {
                    // InternalSpinCAD.g:3341:6: ( ruleReadRegisterFilter )
                    // InternalSpinCAD.g:3342:1: ruleReadRegisterFilter
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getReadRegisterFilterParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleReadRegisterFilter();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getReadRegisterFilterParserRuleCall_2()); 

                    }


                    }
                    break;
                case 4 :
                    // InternalSpinCAD.g:3347:6: ( ruleMaxx )
                    {
                    // InternalSpinCAD.g:3347:6: ( ruleMaxx )
                    // InternalSpinCAD.g:3348:1: ruleMaxx
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getMaxxParserRuleCall_3()); 
                    pushFollow(FOLLOW_2);
                    ruleMaxx();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getMaxxParserRuleCall_3()); 

                    }


                    }
                    break;
                case 5 :
                    // InternalSpinCAD.g:3353:6: ( ruleWriteRegisterHighshelf )
                    {
                    // InternalSpinCAD.g:3353:6: ( ruleWriteRegisterHighshelf )
                    // InternalSpinCAD.g:3354:1: ruleWriteRegisterHighshelf
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterHighshelfParserRuleCall_4()); 
                    pushFollow(FOLLOW_2);
                    ruleWriteRegisterHighshelf();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterHighshelfParserRuleCall_4()); 

                    }


                    }
                    break;
                case 6 :
                    // InternalSpinCAD.g:3359:6: ( ruleWriteRegisterLowshelf )
                    {
                    // InternalSpinCAD.g:3359:6: ( ruleWriteRegisterLowshelf )
                    // InternalSpinCAD.g:3360:1: ruleWriteRegisterLowshelf
                    {
                     before(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterLowshelfParserRuleCall_5()); 
                    pushFollow(FOLLOW_2);
                    ruleWriteRegisterLowshelf();

                    state._fsp--;

                     after(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterLowshelfParserRuleCall_5()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_B6_S1_14__Alternatives"


    // $ANTLR start "rule__Inst_B15_S1_9__Alternatives"
    // InternalSpinCAD.g:3370:1: rule__Inst_B15_S1_9__Alternatives : ( ( ruleReadDelay ) | ( ruleWriteDelay ) | ( ruleWriteAllpass ) );
    public final void rule__Inst_B15_S1_9__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3374:1: ( ( ruleReadDelay ) | ( ruleWriteDelay ) | ( ruleWriteAllpass ) )
            int alt23=3;
            switch ( input.LA(1) ) {
            case 75:
                {
                alt23=1;
                }
                break;
            case 73:
                {
                alt23=2;
                }
                break;
            case 74:
                {
                alt23=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // InternalSpinCAD.g:3375:1: ( ruleReadDelay )
                    {
                    // InternalSpinCAD.g:3375:1: ( ruleReadDelay )
                    // InternalSpinCAD.g:3376:1: ruleReadDelay
                    {
                     before(grammarAccess.getInst_B15_S1_9Access().getReadDelayParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleReadDelay();

                    state._fsp--;

                     after(grammarAccess.getInst_B15_S1_9Access().getReadDelayParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3381:6: ( ruleWriteDelay )
                    {
                    // InternalSpinCAD.g:3381:6: ( ruleWriteDelay )
                    // InternalSpinCAD.g:3382:1: ruleWriteDelay
                    {
                     before(grammarAccess.getInst_B15_S1_9Access().getWriteDelayParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleWriteDelay();

                    state._fsp--;

                     after(grammarAccess.getInst_B15_S1_9Access().getWriteDelayParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3387:6: ( ruleWriteAllpass )
                    {
                    // InternalSpinCAD.g:3387:6: ( ruleWriteAllpass )
                    // InternalSpinCAD.g:3388:1: ruleWriteAllpass
                    {
                     before(grammarAccess.getInst_B15_S1_9Access().getWriteAllpassParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleWriteAllpass();

                    state._fsp--;

                     after(grammarAccess.getInst_B15_S1_9Access().getWriteAllpassParserRuleCall_2()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_B15_S1_9__Alternatives"


    // $ANTLR start "rule__Inst_B6__Alternatives"
    // InternalSpinCAD.g:3398:1: rule__Inst_B6__Alternatives : ( ( ruleMulx ) | ( ruleLdax ) );
    public final void rule__Inst_B6__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3402:1: ( ( ruleMulx ) | ( ruleLdax ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==68) ) {
                alt24=1;
            }
            else if ( (LA24_0==69) ) {
                alt24=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // InternalSpinCAD.g:3403:1: ( ruleMulx )
                    {
                    // InternalSpinCAD.g:3403:1: ( ruleMulx )
                    // InternalSpinCAD.g:3404:1: ruleMulx
                    {
                     before(grammarAccess.getInst_B6Access().getMulxParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleMulx();

                    state._fsp--;

                     after(grammarAccess.getInst_B6Access().getMulxParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3409:6: ( ruleLdax )
                    {
                    // InternalSpinCAD.g:3409:6: ( ruleLdax )
                    // InternalSpinCAD.g:3410:1: ruleLdax
                    {
                     before(grammarAccess.getInst_B6Access().getLdaxParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleLdax();

                    state._fsp--;

                     after(grammarAccess.getInst_B6Access().getLdaxParserRuleCall_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_B6__Alternatives"


    // $ANTLR start "rule__Inst_B24__Alternatives"
    // InternalSpinCAD.g:3420:1: rule__Inst_B24__Alternatives : ( ( ruleAnd ) | ( ruleOr ) | ( ruleXor ) );
    public final void rule__Inst_B24__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3424:1: ( ( ruleAnd ) | ( ruleOr ) | ( ruleXor ) )
            int alt25=3;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt25=1;
                }
                break;
            case 83:
                {
                alt25=2;
                }
                break;
            case 84:
                {
                alt25=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // InternalSpinCAD.g:3425:1: ( ruleAnd )
                    {
                    // InternalSpinCAD.g:3425:1: ( ruleAnd )
                    // InternalSpinCAD.g:3426:1: ruleAnd
                    {
                     before(grammarAccess.getInst_B24Access().getAndParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleAnd();

                    state._fsp--;

                     after(grammarAccess.getInst_B24Access().getAndParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3431:6: ( ruleOr )
                    {
                    // InternalSpinCAD.g:3431:6: ( ruleOr )
                    // InternalSpinCAD.g:3432:1: ruleOr
                    {
                     before(grammarAccess.getInst_B24Access().getOrParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleOr();

                    state._fsp--;

                     after(grammarAccess.getInst_B24Access().getOrParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3437:6: ( ruleXor )
                    {
                    // InternalSpinCAD.g:3437:6: ( ruleXor )
                    // InternalSpinCAD.g:3438:1: ruleXor
                    {
                     before(grammarAccess.getInst_B24Access().getXorParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleXor();

                    state._fsp--;

                     after(grammarAccess.getInst_B24Access().getXorParserRuleCall_2()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_B24__Alternatives"


    // $ANTLR start "rule__Inst_X0__Alternatives"
    // InternalSpinCAD.g:3448:1: rule__Inst_X0__Alternatives : ( ( ruleClr ) | ( ruleNot ) | ( ruleAbsa ) );
    public final void rule__Inst_X0__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3452:1: ( ( ruleClr ) | ( ruleNot ) | ( ruleAbsa ) )
            int alt26=3;
            switch ( input.LA(1) ) {
            case 86:
                {
                alt26=1;
                }
                break;
            case 87:
                {
                alt26=2;
                }
                break;
            case 88:
                {
                alt26=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // InternalSpinCAD.g:3453:1: ( ruleClr )
                    {
                    // InternalSpinCAD.g:3453:1: ( ruleClr )
                    // InternalSpinCAD.g:3454:1: ruleClr
                    {
                     before(grammarAccess.getInst_X0Access().getClrParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleClr();

                    state._fsp--;

                     after(grammarAccess.getInst_X0Access().getClrParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3459:6: ( ruleNot )
                    {
                    // InternalSpinCAD.g:3459:6: ( ruleNot )
                    // InternalSpinCAD.g:3460:1: ruleNot
                    {
                     before(grammarAccess.getInst_X0Access().getNotParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleNot();

                    state._fsp--;

                     after(grammarAccess.getInst_X0Access().getNotParserRuleCall_1()); 

                    }


                    }
                    break;
                case 3 :
                    // InternalSpinCAD.g:3465:6: ( ruleAbsa )
                    {
                    // InternalSpinCAD.g:3465:6: ( ruleAbsa )
                    // InternalSpinCAD.g:3466:1: ruleAbsa
                    {
                     before(grammarAccess.getInst_X0Access().getAbsaParserRuleCall_2()); 
                    pushFollow(FOLLOW_2);
                    ruleAbsa();

                    state._fsp--;

                     after(grammarAccess.getInst_X0Access().getAbsaParserRuleCall_2()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_X0__Alternatives"


    // $ANTLR start "rule__Inst_S1_14_S1_10__Alternatives"
    // InternalSpinCAD.g:3476:1: rule__Inst_S1_14_S1_10__Alternatives : ( ( ruleExp ) | ( ruleScaleOffset ) );
    public final void rule__Inst_S1_14_S1_10__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3480:1: ( ( ruleExp ) | ( ruleScaleOffset ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==70) ) {
                alt27=1;
            }
            else if ( (LA27_0==72) ) {
                alt27=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // InternalSpinCAD.g:3481:1: ( ruleExp )
                    {
                    // InternalSpinCAD.g:3481:1: ( ruleExp )
                    // InternalSpinCAD.g:3482:1: ruleExp
                    {
                     before(grammarAccess.getInst_S1_14_S1_10Access().getExpParserRuleCall_0()); 
                    pushFollow(FOLLOW_2);
                    ruleExp();

                    state._fsp--;

                     after(grammarAccess.getInst_S1_14_S1_10Access().getExpParserRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3487:6: ( ruleScaleOffset )
                    {
                    // InternalSpinCAD.g:3487:6: ( ruleScaleOffset )
                    // InternalSpinCAD.g:3488:1: ruleScaleOffset
                    {
                     before(grammarAccess.getInst_S1_14_S1_10Access().getScaleOffsetParserRuleCall_1()); 
                    pushFollow(FOLLOW_2);
                    ruleScaleOffset();

                    state._fsp--;

                     after(grammarAccess.getInst_S1_14_S1_10Access().getScaleOffsetParserRuleCall_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Inst_S1_14_S1_10__Alternatives"


    // $ANTLR start "rule__SPINDOUBLE__Alternatives_1"
    // InternalSpinCAD.g:3498:1: rule__SPINDOUBLE__Alternatives_1 : ( ( RULE_ID ) | ( ( rule__SPINDOUBLE__Group_1_1__0 ) ) );
    public final void rule__SPINDOUBLE__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3502:1: ( ( RULE_ID ) | ( ( rule__SPINDOUBLE__Group_1_1__0 ) ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==RULE_ID) ) {
                alt28=1;
            }
            else if ( (LA28_0==RULE_INT) ) {
                alt28=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // InternalSpinCAD.g:3503:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:3503:1: ( RULE_ID )
                    // InternalSpinCAD.g:3504:1: RULE_ID
                    {
                     before(grammarAccess.getSPINDOUBLEAccess().getIDTerminalRuleCall_1_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSPINDOUBLEAccess().getIDTerminalRuleCall_1_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3509:6: ( ( rule__SPINDOUBLE__Group_1_1__0 ) )
                    {
                    // InternalSpinCAD.g:3509:6: ( ( rule__SPINDOUBLE__Group_1_1__0 ) )
                    // InternalSpinCAD.g:3510:1: ( rule__SPINDOUBLE__Group_1_1__0 )
                    {
                     before(grammarAccess.getSPINDOUBLEAccess().getGroup_1_1()); 
                    // InternalSpinCAD.g:3511:1: ( rule__SPINDOUBLE__Group_1_1__0 )
                    // InternalSpinCAD.g:3511:2: rule__SPINDOUBLE__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINDOUBLE__Group_1_1__0();

                    state._fsp--;


                    }

                     after(grammarAccess.getSPINDOUBLEAccess().getGroup_1_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Alternatives_1"


    // $ANTLR start "rule__SPINREGISTER__Alternatives_1"
    // InternalSpinCAD.g:3520:1: rule__SPINREGISTER__Alternatives_1 : ( ( RULE_ID ) | ( RULE_INT ) );
    public final void rule__SPINREGISTER__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3524:1: ( ( RULE_ID ) | ( RULE_INT ) )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==RULE_ID) ) {
                alt29=1;
            }
            else if ( (LA29_0==RULE_INT) ) {
                alt29=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // InternalSpinCAD.g:3525:1: ( RULE_ID )
                    {
                    // InternalSpinCAD.g:3525:1: ( RULE_ID )
                    // InternalSpinCAD.g:3526:1: RULE_ID
                    {
                     before(grammarAccess.getSPINREGISTERAccess().getIDTerminalRuleCall_1_0()); 
                    match(input,RULE_ID,FOLLOW_2); 
                     after(grammarAccess.getSPINREGISTERAccess().getIDTerminalRuleCall_1_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3531:6: ( RULE_INT )
                    {
                    // InternalSpinCAD.g:3531:6: ( RULE_INT )
                    // InternalSpinCAD.g:3532:1: RULE_INT
                    {
                     before(grammarAccess.getSPINREGISTERAccess().getINTTerminalRuleCall_1_1()); 
                    match(input,RULE_INT,FOLLOW_2); 
                     after(grammarAccess.getSPINREGISTERAccess().getINTTerminalRuleCall_1_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINREGISTER__Alternatives_1"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Alternatives"
    // InternalSpinCAD.g:3542:1: rule__SPINCHOREGFLAGS__Alternatives : ( ( RULE_INT ) | ( ( rule__SPINCHOREGFLAGS__Group_1__0 )? ) );
    public final void rule__SPINCHOREGFLAGS__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3546:1: ( ( RULE_INT ) | ( ( rule__SPINCHOREGFLAGS__Group_1__0 )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==RULE_INT) ) {
                alt31=1;
            }
            else if ( (LA31_0==EOF||LA31_0==RULE_ID||LA31_0==62) ) {
                alt31=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // InternalSpinCAD.g:3547:1: ( RULE_INT )
                    {
                    // InternalSpinCAD.g:3547:1: ( RULE_INT )
                    // InternalSpinCAD.g:3548:1: RULE_INT
                    {
                     before(grammarAccess.getSPINCHOREGFLAGSAccess().getINTTerminalRuleCall_0()); 
                    match(input,RULE_INT,FOLLOW_2); 
                     after(grammarAccess.getSPINCHOREGFLAGSAccess().getINTTerminalRuleCall_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3553:6: ( ( rule__SPINCHOREGFLAGS__Group_1__0 )? )
                    {
                    // InternalSpinCAD.g:3553:6: ( ( rule__SPINCHOREGFLAGS__Group_1__0 )? )
                    // InternalSpinCAD.g:3554:1: ( rule__SPINCHOREGFLAGS__Group_1__0 )?
                    {
                     before(grammarAccess.getSPINCHOREGFLAGSAccess().getGroup_1()); 
                    // InternalSpinCAD.g:3555:1: ( rule__SPINCHOREGFLAGS__Group_1__0 )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==RULE_ID) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // InternalSpinCAD.g:3555:2: rule__SPINCHOREGFLAGS__Group_1__0
                            {
                            pushFollow(FOLLOW_2);
                            rule__SPINCHOREGFLAGS__Group_1__0();

                            state._fsp--;


                            }
                            break;

                    }

                     after(grammarAccess.getSPINCHOREGFLAGSAccess().getGroup_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Alternatives"


    // $ANTLR start "rule__SPINMEM__Alternatives_1"
    // InternalSpinCAD.g:3564:1: rule__SPINMEM__Alternatives_1 : ( ( ( rule__SPINMEM__Group_1_0__0 ) ) | ( ( rule__SPINMEM__OffsetAssignment_1_1 ) ) );
    public final void rule__SPINMEM__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3568:1: ( ( ( rule__SPINMEM__Group_1_0__0 ) ) | ( ( rule__SPINMEM__OffsetAssignment_1_1 ) ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==RULE_INT) ) {
                alt32=1;
            }
            else if ( (LA32_0==RULE_ID) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // InternalSpinCAD.g:3569:1: ( ( rule__SPINMEM__Group_1_0__0 ) )
                    {
                    // InternalSpinCAD.g:3569:1: ( ( rule__SPINMEM__Group_1_0__0 ) )
                    // InternalSpinCAD.g:3570:1: ( rule__SPINMEM__Group_1_0__0 )
                    {
                     before(grammarAccess.getSPINMEMAccess().getGroup_1_0()); 
                    // InternalSpinCAD.g:3571:1: ( rule__SPINMEM__Group_1_0__0 )
                    // InternalSpinCAD.g:3571:2: rule__SPINMEM__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINMEM__Group_1_0__0();

                    state._fsp--;


                    }

                     after(grammarAccess.getSPINMEMAccess().getGroup_1_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3575:6: ( ( rule__SPINMEM__OffsetAssignment_1_1 ) )
                    {
                    // InternalSpinCAD.g:3575:6: ( ( rule__SPINMEM__OffsetAssignment_1_1 ) )
                    // InternalSpinCAD.g:3576:1: ( rule__SPINMEM__OffsetAssignment_1_1 )
                    {
                     before(grammarAccess.getSPINMEMAccess().getOffsetAssignment_1_1()); 
                    // InternalSpinCAD.g:3577:1: ( rule__SPINMEM__OffsetAssignment_1_1 )
                    // InternalSpinCAD.g:3577:2: rule__SPINMEM__OffsetAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINMEM__OffsetAssignment_1_1();

                    state._fsp--;


                    }

                     after(grammarAccess.getSPINMEMAccess().getOffsetAssignment_1_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Alternatives_1"


    // $ANTLR start "rule__SPINBUF__Alternatives_1"
    // InternalSpinCAD.g:3586:1: rule__SPINBUF__Alternatives_1 : ( ( '#' ) | ( '^' ) );
    public final void rule__SPINBUF__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3590:1: ( ( '#' ) | ( '^' ) )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==13) ) {
                alt33=1;
            }
            else if ( (LA33_0==14) ) {
                alt33=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // InternalSpinCAD.g:3591:1: ( '#' )
                    {
                    // InternalSpinCAD.g:3591:1: ( '#' )
                    // InternalSpinCAD.g:3592:1: '#'
                    {
                     before(grammarAccess.getSPINBUFAccess().getNumberSignKeyword_1_0()); 
                    match(input,13,FOLLOW_2); 
                     after(grammarAccess.getSPINBUFAccess().getNumberSignKeyword_1_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3599:6: ( '^' )
                    {
                    // InternalSpinCAD.g:3599:6: ( '^' )
                    // InternalSpinCAD.g:3600:1: '^'
                    {
                     before(grammarAccess.getSPINBUFAccess().getCircumflexAccentKeyword_1_1()); 
                    match(input,14,FOLLOW_2); 
                     after(grammarAccess.getSPINBUFAccess().getCircumflexAccentKeyword_1_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Alternatives_1"


    // $ANTLR start "rule__SPINBUF__Alternatives_2"
    // InternalSpinCAD.g:3612:1: rule__SPINBUF__Alternatives_2 : ( ( '+' ) | ( '-' ) );
    public final void rule__SPINBUF__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3616:1: ( ( '+' ) | ( '-' ) )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==15) ) {
                alt34=1;
            }
            else if ( (LA34_0==16) ) {
                alt34=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // InternalSpinCAD.g:3617:1: ( '+' )
                    {
                    // InternalSpinCAD.g:3617:1: ( '+' )
                    // InternalSpinCAD.g:3618:1: '+'
                    {
                     before(grammarAccess.getSPINBUFAccess().getPlusSignKeyword_2_0()); 
                    match(input,15,FOLLOW_2); 
                     after(grammarAccess.getSPINBUFAccess().getPlusSignKeyword_2_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3625:6: ( '-' )
                    {
                    // InternalSpinCAD.g:3625:6: ( '-' )
                    // InternalSpinCAD.g:3626:1: '-'
                    {
                     before(grammarAccess.getSPINBUFAccess().getHyphenMinusKeyword_2_1()); 
                    match(input,16,FOLLOW_2); 
                     after(grammarAccess.getSPINBUFAccess().getHyphenMinusKeyword_2_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Alternatives_2"


    // $ANTLR start "rule__BINARY24__Alternatives"
    // InternalSpinCAD.g:3638:1: rule__BINARY24__Alternatives : ( ( ( rule__BINARY24__Group_0__0 ) ) | ( ( rule__BINARY24__Group_1__0 ) ) );
    public final void rule__BINARY24__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3642:1: ( ( ( rule__BINARY24__Group_0__0 ) ) | ( ( rule__BINARY24__Group_1__0 ) ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==93) ) {
                alt35=1;
            }
            else if ( (LA35_0==94) ) {
                alt35=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // InternalSpinCAD.g:3643:1: ( ( rule__BINARY24__Group_0__0 ) )
                    {
                    // InternalSpinCAD.g:3643:1: ( ( rule__BINARY24__Group_0__0 ) )
                    // InternalSpinCAD.g:3644:1: ( rule__BINARY24__Group_0__0 )
                    {
                     before(grammarAccess.getBINARY24Access().getGroup_0()); 
                    // InternalSpinCAD.g:3645:1: ( rule__BINARY24__Group_0__0 )
                    // InternalSpinCAD.g:3645:2: rule__BINARY24__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__BINARY24__Group_0__0();

                    state._fsp--;


                    }

                     after(grammarAccess.getBINARY24Access().getGroup_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3649:6: ( ( rule__BINARY24__Group_1__0 ) )
                    {
                    // InternalSpinCAD.g:3649:6: ( ( rule__BINARY24__Group_1__0 ) )
                    // InternalSpinCAD.g:3650:1: ( rule__BINARY24__Group_1__0 )
                    {
                     before(grammarAccess.getBINARY24Access().getGroup_1()); 
                    // InternalSpinCAD.g:3651:1: ( rule__BINARY24__Group_1__0 )
                    // InternalSpinCAD.g:3651:2: rule__BINARY24__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__BINARY24__Group_1__0();

                    state._fsp--;


                    }

                     after(grammarAccess.getBINARY24Access().getGroup_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Alternatives"


    // $ANTLR start "rule__BOOLEAN__Alternatives"
    // InternalSpinCAD.g:3660:1: rule__BOOLEAN__Alternatives : ( ( 'true' ) | ( 'false' ) );
    public final void rule__BOOLEAN__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3664:1: ( ( 'true' ) | ( 'false' ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==17) ) {
                alt36=1;
            }
            else if ( (LA36_0==18) ) {
                alt36=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // InternalSpinCAD.g:3665:1: ( 'true' )
                    {
                    // InternalSpinCAD.g:3665:1: ( 'true' )
                    // InternalSpinCAD.g:3666:1: 'true'
                    {
                     before(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 
                    match(input,17,FOLLOW_2); 
                     after(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 

                    }


                    }
                    break;
                case 2 :
                    // InternalSpinCAD.g:3673:6: ( 'false' )
                    {
                    // InternalSpinCAD.g:3673:6: ( 'false' )
                    // InternalSpinCAD.g:3674:1: 'false'
                    {
                     before(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 
                    match(input,18,FOLLOW_2); 
                     after(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BOOLEAN__Alternatives"


    // $ANTLR start "rule__Program__Group__0"
    // InternalSpinCAD.g:3688:1: rule__Program__Group__0 : rule__Program__Group__0__Impl rule__Program__Group__1 ;
    public final void rule__Program__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3692:1: ( rule__Program__Group__0__Impl rule__Program__Group__1 )
            // InternalSpinCAD.g:3693:2: rule__Program__Group__0__Impl rule__Program__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Program__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Program__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__0"


    // $ANTLR start "rule__Program__Group__0__Impl"
    // InternalSpinCAD.g:3700:1: rule__Program__Group__0__Impl : ( '@name' ) ;
    public final void rule__Program__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3704:1: ( ( '@name' ) )
            // InternalSpinCAD.g:3705:1: ( '@name' )
            {
            // InternalSpinCAD.g:3705:1: ( '@name' )
            // InternalSpinCAD.g:3706:1: '@name'
            {
             before(grammarAccess.getProgramAccess().getNameKeyword_0()); 
            match(input,19,FOLLOW_2); 
             after(grammarAccess.getProgramAccess().getNameKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__0__Impl"


    // $ANTLR start "rule__Program__Group__1"
    // InternalSpinCAD.g:3719:1: rule__Program__Group__1 : rule__Program__Group__1__Impl rule__Program__Group__2 ;
    public final void rule__Program__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3723:1: ( rule__Program__Group__1__Impl rule__Program__Group__2 )
            // InternalSpinCAD.g:3724:2: rule__Program__Group__1__Impl rule__Program__Group__2
            {
            pushFollow(FOLLOW_4);
            rule__Program__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Program__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__1"


    // $ANTLR start "rule__Program__Group__1__Impl"
    // InternalSpinCAD.g:3731:1: rule__Program__Group__1__Impl : ( ( rule__Program__NameAssignment_1 ) ) ;
    public final void rule__Program__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3735:1: ( ( ( rule__Program__NameAssignment_1 ) ) )
            // InternalSpinCAD.g:3736:1: ( ( rule__Program__NameAssignment_1 ) )
            {
            // InternalSpinCAD.g:3736:1: ( ( rule__Program__NameAssignment_1 ) )
            // InternalSpinCAD.g:3737:1: ( rule__Program__NameAssignment_1 )
            {
             before(grammarAccess.getProgramAccess().getNameAssignment_1()); 
            // InternalSpinCAD.g:3738:1: ( rule__Program__NameAssignment_1 )
            // InternalSpinCAD.g:3738:2: rule__Program__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Program__NameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__1__Impl"


    // $ANTLR start "rule__Program__Group__2"
    // InternalSpinCAD.g:3748:1: rule__Program__Group__2 : rule__Program__Group__2__Impl rule__Program__Group__3 ;
    public final void rule__Program__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3752:1: ( rule__Program__Group__2__Impl rule__Program__Group__3 )
            // InternalSpinCAD.g:3753:2: rule__Program__Group__2__Impl rule__Program__Group__3
            {
            pushFollow(FOLLOW_4);
            rule__Program__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Program__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__2"


    // $ANTLR start "rule__Program__Group__2__Impl"
    // InternalSpinCAD.g:3760:1: rule__Program__Group__2__Impl : ( ( rule__Program__Group_2__0 )? ) ;
    public final void rule__Program__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3764:1: ( ( ( rule__Program__Group_2__0 )? ) )
            // InternalSpinCAD.g:3765:1: ( ( rule__Program__Group_2__0 )? )
            {
            // InternalSpinCAD.g:3765:1: ( ( rule__Program__Group_2__0 )? )
            // InternalSpinCAD.g:3766:1: ( rule__Program__Group_2__0 )?
            {
             before(grammarAccess.getProgramAccess().getGroup_2()); 
            // InternalSpinCAD.g:3767:1: ( rule__Program__Group_2__0 )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==20) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalSpinCAD.g:3767:2: rule__Program__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Program__Group_2__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getProgramAccess().getGroup_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__2__Impl"


    // $ANTLR start "rule__Program__Group__3"
    // InternalSpinCAD.g:3777:1: rule__Program__Group__3 : rule__Program__Group__3__Impl rule__Program__Group__4 ;
    public final void rule__Program__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3781:1: ( rule__Program__Group__3__Impl rule__Program__Group__4 )
            // InternalSpinCAD.g:3782:2: rule__Program__Group__3__Impl rule__Program__Group__4
            {
            pushFollow(FOLLOW_5);
            rule__Program__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Program__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__3"


    // $ANTLR start "rule__Program__Group__3__Impl"
    // InternalSpinCAD.g:3789:1: rule__Program__Group__3__Impl : ( ( ( rule__Program__PinsAssignment_3 ) ) ( ( rule__Program__PinsAssignment_3 )* ) ) ;
    public final void rule__Program__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3793:1: ( ( ( ( rule__Program__PinsAssignment_3 ) ) ( ( rule__Program__PinsAssignment_3 )* ) ) )
            // InternalSpinCAD.g:3794:1: ( ( ( rule__Program__PinsAssignment_3 ) ) ( ( rule__Program__PinsAssignment_3 )* ) )
            {
            // InternalSpinCAD.g:3794:1: ( ( ( rule__Program__PinsAssignment_3 ) ) ( ( rule__Program__PinsAssignment_3 )* ) )
            // InternalSpinCAD.g:3795:1: ( ( rule__Program__PinsAssignment_3 ) ) ( ( rule__Program__PinsAssignment_3 )* )
            {
            // InternalSpinCAD.g:3795:1: ( ( rule__Program__PinsAssignment_3 ) )
            // InternalSpinCAD.g:3796:1: ( rule__Program__PinsAssignment_3 )
            {
             before(grammarAccess.getProgramAccess().getPinsAssignment_3()); 
            // InternalSpinCAD.g:3797:1: ( rule__Program__PinsAssignment_3 )
            // InternalSpinCAD.g:3797:2: rule__Program__PinsAssignment_3
            {
            pushFollow(FOLLOW_6);
            rule__Program__PinsAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getPinsAssignment_3()); 

            }

            // InternalSpinCAD.g:3800:1: ( ( rule__Program__PinsAssignment_3 )* )
            // InternalSpinCAD.g:3801:1: ( rule__Program__PinsAssignment_3 )*
            {
             before(grammarAccess.getProgramAccess().getPinsAssignment_3()); 
            // InternalSpinCAD.g:3802:1: ( rule__Program__PinsAssignment_3 )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( ((LA38_0>=21 && LA38_0<=24)) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // InternalSpinCAD.g:3802:2: rule__Program__PinsAssignment_3
            	    {
            	    pushFollow(FOLLOW_6);
            	    rule__Program__PinsAssignment_3();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

             after(grammarAccess.getProgramAccess().getPinsAssignment_3()); 

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__3__Impl"


    // $ANTLR start "rule__Program__Group__4"
    // InternalSpinCAD.g:3813:1: rule__Program__Group__4 : rule__Program__Group__4__Impl ;
    public final void rule__Program__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3817:1: ( rule__Program__Group__4__Impl )
            // InternalSpinCAD.g:3818:2: rule__Program__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Program__Group__4__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__4"


    // $ANTLR start "rule__Program__Group__4__Impl"
    // InternalSpinCAD.g:3824:1: rule__Program__Group__4__Impl : ( ( ( rule__Program__ElementsAssignment_4 ) ) ( ( rule__Program__ElementsAssignment_4 )* ) ) ;
    public final void rule__Program__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3828:1: ( ( ( ( rule__Program__ElementsAssignment_4 ) ) ( ( rule__Program__ElementsAssignment_4 )* ) ) )
            // InternalSpinCAD.g:3829:1: ( ( ( rule__Program__ElementsAssignment_4 ) ) ( ( rule__Program__ElementsAssignment_4 )* ) )
            {
            // InternalSpinCAD.g:3829:1: ( ( ( rule__Program__ElementsAssignment_4 ) ) ( ( rule__Program__ElementsAssignment_4 )* ) )
            // InternalSpinCAD.g:3830:1: ( ( rule__Program__ElementsAssignment_4 ) ) ( ( rule__Program__ElementsAssignment_4 )* )
            {
            // InternalSpinCAD.g:3830:1: ( ( rule__Program__ElementsAssignment_4 ) )
            // InternalSpinCAD.g:3831:1: ( rule__Program__ElementsAssignment_4 )
            {
             before(grammarAccess.getProgramAccess().getElementsAssignment_4()); 
            // InternalSpinCAD.g:3832:1: ( rule__Program__ElementsAssignment_4 )
            // InternalSpinCAD.g:3832:2: rule__Program__ElementsAssignment_4
            {
            pushFollow(FOLLOW_7);
            rule__Program__ElementsAssignment_4();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getElementsAssignment_4()); 

            }

            // InternalSpinCAD.g:3835:1: ( ( rule__Program__ElementsAssignment_4 )* )
            // InternalSpinCAD.g:3836:1: ( rule__Program__ElementsAssignment_4 )*
            {
             before(grammarAccess.getProgramAccess().getElementsAssignment_4()); 
            // InternalSpinCAD.g:3837:1: ( rule__Program__ElementsAssignment_4 )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==RULE_ID||LA39_0==RULE_SC_COMMENT||(LA39_0>=25 && LA39_0<=37)||(LA39_0>=39 && LA39_0<=61)||(LA39_0>=63 && LA39_0<=89)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // InternalSpinCAD.g:3837:2: rule__Program__ElementsAssignment_4
            	    {
            	    pushFollow(FOLLOW_7);
            	    rule__Program__ElementsAssignment_4();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);

             after(grammarAccess.getProgramAccess().getElementsAssignment_4()); 

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group__4__Impl"


    // $ANTLR start "rule__Program__Group_2__0"
    // InternalSpinCAD.g:3858:1: rule__Program__Group_2__0 : rule__Program__Group_2__0__Impl rule__Program__Group_2__1 ;
    public final void rule__Program__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3862:1: ( rule__Program__Group_2__0__Impl rule__Program__Group_2__1 )
            // InternalSpinCAD.g:3863:2: rule__Program__Group_2__0__Impl rule__Program__Group_2__1
            {
            pushFollow(FOLLOW_8);
            rule__Program__Group_2__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Program__Group_2__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group_2__0"


    // $ANTLR start "rule__Program__Group_2__0__Impl"
    // InternalSpinCAD.g:3870:1: rule__Program__Group_2__0__Impl : ( '@color' ) ;
    public final void rule__Program__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3874:1: ( ( '@color' ) )
            // InternalSpinCAD.g:3875:1: ( '@color' )
            {
            // InternalSpinCAD.g:3875:1: ( '@color' )
            // InternalSpinCAD.g:3876:1: '@color'
            {
             before(grammarAccess.getProgramAccess().getColorKeyword_2_0()); 
            match(input,20,FOLLOW_2); 
             after(grammarAccess.getProgramAccess().getColorKeyword_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group_2__0__Impl"


    // $ANTLR start "rule__Program__Group_2__1"
    // InternalSpinCAD.g:3889:1: rule__Program__Group_2__1 : rule__Program__Group_2__1__Impl ;
    public final void rule__Program__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3893:1: ( rule__Program__Group_2__1__Impl )
            // InternalSpinCAD.g:3894:2: rule__Program__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Program__Group_2__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group_2__1"


    // $ANTLR start "rule__Program__Group_2__1__Impl"
    // InternalSpinCAD.g:3900:1: rule__Program__Group_2__1__Impl : ( ( rule__Program__ColorAssignment_2_1 ) ) ;
    public final void rule__Program__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3904:1: ( ( ( rule__Program__ColorAssignment_2_1 ) ) )
            // InternalSpinCAD.g:3905:1: ( ( rule__Program__ColorAssignment_2_1 ) )
            {
            // InternalSpinCAD.g:3905:1: ( ( rule__Program__ColorAssignment_2_1 ) )
            // InternalSpinCAD.g:3906:1: ( rule__Program__ColorAssignment_2_1 )
            {
             before(grammarAccess.getProgramAccess().getColorAssignment_2_1()); 
            // InternalSpinCAD.g:3907:1: ( rule__Program__ColorAssignment_2_1 )
            // InternalSpinCAD.g:3907:2: rule__Program__ColorAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Program__ColorAssignment_2_1();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getColorAssignment_2_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__Group_2__1__Impl"


    // $ANTLR start "rule__AudioInput__Group__0"
    // InternalSpinCAD.g:3921:1: rule__AudioInput__Group__0 : rule__AudioInput__Group__0__Impl rule__AudioInput__Group__1 ;
    public final void rule__AudioInput__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3925:1: ( rule__AudioInput__Group__0__Impl rule__AudioInput__Group__1 )
            // InternalSpinCAD.g:3926:2: rule__AudioInput__Group__0__Impl rule__AudioInput__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__AudioInput__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__AudioInput__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__0"


    // $ANTLR start "rule__AudioInput__Group__0__Impl"
    // InternalSpinCAD.g:3933:1: rule__AudioInput__Group__0__Impl : ( '@audioInput' ) ;
    public final void rule__AudioInput__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3937:1: ( ( '@audioInput' ) )
            // InternalSpinCAD.g:3938:1: ( '@audioInput' )
            {
            // InternalSpinCAD.g:3938:1: ( '@audioInput' )
            // InternalSpinCAD.g:3939:1: '@audioInput'
            {
             before(grammarAccess.getAudioInputAccess().getAudioInputKeyword_0()); 
            match(input,21,FOLLOW_2); 
             after(grammarAccess.getAudioInputAccess().getAudioInputKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__0__Impl"


    // $ANTLR start "rule__AudioInput__Group__1"
    // InternalSpinCAD.g:3952:1: rule__AudioInput__Group__1 : rule__AudioInput__Group__1__Impl rule__AudioInput__Group__2 ;
    public final void rule__AudioInput__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3956:1: ( rule__AudioInput__Group__1__Impl rule__AudioInput__Group__2 )
            // InternalSpinCAD.g:3957:2: rule__AudioInput__Group__1__Impl rule__AudioInput__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__AudioInput__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__AudioInput__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__1"


    // $ANTLR start "rule__AudioInput__Group__1__Impl"
    // InternalSpinCAD.g:3964:1: rule__AudioInput__Group__1__Impl : ( ( rule__AudioInput__VarNameAssignment_1 ) ) ;
    public final void rule__AudioInput__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3968:1: ( ( ( rule__AudioInput__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:3969:1: ( ( rule__AudioInput__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:3969:1: ( ( rule__AudioInput__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:3970:1: ( rule__AudioInput__VarNameAssignment_1 )
            {
             before(grammarAccess.getAudioInputAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:3971:1: ( rule__AudioInput__VarNameAssignment_1 )
            // InternalSpinCAD.g:3971:2: rule__AudioInput__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__AudioInput__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getAudioInputAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__1__Impl"


    // $ANTLR start "rule__AudioInput__Group__2"
    // InternalSpinCAD.g:3981:1: rule__AudioInput__Group__2 : rule__AudioInput__Group__2__Impl ;
    public final void rule__AudioInput__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3985:1: ( rule__AudioInput__Group__2__Impl )
            // InternalSpinCAD.g:3986:2: rule__AudioInput__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AudioInput__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__2"


    // $ANTLR start "rule__AudioInput__Group__2__Impl"
    // InternalSpinCAD.g:3992:1: rule__AudioInput__Group__2__Impl : ( ( rule__AudioInput__LabelAssignment_2 ) ) ;
    public final void rule__AudioInput__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:3996:1: ( ( ( rule__AudioInput__LabelAssignment_2 ) ) )
            // InternalSpinCAD.g:3997:1: ( ( rule__AudioInput__LabelAssignment_2 ) )
            {
            // InternalSpinCAD.g:3997:1: ( ( rule__AudioInput__LabelAssignment_2 ) )
            // InternalSpinCAD.g:3998:1: ( rule__AudioInput__LabelAssignment_2 )
            {
             before(grammarAccess.getAudioInputAccess().getLabelAssignment_2()); 
            // InternalSpinCAD.g:3999:1: ( rule__AudioInput__LabelAssignment_2 )
            // InternalSpinCAD.g:3999:2: rule__AudioInput__LabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__AudioInput__LabelAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getAudioInputAccess().getLabelAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__Group__2__Impl"


    // $ANTLR start "rule__AudioOutput__Group__0"
    // InternalSpinCAD.g:4015:1: rule__AudioOutput__Group__0 : rule__AudioOutput__Group__0__Impl rule__AudioOutput__Group__1 ;
    public final void rule__AudioOutput__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4019:1: ( rule__AudioOutput__Group__0__Impl rule__AudioOutput__Group__1 )
            // InternalSpinCAD.g:4020:2: rule__AudioOutput__Group__0__Impl rule__AudioOutput__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__AudioOutput__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__AudioOutput__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__0"


    // $ANTLR start "rule__AudioOutput__Group__0__Impl"
    // InternalSpinCAD.g:4027:1: rule__AudioOutput__Group__0__Impl : ( '@audioOutput' ) ;
    public final void rule__AudioOutput__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4031:1: ( ( '@audioOutput' ) )
            // InternalSpinCAD.g:4032:1: ( '@audioOutput' )
            {
            // InternalSpinCAD.g:4032:1: ( '@audioOutput' )
            // InternalSpinCAD.g:4033:1: '@audioOutput'
            {
             before(grammarAccess.getAudioOutputAccess().getAudioOutputKeyword_0()); 
            match(input,22,FOLLOW_2); 
             after(grammarAccess.getAudioOutputAccess().getAudioOutputKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__0__Impl"


    // $ANTLR start "rule__AudioOutput__Group__1"
    // InternalSpinCAD.g:4046:1: rule__AudioOutput__Group__1 : rule__AudioOutput__Group__1__Impl rule__AudioOutput__Group__2 ;
    public final void rule__AudioOutput__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4050:1: ( rule__AudioOutput__Group__1__Impl rule__AudioOutput__Group__2 )
            // InternalSpinCAD.g:4051:2: rule__AudioOutput__Group__1__Impl rule__AudioOutput__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__AudioOutput__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__AudioOutput__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__1"


    // $ANTLR start "rule__AudioOutput__Group__1__Impl"
    // InternalSpinCAD.g:4058:1: rule__AudioOutput__Group__1__Impl : ( ( rule__AudioOutput__VarNameAssignment_1 ) ) ;
    public final void rule__AudioOutput__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4062:1: ( ( ( rule__AudioOutput__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:4063:1: ( ( rule__AudioOutput__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4063:1: ( ( rule__AudioOutput__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:4064:1: ( rule__AudioOutput__VarNameAssignment_1 )
            {
             before(grammarAccess.getAudioOutputAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:4065:1: ( rule__AudioOutput__VarNameAssignment_1 )
            // InternalSpinCAD.g:4065:2: rule__AudioOutput__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__AudioOutput__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getAudioOutputAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__1__Impl"


    // $ANTLR start "rule__AudioOutput__Group__2"
    // InternalSpinCAD.g:4075:1: rule__AudioOutput__Group__2 : rule__AudioOutput__Group__2__Impl ;
    public final void rule__AudioOutput__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4079:1: ( rule__AudioOutput__Group__2__Impl )
            // InternalSpinCAD.g:4080:2: rule__AudioOutput__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AudioOutput__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__2"


    // $ANTLR start "rule__AudioOutput__Group__2__Impl"
    // InternalSpinCAD.g:4086:1: rule__AudioOutput__Group__2__Impl : ( ( rule__AudioOutput__LabelAssignment_2 ) ) ;
    public final void rule__AudioOutput__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4090:1: ( ( ( rule__AudioOutput__LabelAssignment_2 ) ) )
            // InternalSpinCAD.g:4091:1: ( ( rule__AudioOutput__LabelAssignment_2 ) )
            {
            // InternalSpinCAD.g:4091:1: ( ( rule__AudioOutput__LabelAssignment_2 ) )
            // InternalSpinCAD.g:4092:1: ( rule__AudioOutput__LabelAssignment_2 )
            {
             before(grammarAccess.getAudioOutputAccess().getLabelAssignment_2()); 
            // InternalSpinCAD.g:4093:1: ( rule__AudioOutput__LabelAssignment_2 )
            // InternalSpinCAD.g:4093:2: rule__AudioOutput__LabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__AudioOutput__LabelAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getAudioOutputAccess().getLabelAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__Group__2__Impl"


    // $ANTLR start "rule__ControlInput__Group__0"
    // InternalSpinCAD.g:4109:1: rule__ControlInput__Group__0 : rule__ControlInput__Group__0__Impl rule__ControlInput__Group__1 ;
    public final void rule__ControlInput__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4113:1: ( rule__ControlInput__Group__0__Impl rule__ControlInput__Group__1 )
            // InternalSpinCAD.g:4114:2: rule__ControlInput__Group__0__Impl rule__ControlInput__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ControlInput__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ControlInput__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__0"


    // $ANTLR start "rule__ControlInput__Group__0__Impl"
    // InternalSpinCAD.g:4121:1: rule__ControlInput__Group__0__Impl : ( '@controlInput' ) ;
    public final void rule__ControlInput__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4125:1: ( ( '@controlInput' ) )
            // InternalSpinCAD.g:4126:1: ( '@controlInput' )
            {
            // InternalSpinCAD.g:4126:1: ( '@controlInput' )
            // InternalSpinCAD.g:4127:1: '@controlInput'
            {
             before(grammarAccess.getControlInputAccess().getControlInputKeyword_0()); 
            match(input,23,FOLLOW_2); 
             after(grammarAccess.getControlInputAccess().getControlInputKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__0__Impl"


    // $ANTLR start "rule__ControlInput__Group__1"
    // InternalSpinCAD.g:4140:1: rule__ControlInput__Group__1 : rule__ControlInput__Group__1__Impl rule__ControlInput__Group__2 ;
    public final void rule__ControlInput__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4144:1: ( rule__ControlInput__Group__1__Impl rule__ControlInput__Group__2 )
            // InternalSpinCAD.g:4145:2: rule__ControlInput__Group__1__Impl rule__ControlInput__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__ControlInput__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ControlInput__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__1"


    // $ANTLR start "rule__ControlInput__Group__1__Impl"
    // InternalSpinCAD.g:4152:1: rule__ControlInput__Group__1__Impl : ( ( rule__ControlInput__VarNameAssignment_1 ) ) ;
    public final void rule__ControlInput__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4156:1: ( ( ( rule__ControlInput__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:4157:1: ( ( rule__ControlInput__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4157:1: ( ( rule__ControlInput__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:4158:1: ( rule__ControlInput__VarNameAssignment_1 )
            {
             before(grammarAccess.getControlInputAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:4159:1: ( rule__ControlInput__VarNameAssignment_1 )
            // InternalSpinCAD.g:4159:2: rule__ControlInput__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ControlInput__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getControlInputAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__1__Impl"


    // $ANTLR start "rule__ControlInput__Group__2"
    // InternalSpinCAD.g:4169:1: rule__ControlInput__Group__2 : rule__ControlInput__Group__2__Impl ;
    public final void rule__ControlInput__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4173:1: ( rule__ControlInput__Group__2__Impl )
            // InternalSpinCAD.g:4174:2: rule__ControlInput__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ControlInput__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__2"


    // $ANTLR start "rule__ControlInput__Group__2__Impl"
    // InternalSpinCAD.g:4180:1: rule__ControlInput__Group__2__Impl : ( ( rule__ControlInput__LabelAssignment_2 ) ) ;
    public final void rule__ControlInput__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4184:1: ( ( ( rule__ControlInput__LabelAssignment_2 ) ) )
            // InternalSpinCAD.g:4185:1: ( ( rule__ControlInput__LabelAssignment_2 ) )
            {
            // InternalSpinCAD.g:4185:1: ( ( rule__ControlInput__LabelAssignment_2 ) )
            // InternalSpinCAD.g:4186:1: ( rule__ControlInput__LabelAssignment_2 )
            {
             before(grammarAccess.getControlInputAccess().getLabelAssignment_2()); 
            // InternalSpinCAD.g:4187:1: ( rule__ControlInput__LabelAssignment_2 )
            // InternalSpinCAD.g:4187:2: rule__ControlInput__LabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ControlInput__LabelAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getControlInputAccess().getLabelAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__Group__2__Impl"


    // $ANTLR start "rule__ControlOutput__Group__0"
    // InternalSpinCAD.g:4203:1: rule__ControlOutput__Group__0 : rule__ControlOutput__Group__0__Impl rule__ControlOutput__Group__1 ;
    public final void rule__ControlOutput__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4207:1: ( rule__ControlOutput__Group__0__Impl rule__ControlOutput__Group__1 )
            // InternalSpinCAD.g:4208:2: rule__ControlOutput__Group__0__Impl rule__ControlOutput__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ControlOutput__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ControlOutput__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__0"


    // $ANTLR start "rule__ControlOutput__Group__0__Impl"
    // InternalSpinCAD.g:4215:1: rule__ControlOutput__Group__0__Impl : ( '@controlOutput' ) ;
    public final void rule__ControlOutput__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4219:1: ( ( '@controlOutput' ) )
            // InternalSpinCAD.g:4220:1: ( '@controlOutput' )
            {
            // InternalSpinCAD.g:4220:1: ( '@controlOutput' )
            // InternalSpinCAD.g:4221:1: '@controlOutput'
            {
             before(grammarAccess.getControlOutputAccess().getControlOutputKeyword_0()); 
            match(input,24,FOLLOW_2); 
             after(grammarAccess.getControlOutputAccess().getControlOutputKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__0__Impl"


    // $ANTLR start "rule__ControlOutput__Group__1"
    // InternalSpinCAD.g:4234:1: rule__ControlOutput__Group__1 : rule__ControlOutput__Group__1__Impl rule__ControlOutput__Group__2 ;
    public final void rule__ControlOutput__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4238:1: ( rule__ControlOutput__Group__1__Impl rule__ControlOutput__Group__2 )
            // InternalSpinCAD.g:4239:2: rule__ControlOutput__Group__1__Impl rule__ControlOutput__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__ControlOutput__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ControlOutput__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__1"


    // $ANTLR start "rule__ControlOutput__Group__1__Impl"
    // InternalSpinCAD.g:4246:1: rule__ControlOutput__Group__1__Impl : ( ( rule__ControlOutput__VarNameAssignment_1 ) ) ;
    public final void rule__ControlOutput__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4250:1: ( ( ( rule__ControlOutput__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:4251:1: ( ( rule__ControlOutput__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4251:1: ( ( rule__ControlOutput__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:4252:1: ( rule__ControlOutput__VarNameAssignment_1 )
            {
             before(grammarAccess.getControlOutputAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:4253:1: ( rule__ControlOutput__VarNameAssignment_1 )
            // InternalSpinCAD.g:4253:2: rule__ControlOutput__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ControlOutput__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getControlOutputAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__1__Impl"


    // $ANTLR start "rule__ControlOutput__Group__2"
    // InternalSpinCAD.g:4263:1: rule__ControlOutput__Group__2 : rule__ControlOutput__Group__2__Impl ;
    public final void rule__ControlOutput__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4267:1: ( rule__ControlOutput__Group__2__Impl )
            // InternalSpinCAD.g:4268:2: rule__ControlOutput__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ControlOutput__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__2"


    // $ANTLR start "rule__ControlOutput__Group__2__Impl"
    // InternalSpinCAD.g:4274:1: rule__ControlOutput__Group__2__Impl : ( ( rule__ControlOutput__LabelAssignment_2 ) ) ;
    public final void rule__ControlOutput__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4278:1: ( ( ( rule__ControlOutput__LabelAssignment_2 ) ) )
            // InternalSpinCAD.g:4279:1: ( ( rule__ControlOutput__LabelAssignment_2 ) )
            {
            // InternalSpinCAD.g:4279:1: ( ( rule__ControlOutput__LabelAssignment_2 ) )
            // InternalSpinCAD.g:4280:1: ( rule__ControlOutput__LabelAssignment_2 )
            {
             before(grammarAccess.getControlOutputAccess().getLabelAssignment_2()); 
            // InternalSpinCAD.g:4281:1: ( rule__ControlOutput__LabelAssignment_2 )
            // InternalSpinCAD.g:4281:2: rule__ControlOutput__LabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ControlOutput__LabelAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getControlOutputAccess().getLabelAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__Group__2__Impl"


    // $ANTLR start "rule__SpinEquate__Group__0"
    // InternalSpinCAD.g:4297:1: rule__SpinEquate__Group__0 : rule__SpinEquate__Group__0__Impl rule__SpinEquate__Group__1 ;
    public final void rule__SpinEquate__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4301:1: ( rule__SpinEquate__Group__0__Impl rule__SpinEquate__Group__1 )
            // InternalSpinCAD.g:4302:2: rule__SpinEquate__Group__0__Impl rule__SpinEquate__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinEquate__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinEquate__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__0"


    // $ANTLR start "rule__SpinEquate__Group__0__Impl"
    // InternalSpinCAD.g:4309:1: rule__SpinEquate__Group__0__Impl : ( 'equ' ) ;
    public final void rule__SpinEquate__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4313:1: ( ( 'equ' ) )
            // InternalSpinCAD.g:4314:1: ( 'equ' )
            {
            // InternalSpinCAD.g:4314:1: ( 'equ' )
            // InternalSpinCAD.g:4315:1: 'equ'
            {
             before(grammarAccess.getSpinEquateAccess().getEquKeyword_0()); 
            match(input,25,FOLLOW_2); 
             after(grammarAccess.getSpinEquateAccess().getEquKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__0__Impl"


    // $ANTLR start "rule__SpinEquate__Group__1"
    // InternalSpinCAD.g:4328:1: rule__SpinEquate__Group__1 : rule__SpinEquate__Group__1__Impl rule__SpinEquate__Group__2 ;
    public final void rule__SpinEquate__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4332:1: ( rule__SpinEquate__Group__1__Impl rule__SpinEquate__Group__2 )
            // InternalSpinCAD.g:4333:2: rule__SpinEquate__Group__1__Impl rule__SpinEquate__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__SpinEquate__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinEquate__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__1"


    // $ANTLR start "rule__SpinEquate__Group__1__Impl"
    // InternalSpinCAD.g:4340:1: rule__SpinEquate__Group__1__Impl : ( ( rule__SpinEquate__EnameAssignment_1 ) ) ;
    public final void rule__SpinEquate__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4344:1: ( ( ( rule__SpinEquate__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:4345:1: ( ( rule__SpinEquate__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4345:1: ( ( rule__SpinEquate__EnameAssignment_1 ) )
            // InternalSpinCAD.g:4346:1: ( rule__SpinEquate__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinEquateAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:4347:1: ( rule__SpinEquate__EnameAssignment_1 )
            // InternalSpinCAD.g:4347:2: rule__SpinEquate__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinEquate__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinEquateAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__1__Impl"


    // $ANTLR start "rule__SpinEquate__Group__2"
    // InternalSpinCAD.g:4357:1: rule__SpinEquate__Group__2 : rule__SpinEquate__Group__2__Impl ;
    public final void rule__SpinEquate__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4361:1: ( rule__SpinEquate__Group__2__Impl )
            // InternalSpinCAD.g:4362:2: rule__SpinEquate__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinEquate__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__2"


    // $ANTLR start "rule__SpinEquate__Group__2__Impl"
    // InternalSpinCAD.g:4368:1: rule__SpinEquate__Group__2__Impl : ( ( rule__SpinEquate__ValueAssignment_2 ) ) ;
    public final void rule__SpinEquate__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4372:1: ( ( ( rule__SpinEquate__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:4373:1: ( ( rule__SpinEquate__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:4373:1: ( ( rule__SpinEquate__ValueAssignment_2 ) )
            // InternalSpinCAD.g:4374:1: ( rule__SpinEquate__ValueAssignment_2 )
            {
             before(grammarAccess.getSpinEquateAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:4375:1: ( rule__SpinEquate__ValueAssignment_2 )
            // InternalSpinCAD.g:4375:2: rule__SpinEquate__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinEquate__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinEquateAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__Group__2__Impl"


    // $ANTLR start "rule__SpinInt__Group__0"
    // InternalSpinCAD.g:4391:1: rule__SpinInt__Group__0 : rule__SpinInt__Group__0__Impl rule__SpinInt__Group__1 ;
    public final void rule__SpinInt__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4395:1: ( rule__SpinInt__Group__0__Impl rule__SpinInt__Group__1 )
            // InternalSpinCAD.g:4396:2: rule__SpinInt__Group__0__Impl rule__SpinInt__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinInt__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinInt__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__0"


    // $ANTLR start "rule__SpinInt__Group__0__Impl"
    // InternalSpinCAD.g:4403:1: rule__SpinInt__Group__0__Impl : ( 'int' ) ;
    public final void rule__SpinInt__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4407:1: ( ( 'int' ) )
            // InternalSpinCAD.g:4408:1: ( 'int' )
            {
            // InternalSpinCAD.g:4408:1: ( 'int' )
            // InternalSpinCAD.g:4409:1: 'int'
            {
             before(grammarAccess.getSpinIntAccess().getIntKeyword_0()); 
            match(input,26,FOLLOW_2); 
             after(grammarAccess.getSpinIntAccess().getIntKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__0__Impl"


    // $ANTLR start "rule__SpinInt__Group__1"
    // InternalSpinCAD.g:4422:1: rule__SpinInt__Group__1 : rule__SpinInt__Group__1__Impl rule__SpinInt__Group__2 ;
    public final void rule__SpinInt__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4426:1: ( rule__SpinInt__Group__1__Impl rule__SpinInt__Group__2 )
            // InternalSpinCAD.g:4427:2: rule__SpinInt__Group__1__Impl rule__SpinInt__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__SpinInt__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinInt__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__1"


    // $ANTLR start "rule__SpinInt__Group__1__Impl"
    // InternalSpinCAD.g:4434:1: rule__SpinInt__Group__1__Impl : ( ( rule__SpinInt__EnameAssignment_1 ) ) ;
    public final void rule__SpinInt__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4438:1: ( ( ( rule__SpinInt__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:4439:1: ( ( rule__SpinInt__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4439:1: ( ( rule__SpinInt__EnameAssignment_1 ) )
            // InternalSpinCAD.g:4440:1: ( rule__SpinInt__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinIntAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:4441:1: ( rule__SpinInt__EnameAssignment_1 )
            // InternalSpinCAD.g:4441:2: rule__SpinInt__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinInt__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinIntAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__1__Impl"


    // $ANTLR start "rule__SpinInt__Group__2"
    // InternalSpinCAD.g:4451:1: rule__SpinInt__Group__2 : rule__SpinInt__Group__2__Impl ;
    public final void rule__SpinInt__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4455:1: ( rule__SpinInt__Group__2__Impl )
            // InternalSpinCAD.g:4456:2: rule__SpinInt__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinInt__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__2"


    // $ANTLR start "rule__SpinInt__Group__2__Impl"
    // InternalSpinCAD.g:4462:1: rule__SpinInt__Group__2__Impl : ( ( rule__SpinInt__ValueAssignment_2 ) ) ;
    public final void rule__SpinInt__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4466:1: ( ( ( rule__SpinInt__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:4467:1: ( ( rule__SpinInt__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:4467:1: ( ( rule__SpinInt__ValueAssignment_2 ) )
            // InternalSpinCAD.g:4468:1: ( rule__SpinInt__ValueAssignment_2 )
            {
             before(grammarAccess.getSpinIntAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:4469:1: ( rule__SpinInt__ValueAssignment_2 )
            // InternalSpinCAD.g:4469:2: rule__SpinInt__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinInt__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinIntAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__Group__2__Impl"


    // $ANTLR start "rule__Mem__Group__0"
    // InternalSpinCAD.g:4485:1: rule__Mem__Group__0 : rule__Mem__Group__0__Impl rule__Mem__Group__1 ;
    public final void rule__Mem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4489:1: ( rule__Mem__Group__0__Impl rule__Mem__Group__1 )
            // InternalSpinCAD.g:4490:2: rule__Mem__Group__0__Impl rule__Mem__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Mem__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Mem__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__0"


    // $ANTLR start "rule__Mem__Group__0__Impl"
    // InternalSpinCAD.g:4497:1: rule__Mem__Group__0__Impl : ( 'mem' ) ;
    public final void rule__Mem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4501:1: ( ( 'mem' ) )
            // InternalSpinCAD.g:4502:1: ( 'mem' )
            {
            // InternalSpinCAD.g:4502:1: ( 'mem' )
            // InternalSpinCAD.g:4503:1: 'mem'
            {
             before(grammarAccess.getMemAccess().getMemKeyword_0()); 
            match(input,27,FOLLOW_2); 
             after(grammarAccess.getMemAccess().getMemKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__0__Impl"


    // $ANTLR start "rule__Mem__Group__1"
    // InternalSpinCAD.g:4516:1: rule__Mem__Group__1 : rule__Mem__Group__1__Impl rule__Mem__Group__2 ;
    public final void rule__Mem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4520:1: ( rule__Mem__Group__1__Impl rule__Mem__Group__2 )
            // InternalSpinCAD.g:4521:2: rule__Mem__Group__1__Impl rule__Mem__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__Mem__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Mem__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__1"


    // $ANTLR start "rule__Mem__Group__1__Impl"
    // InternalSpinCAD.g:4528:1: rule__Mem__Group__1__Impl : ( ( rule__Mem__BufferAssignment_1 ) ) ;
    public final void rule__Mem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4532:1: ( ( ( rule__Mem__BufferAssignment_1 ) ) )
            // InternalSpinCAD.g:4533:1: ( ( rule__Mem__BufferAssignment_1 ) )
            {
            // InternalSpinCAD.g:4533:1: ( ( rule__Mem__BufferAssignment_1 ) )
            // InternalSpinCAD.g:4534:1: ( rule__Mem__BufferAssignment_1 )
            {
             before(grammarAccess.getMemAccess().getBufferAssignment_1()); 
            // InternalSpinCAD.g:4535:1: ( rule__Mem__BufferAssignment_1 )
            // InternalSpinCAD.g:4535:2: rule__Mem__BufferAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Mem__BufferAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getMemAccess().getBufferAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__1__Impl"


    // $ANTLR start "rule__Mem__Group__2"
    // InternalSpinCAD.g:4545:1: rule__Mem__Group__2 : rule__Mem__Group__2__Impl ;
    public final void rule__Mem__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4549:1: ( rule__Mem__Group__2__Impl )
            // InternalSpinCAD.g:4550:2: rule__Mem__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Mem__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__2"


    // $ANTLR start "rule__Mem__Group__2__Impl"
    // InternalSpinCAD.g:4556:1: rule__Mem__Group__2__Impl : ( ( rule__Mem__LengthAssignment_2 ) ) ;
    public final void rule__Mem__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4560:1: ( ( ( rule__Mem__LengthAssignment_2 ) ) )
            // InternalSpinCAD.g:4561:1: ( ( rule__Mem__LengthAssignment_2 ) )
            {
            // InternalSpinCAD.g:4561:1: ( ( rule__Mem__LengthAssignment_2 ) )
            // InternalSpinCAD.g:4562:1: ( rule__Mem__LengthAssignment_2 )
            {
             before(grammarAccess.getMemAccess().getLengthAssignment_2()); 
            // InternalSpinCAD.g:4563:1: ( rule__Mem__LengthAssignment_2 )
            // InternalSpinCAD.g:4563:2: rule__Mem__LengthAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Mem__LengthAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getMemAccess().getLengthAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__Group__2__Impl"


    // $ANTLR start "rule__Offset__Group__0"
    // InternalSpinCAD.g:4579:1: rule__Offset__Group__0 : rule__Offset__Group__0__Impl rule__Offset__Group__1 ;
    public final void rule__Offset__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4583:1: ( rule__Offset__Group__0__Impl rule__Offset__Group__1 )
            // InternalSpinCAD.g:4584:2: rule__Offset__Group__0__Impl rule__Offset__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Offset__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Offset__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__0"


    // $ANTLR start "rule__Offset__Group__0__Impl"
    // InternalSpinCAD.g:4591:1: rule__Offset__Group__0__Impl : ( 'offset' ) ;
    public final void rule__Offset__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4595:1: ( ( 'offset' ) )
            // InternalSpinCAD.g:4596:1: ( 'offset' )
            {
            // InternalSpinCAD.g:4596:1: ( 'offset' )
            // InternalSpinCAD.g:4597:1: 'offset'
            {
             before(grammarAccess.getOffsetAccess().getOffsetKeyword_0()); 
            match(input,28,FOLLOW_2); 
             after(grammarAccess.getOffsetAccess().getOffsetKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__0__Impl"


    // $ANTLR start "rule__Offset__Group__1"
    // InternalSpinCAD.g:4610:1: rule__Offset__Group__1 : rule__Offset__Group__1__Impl rule__Offset__Group__2 ;
    public final void rule__Offset__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4614:1: ( rule__Offset__Group__1__Impl rule__Offset__Group__2 )
            // InternalSpinCAD.g:4615:2: rule__Offset__Group__1__Impl rule__Offset__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__Offset__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Offset__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__1"


    // $ANTLR start "rule__Offset__Group__1__Impl"
    // InternalSpinCAD.g:4622:1: rule__Offset__Group__1__Impl : ( ( rule__Offset__NameAssignment_1 ) ) ;
    public final void rule__Offset__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4626:1: ( ( ( rule__Offset__NameAssignment_1 ) ) )
            // InternalSpinCAD.g:4627:1: ( ( rule__Offset__NameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4627:1: ( ( rule__Offset__NameAssignment_1 ) )
            // InternalSpinCAD.g:4628:1: ( rule__Offset__NameAssignment_1 )
            {
             before(grammarAccess.getOffsetAccess().getNameAssignment_1()); 
            // InternalSpinCAD.g:4629:1: ( rule__Offset__NameAssignment_1 )
            // InternalSpinCAD.g:4629:2: rule__Offset__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Offset__NameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getOffsetAccess().getNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__1__Impl"


    // $ANTLR start "rule__Offset__Group__2"
    // InternalSpinCAD.g:4639:1: rule__Offset__Group__2 : rule__Offset__Group__2__Impl ;
    public final void rule__Offset__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4643:1: ( rule__Offset__Group__2__Impl )
            // InternalSpinCAD.g:4644:2: rule__Offset__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Offset__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__2"


    // $ANTLR start "rule__Offset__Group__2__Impl"
    // InternalSpinCAD.g:4650:1: rule__Offset__Group__2__Impl : ( ( rule__Offset__LengthAssignment_2 ) ) ;
    public final void rule__Offset__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4654:1: ( ( ( rule__Offset__LengthAssignment_2 ) ) )
            // InternalSpinCAD.g:4655:1: ( ( rule__Offset__LengthAssignment_2 ) )
            {
            // InternalSpinCAD.g:4655:1: ( ( rule__Offset__LengthAssignment_2 ) )
            // InternalSpinCAD.g:4656:1: ( rule__Offset__LengthAssignment_2 )
            {
             before(grammarAccess.getOffsetAccess().getLengthAssignment_2()); 
            // InternalSpinCAD.g:4657:1: ( rule__Offset__LengthAssignment_2 )
            // InternalSpinCAD.g:4657:2: rule__Offset__LengthAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Offset__LengthAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getOffsetAccess().getLengthAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__Group__2__Impl"


    // $ANTLR start "rule__SpinBool__Group__0"
    // InternalSpinCAD.g:4673:1: rule__SpinBool__Group__0 : rule__SpinBool__Group__0__Impl rule__SpinBool__Group__1 ;
    public final void rule__SpinBool__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4677:1: ( rule__SpinBool__Group__0__Impl rule__SpinBool__Group__1 )
            // InternalSpinCAD.g:4678:2: rule__SpinBool__Group__0__Impl rule__SpinBool__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinBool__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinBool__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__0"


    // $ANTLR start "rule__SpinBool__Group__0__Impl"
    // InternalSpinCAD.g:4685:1: rule__SpinBool__Group__0__Impl : ( 'bool' ) ;
    public final void rule__SpinBool__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4689:1: ( ( 'bool' ) )
            // InternalSpinCAD.g:4690:1: ( 'bool' )
            {
            // InternalSpinCAD.g:4690:1: ( 'bool' )
            // InternalSpinCAD.g:4691:1: 'bool'
            {
             before(grammarAccess.getSpinBoolAccess().getBoolKeyword_0()); 
            match(input,29,FOLLOW_2); 
             after(grammarAccess.getSpinBoolAccess().getBoolKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__0__Impl"


    // $ANTLR start "rule__SpinBool__Group__1"
    // InternalSpinCAD.g:4704:1: rule__SpinBool__Group__1 : rule__SpinBool__Group__1__Impl rule__SpinBool__Group__2 ;
    public final void rule__SpinBool__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4708:1: ( rule__SpinBool__Group__1__Impl rule__SpinBool__Group__2 )
            // InternalSpinCAD.g:4709:2: rule__SpinBool__Group__1__Impl rule__SpinBool__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__SpinBool__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinBool__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__1"


    // $ANTLR start "rule__SpinBool__Group__1__Impl"
    // InternalSpinCAD.g:4716:1: rule__SpinBool__Group__1__Impl : ( ( rule__SpinBool__LabelAssignment_1 ) ) ;
    public final void rule__SpinBool__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4720:1: ( ( ( rule__SpinBool__LabelAssignment_1 ) ) )
            // InternalSpinCAD.g:4721:1: ( ( rule__SpinBool__LabelAssignment_1 ) )
            {
            // InternalSpinCAD.g:4721:1: ( ( rule__SpinBool__LabelAssignment_1 ) )
            // InternalSpinCAD.g:4722:1: ( rule__SpinBool__LabelAssignment_1 )
            {
             before(grammarAccess.getSpinBoolAccess().getLabelAssignment_1()); 
            // InternalSpinCAD.g:4723:1: ( rule__SpinBool__LabelAssignment_1 )
            // InternalSpinCAD.g:4723:2: rule__SpinBool__LabelAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinBool__LabelAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinBoolAccess().getLabelAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__1__Impl"


    // $ANTLR start "rule__SpinBool__Group__2"
    // InternalSpinCAD.g:4733:1: rule__SpinBool__Group__2 : rule__SpinBool__Group__2__Impl ;
    public final void rule__SpinBool__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4737:1: ( rule__SpinBool__Group__2__Impl )
            // InternalSpinCAD.g:4738:2: rule__SpinBool__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinBool__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__2"


    // $ANTLR start "rule__SpinBool__Group__2__Impl"
    // InternalSpinCAD.g:4744:1: rule__SpinBool__Group__2__Impl : ( ( rule__SpinBool__ValueAssignment_2 ) ) ;
    public final void rule__SpinBool__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4748:1: ( ( ( rule__SpinBool__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:4749:1: ( ( rule__SpinBool__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:4749:1: ( ( rule__SpinBool__ValueAssignment_2 ) )
            // InternalSpinCAD.g:4750:1: ( rule__SpinBool__ValueAssignment_2 )
            {
             before(grammarAccess.getSpinBoolAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:4751:1: ( rule__SpinBool__ValueAssignment_2 )
            // InternalSpinCAD.g:4751:2: rule__SpinBool__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinBool__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinBoolAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__Group__2__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group__0"
    // InternalSpinCAD.g:4767:1: rule__SpinSliderLabel__Group__0 : rule__SpinSliderLabel__Group__0__Impl rule__SpinSliderLabel__Group__1 ;
    public final void rule__SpinSliderLabel__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4771:1: ( rule__SpinSliderLabel__Group__0__Impl rule__SpinSliderLabel__Group__1 )
            // InternalSpinCAD.g:4772:2: rule__SpinSliderLabel__Group__0__Impl rule__SpinSliderLabel__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinSliderLabel__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__0"


    // $ANTLR start "rule__SpinSliderLabel__Group__0__Impl"
    // InternalSpinCAD.g:4779:1: rule__SpinSliderLabel__Group__0__Impl : ( '@sliderLabel' ) ;
    public final void rule__SpinSliderLabel__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4783:1: ( ( '@sliderLabel' ) )
            // InternalSpinCAD.g:4784:1: ( '@sliderLabel' )
            {
            // InternalSpinCAD.g:4784:1: ( '@sliderLabel' )
            // InternalSpinCAD.g:4785:1: '@sliderLabel'
            {
             before(grammarAccess.getSpinSliderLabelAccess().getSliderLabelKeyword_0()); 
            match(input,30,FOLLOW_2); 
             after(grammarAccess.getSpinSliderLabelAccess().getSliderLabelKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__0__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group__1"
    // InternalSpinCAD.g:4798:1: rule__SpinSliderLabel__Group__1 : rule__SpinSliderLabel__Group__1__Impl rule__SpinSliderLabel__Group__2 ;
    public final void rule__SpinSliderLabel__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4802:1: ( rule__SpinSliderLabel__Group__1__Impl rule__SpinSliderLabel__Group__2 )
            // InternalSpinCAD.g:4803:2: rule__SpinSliderLabel__Group__1__Impl rule__SpinSliderLabel__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__SpinSliderLabel__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__1"


    // $ANTLR start "rule__SpinSliderLabel__Group__1__Impl"
    // InternalSpinCAD.g:4810:1: rule__SpinSliderLabel__Group__1__Impl : ( ( rule__SpinSliderLabel__EnameAssignment_1 ) ) ;
    public final void rule__SpinSliderLabel__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4814:1: ( ( ( rule__SpinSliderLabel__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:4815:1: ( ( rule__SpinSliderLabel__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:4815:1: ( ( rule__SpinSliderLabel__EnameAssignment_1 ) )
            // InternalSpinCAD.g:4816:1: ( rule__SpinSliderLabel__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:4817:1: ( rule__SpinSliderLabel__EnameAssignment_1 )
            // InternalSpinCAD.g:4817:2: rule__SpinSliderLabel__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__1__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group__2"
    // InternalSpinCAD.g:4827:1: rule__SpinSliderLabel__Group__2 : rule__SpinSliderLabel__Group__2__Impl rule__SpinSliderLabel__Group__3 ;
    public final void rule__SpinSliderLabel__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4831:1: ( rule__SpinSliderLabel__Group__2__Impl rule__SpinSliderLabel__Group__3 )
            // InternalSpinCAD.g:4832:2: rule__SpinSliderLabel__Group__2__Impl rule__SpinSliderLabel__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__SpinSliderLabel__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__2"


    // $ANTLR start "rule__SpinSliderLabel__Group__2__Impl"
    // InternalSpinCAD.g:4839:1: rule__SpinSliderLabel__Group__2__Impl : ( ( rule__SpinSliderLabel__ControlNameAssignment_2 ) ) ;
    public final void rule__SpinSliderLabel__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4843:1: ( ( ( rule__SpinSliderLabel__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:4844:1: ( ( rule__SpinSliderLabel__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:4844:1: ( ( rule__SpinSliderLabel__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:4845:1: ( rule__SpinSliderLabel__ControlNameAssignment_2 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:4846:1: ( rule__SpinSliderLabel__ControlNameAssignment_2 )
            // InternalSpinCAD.g:4846:2: rule__SpinSliderLabel__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__2__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group__3"
    // InternalSpinCAD.g:4856:1: rule__SpinSliderLabel__Group__3 : rule__SpinSliderLabel__Group__3__Impl ;
    public final void rule__SpinSliderLabel__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4860:1: ( rule__SpinSliderLabel__Group__3__Impl )
            // InternalSpinCAD.g:4861:2: rule__SpinSliderLabel__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__3"


    // $ANTLR start "rule__SpinSliderLabel__Group__3__Impl"
    // InternalSpinCAD.g:4867:1: rule__SpinSliderLabel__Group__3__Impl : ( ( rule__SpinSliderLabel__Group_3__0 )? ) ;
    public final void rule__SpinSliderLabel__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4871:1: ( ( ( rule__SpinSliderLabel__Group_3__0 )? ) )
            // InternalSpinCAD.g:4872:1: ( ( rule__SpinSliderLabel__Group_3__0 )? )
            {
            // InternalSpinCAD.g:4872:1: ( ( rule__SpinSliderLabel__Group_3__0 )? )
            // InternalSpinCAD.g:4873:1: ( rule__SpinSliderLabel__Group_3__0 )?
            {
             before(grammarAccess.getSpinSliderLabelAccess().getGroup_3()); 
            // InternalSpinCAD.g:4874:1: ( rule__SpinSliderLabel__Group_3__0 )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_INT||LA40_0==16) ) {
                alt40=1;
            }
            else if ( (LA40_0==RULE_ID) ) {
                int LA40_2 = input.LA(2);

                if ( (LA40_2==RULE_ID||LA40_2==RULE_INT||LA40_2==16) ) {
                    alt40=1;
                }
            }
            switch (alt40) {
                case 1 :
                    // InternalSpinCAD.g:4874:2: rule__SpinSliderLabel__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinSliderLabel__Group_3__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinSliderLabelAccess().getGroup_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group__3__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__0"
    // InternalSpinCAD.g:4892:1: rule__SpinSliderLabel__Group_3__0 : rule__SpinSliderLabel__Group_3__0__Impl rule__SpinSliderLabel__Group_3__1 ;
    public final void rule__SpinSliderLabel__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4896:1: ( rule__SpinSliderLabel__Group_3__0__Impl rule__SpinSliderLabel__Group_3__1 )
            // InternalSpinCAD.g:4897:2: rule__SpinSliderLabel__Group_3__0__Impl rule__SpinSliderLabel__Group_3__1
            {
            pushFollow(FOLLOW_10);
            rule__SpinSliderLabel__Group_3__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__0"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__0__Impl"
    // InternalSpinCAD.g:4904:1: rule__SpinSliderLabel__Group_3__0__Impl : ( ( rule__SpinSliderLabel__MinValAssignment_3_0 ) ) ;
    public final void rule__SpinSliderLabel__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4908:1: ( ( ( rule__SpinSliderLabel__MinValAssignment_3_0 ) ) )
            // InternalSpinCAD.g:4909:1: ( ( rule__SpinSliderLabel__MinValAssignment_3_0 ) )
            {
            // InternalSpinCAD.g:4909:1: ( ( rule__SpinSliderLabel__MinValAssignment_3_0 ) )
            // InternalSpinCAD.g:4910:1: ( rule__SpinSliderLabel__MinValAssignment_3_0 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMinValAssignment_3_0()); 
            // InternalSpinCAD.g:4911:1: ( rule__SpinSliderLabel__MinValAssignment_3_0 )
            // InternalSpinCAD.g:4911:2: rule__SpinSliderLabel__MinValAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__MinValAssignment_3_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getMinValAssignment_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__0__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__1"
    // InternalSpinCAD.g:4921:1: rule__SpinSliderLabel__Group_3__1 : rule__SpinSliderLabel__Group_3__1__Impl rule__SpinSliderLabel__Group_3__2 ;
    public final void rule__SpinSliderLabel__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4925:1: ( rule__SpinSliderLabel__Group_3__1__Impl rule__SpinSliderLabel__Group_3__2 )
            // InternalSpinCAD.g:4926:2: rule__SpinSliderLabel__Group_3__1__Impl rule__SpinSliderLabel__Group_3__2
            {
            pushFollow(FOLLOW_10);
            rule__SpinSliderLabel__Group_3__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__1"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__1__Impl"
    // InternalSpinCAD.g:4933:1: rule__SpinSliderLabel__Group_3__1__Impl : ( ( rule__SpinSliderLabel__MaxValAssignment_3_1 ) ) ;
    public final void rule__SpinSliderLabel__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4937:1: ( ( ( rule__SpinSliderLabel__MaxValAssignment_3_1 ) ) )
            // InternalSpinCAD.g:4938:1: ( ( rule__SpinSliderLabel__MaxValAssignment_3_1 ) )
            {
            // InternalSpinCAD.g:4938:1: ( ( rule__SpinSliderLabel__MaxValAssignment_3_1 ) )
            // InternalSpinCAD.g:4939:1: ( rule__SpinSliderLabel__MaxValAssignment_3_1 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMaxValAssignment_3_1()); 
            // InternalSpinCAD.g:4940:1: ( rule__SpinSliderLabel__MaxValAssignment_3_1 )
            // InternalSpinCAD.g:4940:2: rule__SpinSliderLabel__MaxValAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__MaxValAssignment_3_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getMaxValAssignment_3_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__1__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__2"
    // InternalSpinCAD.g:4950:1: rule__SpinSliderLabel__Group_3__2 : rule__SpinSliderLabel__Group_3__2__Impl rule__SpinSliderLabel__Group_3__3 ;
    public final void rule__SpinSliderLabel__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4954:1: ( rule__SpinSliderLabel__Group_3__2__Impl rule__SpinSliderLabel__Group_3__3 )
            // InternalSpinCAD.g:4955:2: rule__SpinSliderLabel__Group_3__2__Impl rule__SpinSliderLabel__Group_3__3
            {
            pushFollow(FOLLOW_10);
            rule__SpinSliderLabel__Group_3__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__2"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__2__Impl"
    // InternalSpinCAD.g:4962:1: rule__SpinSliderLabel__Group_3__2__Impl : ( ( rule__SpinSliderLabel__InitValAssignment_3_2 ) ) ;
    public final void rule__SpinSliderLabel__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4966:1: ( ( ( rule__SpinSliderLabel__InitValAssignment_3_2 ) ) )
            // InternalSpinCAD.g:4967:1: ( ( rule__SpinSliderLabel__InitValAssignment_3_2 ) )
            {
            // InternalSpinCAD.g:4967:1: ( ( rule__SpinSliderLabel__InitValAssignment_3_2 ) )
            // InternalSpinCAD.g:4968:1: ( rule__SpinSliderLabel__InitValAssignment_3_2 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getInitValAssignment_3_2()); 
            // InternalSpinCAD.g:4969:1: ( rule__SpinSliderLabel__InitValAssignment_3_2 )
            // InternalSpinCAD.g:4969:2: rule__SpinSliderLabel__InitValAssignment_3_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__InitValAssignment_3_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getInitValAssignment_3_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__2__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__3"
    // InternalSpinCAD.g:4979:1: rule__SpinSliderLabel__Group_3__3 : rule__SpinSliderLabel__Group_3__3__Impl rule__SpinSliderLabel__Group_3__4 ;
    public final void rule__SpinSliderLabel__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4983:1: ( rule__SpinSliderLabel__Group_3__3__Impl rule__SpinSliderLabel__Group_3__4 )
            // InternalSpinCAD.g:4984:2: rule__SpinSliderLabel__Group_3__3__Impl rule__SpinSliderLabel__Group_3__4
            {
            pushFollow(FOLLOW_11);
            rule__SpinSliderLabel__Group_3__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__3"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__3__Impl"
    // InternalSpinCAD.g:4991:1: rule__SpinSliderLabel__Group_3__3__Impl : ( ( rule__SpinSliderLabel__MultiplierAssignment_3_3 ) ) ;
    public final void rule__SpinSliderLabel__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:4995:1: ( ( ( rule__SpinSliderLabel__MultiplierAssignment_3_3 ) ) )
            // InternalSpinCAD.g:4996:1: ( ( rule__SpinSliderLabel__MultiplierAssignment_3_3 ) )
            {
            // InternalSpinCAD.g:4996:1: ( ( rule__SpinSliderLabel__MultiplierAssignment_3_3 ) )
            // InternalSpinCAD.g:4997:1: ( rule__SpinSliderLabel__MultiplierAssignment_3_3 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMultiplierAssignment_3_3()); 
            // InternalSpinCAD.g:4998:1: ( rule__SpinSliderLabel__MultiplierAssignment_3_3 )
            // InternalSpinCAD.g:4998:2: rule__SpinSliderLabel__MultiplierAssignment_3_3
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__MultiplierAssignment_3_3();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getMultiplierAssignment_3_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__3__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__4"
    // InternalSpinCAD.g:5008:1: rule__SpinSliderLabel__Group_3__4 : rule__SpinSliderLabel__Group_3__4__Impl rule__SpinSliderLabel__Group_3__5 ;
    public final void rule__SpinSliderLabel__Group_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5012:1: ( rule__SpinSliderLabel__Group_3__4__Impl rule__SpinSliderLabel__Group_3__5 )
            // InternalSpinCAD.g:5013:2: rule__SpinSliderLabel__Group_3__4__Impl rule__SpinSliderLabel__Group_3__5
            {
            pushFollow(FOLLOW_9);
            rule__SpinSliderLabel__Group_3__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__4"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__4__Impl"
    // InternalSpinCAD.g:5020:1: rule__SpinSliderLabel__Group_3__4__Impl : ( ( rule__SpinSliderLabel__PrecisionAssignment_3_4 ) ) ;
    public final void rule__SpinSliderLabel__Group_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5024:1: ( ( ( rule__SpinSliderLabel__PrecisionAssignment_3_4 ) ) )
            // InternalSpinCAD.g:5025:1: ( ( rule__SpinSliderLabel__PrecisionAssignment_3_4 ) )
            {
            // InternalSpinCAD.g:5025:1: ( ( rule__SpinSliderLabel__PrecisionAssignment_3_4 ) )
            // InternalSpinCAD.g:5026:1: ( rule__SpinSliderLabel__PrecisionAssignment_3_4 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getPrecisionAssignment_3_4()); 
            // InternalSpinCAD.g:5027:1: ( rule__SpinSliderLabel__PrecisionAssignment_3_4 )
            // InternalSpinCAD.g:5027:2: rule__SpinSliderLabel__PrecisionAssignment_3_4
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__PrecisionAssignment_3_4();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getPrecisionAssignment_3_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__4__Impl"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__5"
    // InternalSpinCAD.g:5037:1: rule__SpinSliderLabel__Group_3__5 : rule__SpinSliderLabel__Group_3__5__Impl ;
    public final void rule__SpinSliderLabel__Group_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5041:1: ( rule__SpinSliderLabel__Group_3__5__Impl )
            // InternalSpinCAD.g:5042:2: rule__SpinSliderLabel__Group_3__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__Group_3__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__5"


    // $ANTLR start "rule__SpinSliderLabel__Group_3__5__Impl"
    // InternalSpinCAD.g:5048:1: rule__SpinSliderLabel__Group_3__5__Impl : ( ( rule__SpinSliderLabel__OptionAssignment_3_5 )? ) ;
    public final void rule__SpinSliderLabel__Group_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5052:1: ( ( ( rule__SpinSliderLabel__OptionAssignment_3_5 )? ) )
            // InternalSpinCAD.g:5053:1: ( ( rule__SpinSliderLabel__OptionAssignment_3_5 )? )
            {
            // InternalSpinCAD.g:5053:1: ( ( rule__SpinSliderLabel__OptionAssignment_3_5 )? )
            // InternalSpinCAD.g:5054:1: ( rule__SpinSliderLabel__OptionAssignment_3_5 )?
            {
             before(grammarAccess.getSpinSliderLabelAccess().getOptionAssignment_3_5()); 
            // InternalSpinCAD.g:5055:1: ( rule__SpinSliderLabel__OptionAssignment_3_5 )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==RULE_ID) ) {
                int LA41_1 = input.LA(2);

                if ( (LA41_1==EOF||LA41_1==RULE_ID||LA41_1==RULE_SC_COMMENT||(LA41_1>=25 && LA41_1<=37)||(LA41_1>=39 && LA41_1<=61)||(LA41_1>=63 && LA41_1<=89)) ) {
                    alt41=1;
                }
            }
            switch (alt41) {
                case 1 :
                    // InternalSpinCAD.g:5055:2: rule__SpinSliderLabel__OptionAssignment_3_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinSliderLabel__OptionAssignment_3_5();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinSliderLabelAccess().getOptionAssignment_3_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__Group_3__5__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group__0"
    // InternalSpinCAD.g:5077:1: rule__SliderLabelSpinner__Group__0 : rule__SliderLabelSpinner__Group__0__Impl rule__SliderLabelSpinner__Group__1 ;
    public final void rule__SliderLabelSpinner__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5081:1: ( rule__SliderLabelSpinner__Group__0__Impl rule__SliderLabelSpinner__Group__1 )
            // InternalSpinCAD.g:5082:2: rule__SliderLabelSpinner__Group__0__Impl rule__SliderLabelSpinner__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SliderLabelSpinner__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__0"


    // $ANTLR start "rule__SliderLabelSpinner__Group__0__Impl"
    // InternalSpinCAD.g:5089:1: rule__SliderLabelSpinner__Group__0__Impl : ( '@sliderLabelSpinner' ) ;
    public final void rule__SliderLabelSpinner__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5093:1: ( ( '@sliderLabelSpinner' ) )
            // InternalSpinCAD.g:5094:1: ( '@sliderLabelSpinner' )
            {
            // InternalSpinCAD.g:5094:1: ( '@sliderLabelSpinner' )
            // InternalSpinCAD.g:5095:1: '@sliderLabelSpinner'
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getSliderLabelSpinnerKeyword_0()); 
            match(input,31,FOLLOW_2); 
             after(grammarAccess.getSliderLabelSpinnerAccess().getSliderLabelSpinnerKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__0__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group__1"
    // InternalSpinCAD.g:5108:1: rule__SliderLabelSpinner__Group__1 : rule__SliderLabelSpinner__Group__1__Impl rule__SliderLabelSpinner__Group__2 ;
    public final void rule__SliderLabelSpinner__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5112:1: ( rule__SliderLabelSpinner__Group__1__Impl rule__SliderLabelSpinner__Group__2 )
            // InternalSpinCAD.g:5113:2: rule__SliderLabelSpinner__Group__1__Impl rule__SliderLabelSpinner__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__SliderLabelSpinner__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__1"


    // $ANTLR start "rule__SliderLabelSpinner__Group__1__Impl"
    // InternalSpinCAD.g:5120:1: rule__SliderLabelSpinner__Group__1__Impl : ( ( rule__SliderLabelSpinner__EnameAssignment_1 ) ) ;
    public final void rule__SliderLabelSpinner__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5124:1: ( ( ( rule__SliderLabelSpinner__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:5125:1: ( ( rule__SliderLabelSpinner__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:5125:1: ( ( rule__SliderLabelSpinner__EnameAssignment_1 ) )
            // InternalSpinCAD.g:5126:1: ( rule__SliderLabelSpinner__EnameAssignment_1 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:5127:1: ( rule__SliderLabelSpinner__EnameAssignment_1 )
            // InternalSpinCAD.g:5127:2: rule__SliderLabelSpinner__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__1__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group__2"
    // InternalSpinCAD.g:5137:1: rule__SliderLabelSpinner__Group__2 : rule__SliderLabelSpinner__Group__2__Impl rule__SliderLabelSpinner__Group__3 ;
    public final void rule__SliderLabelSpinner__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5141:1: ( rule__SliderLabelSpinner__Group__2__Impl rule__SliderLabelSpinner__Group__3 )
            // InternalSpinCAD.g:5142:2: rule__SliderLabelSpinner__Group__2__Impl rule__SliderLabelSpinner__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelSpinner__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__2"


    // $ANTLR start "rule__SliderLabelSpinner__Group__2__Impl"
    // InternalSpinCAD.g:5149:1: rule__SliderLabelSpinner__Group__2__Impl : ( ( rule__SliderLabelSpinner__ControlNameAssignment_2 ) ) ;
    public final void rule__SliderLabelSpinner__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5153:1: ( ( ( rule__SliderLabelSpinner__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:5154:1: ( ( rule__SliderLabelSpinner__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:5154:1: ( ( rule__SliderLabelSpinner__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:5155:1: ( rule__SliderLabelSpinner__ControlNameAssignment_2 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:5156:1: ( rule__SliderLabelSpinner__ControlNameAssignment_2 )
            // InternalSpinCAD.g:5156:2: rule__SliderLabelSpinner__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__2__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group__3"
    // InternalSpinCAD.g:5166:1: rule__SliderLabelSpinner__Group__3 : rule__SliderLabelSpinner__Group__3__Impl ;
    public final void rule__SliderLabelSpinner__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5170:1: ( rule__SliderLabelSpinner__Group__3__Impl )
            // InternalSpinCAD.g:5171:2: rule__SliderLabelSpinner__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__3"


    // $ANTLR start "rule__SliderLabelSpinner__Group__3__Impl"
    // InternalSpinCAD.g:5177:1: rule__SliderLabelSpinner__Group__3__Impl : ( ( rule__SliderLabelSpinner__Group_3__0 )? ) ;
    public final void rule__SliderLabelSpinner__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5181:1: ( ( ( rule__SliderLabelSpinner__Group_3__0 )? ) )
            // InternalSpinCAD.g:5182:1: ( ( rule__SliderLabelSpinner__Group_3__0 )? )
            {
            // InternalSpinCAD.g:5182:1: ( ( rule__SliderLabelSpinner__Group_3__0 )? )
            // InternalSpinCAD.g:5183:1: ( rule__SliderLabelSpinner__Group_3__0 )?
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getGroup_3()); 
            // InternalSpinCAD.g:5184:1: ( rule__SliderLabelSpinner__Group_3__0 )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==RULE_INT||LA42_0==16) ) {
                alt42=1;
            }
            else if ( (LA42_0==RULE_ID) ) {
                int LA42_2 = input.LA(2);

                if ( (LA42_2==RULE_ID||LA42_2==RULE_INT||LA42_2==16) ) {
                    alt42=1;
                }
            }
            switch (alt42) {
                case 1 :
                    // InternalSpinCAD.g:5184:2: rule__SliderLabelSpinner__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SliderLabelSpinner__Group_3__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getGroup_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group__3__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__0"
    // InternalSpinCAD.g:5202:1: rule__SliderLabelSpinner__Group_3__0 : rule__SliderLabelSpinner__Group_3__0__Impl rule__SliderLabelSpinner__Group_3__1 ;
    public final void rule__SliderLabelSpinner__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5206:1: ( rule__SliderLabelSpinner__Group_3__0__Impl rule__SliderLabelSpinner__Group_3__1 )
            // InternalSpinCAD.g:5207:2: rule__SliderLabelSpinner__Group_3__0__Impl rule__SliderLabelSpinner__Group_3__1
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelSpinner__Group_3__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__0"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__0__Impl"
    // InternalSpinCAD.g:5214:1: rule__SliderLabelSpinner__Group_3__0__Impl : ( ( rule__SliderLabelSpinner__MinValAssignment_3_0 ) ) ;
    public final void rule__SliderLabelSpinner__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5218:1: ( ( ( rule__SliderLabelSpinner__MinValAssignment_3_0 ) ) )
            // InternalSpinCAD.g:5219:1: ( ( rule__SliderLabelSpinner__MinValAssignment_3_0 ) )
            {
            // InternalSpinCAD.g:5219:1: ( ( rule__SliderLabelSpinner__MinValAssignment_3_0 ) )
            // InternalSpinCAD.g:5220:1: ( rule__SliderLabelSpinner__MinValAssignment_3_0 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMinValAssignment_3_0()); 
            // InternalSpinCAD.g:5221:1: ( rule__SliderLabelSpinner__MinValAssignment_3_0 )
            // InternalSpinCAD.g:5221:2: rule__SliderLabelSpinner__MinValAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__MinValAssignment_3_0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getMinValAssignment_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__0__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__1"
    // InternalSpinCAD.g:5231:1: rule__SliderLabelSpinner__Group_3__1 : rule__SliderLabelSpinner__Group_3__1__Impl rule__SliderLabelSpinner__Group_3__2 ;
    public final void rule__SliderLabelSpinner__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5235:1: ( rule__SliderLabelSpinner__Group_3__1__Impl rule__SliderLabelSpinner__Group_3__2 )
            // InternalSpinCAD.g:5236:2: rule__SliderLabelSpinner__Group_3__1__Impl rule__SliderLabelSpinner__Group_3__2
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelSpinner__Group_3__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__1"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__1__Impl"
    // InternalSpinCAD.g:5243:1: rule__SliderLabelSpinner__Group_3__1__Impl : ( ( rule__SliderLabelSpinner__MaxValAssignment_3_1 ) ) ;
    public final void rule__SliderLabelSpinner__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5247:1: ( ( ( rule__SliderLabelSpinner__MaxValAssignment_3_1 ) ) )
            // InternalSpinCAD.g:5248:1: ( ( rule__SliderLabelSpinner__MaxValAssignment_3_1 ) )
            {
            // InternalSpinCAD.g:5248:1: ( ( rule__SliderLabelSpinner__MaxValAssignment_3_1 ) )
            // InternalSpinCAD.g:5249:1: ( rule__SliderLabelSpinner__MaxValAssignment_3_1 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMaxValAssignment_3_1()); 
            // InternalSpinCAD.g:5250:1: ( rule__SliderLabelSpinner__MaxValAssignment_3_1 )
            // InternalSpinCAD.g:5250:2: rule__SliderLabelSpinner__MaxValAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__MaxValAssignment_3_1();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getMaxValAssignment_3_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__1__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__2"
    // InternalSpinCAD.g:5260:1: rule__SliderLabelSpinner__Group_3__2 : rule__SliderLabelSpinner__Group_3__2__Impl rule__SliderLabelSpinner__Group_3__3 ;
    public final void rule__SliderLabelSpinner__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5264:1: ( rule__SliderLabelSpinner__Group_3__2__Impl rule__SliderLabelSpinner__Group_3__3 )
            // InternalSpinCAD.g:5265:2: rule__SliderLabelSpinner__Group_3__2__Impl rule__SliderLabelSpinner__Group_3__3
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelSpinner__Group_3__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__2"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__2__Impl"
    // InternalSpinCAD.g:5272:1: rule__SliderLabelSpinner__Group_3__2__Impl : ( ( rule__SliderLabelSpinner__InitValAssignment_3_2 ) ) ;
    public final void rule__SliderLabelSpinner__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5276:1: ( ( ( rule__SliderLabelSpinner__InitValAssignment_3_2 ) ) )
            // InternalSpinCAD.g:5277:1: ( ( rule__SliderLabelSpinner__InitValAssignment_3_2 ) )
            {
            // InternalSpinCAD.g:5277:1: ( ( rule__SliderLabelSpinner__InitValAssignment_3_2 ) )
            // InternalSpinCAD.g:5278:1: ( rule__SliderLabelSpinner__InitValAssignment_3_2 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getInitValAssignment_3_2()); 
            // InternalSpinCAD.g:5279:1: ( rule__SliderLabelSpinner__InitValAssignment_3_2 )
            // InternalSpinCAD.g:5279:2: rule__SliderLabelSpinner__InitValAssignment_3_2
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__InitValAssignment_3_2();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getInitValAssignment_3_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__2__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__3"
    // InternalSpinCAD.g:5289:1: rule__SliderLabelSpinner__Group_3__3 : rule__SliderLabelSpinner__Group_3__3__Impl rule__SliderLabelSpinner__Group_3__4 ;
    public final void rule__SliderLabelSpinner__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5293:1: ( rule__SliderLabelSpinner__Group_3__3__Impl rule__SliderLabelSpinner__Group_3__4 )
            // InternalSpinCAD.g:5294:2: rule__SliderLabelSpinner__Group_3__3__Impl rule__SliderLabelSpinner__Group_3__4
            {
            pushFollow(FOLLOW_11);
            rule__SliderLabelSpinner__Group_3__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__3"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__3__Impl"
    // InternalSpinCAD.g:5301:1: rule__SliderLabelSpinner__Group_3__3__Impl : ( ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 ) ) ;
    public final void rule__SliderLabelSpinner__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5305:1: ( ( ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 ) ) )
            // InternalSpinCAD.g:5306:1: ( ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 ) )
            {
            // InternalSpinCAD.g:5306:1: ( ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 ) )
            // InternalSpinCAD.g:5307:1: ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMultiplierAssignment_3_3()); 
            // InternalSpinCAD.g:5308:1: ( rule__SliderLabelSpinner__MultiplierAssignment_3_3 )
            // InternalSpinCAD.g:5308:2: rule__SliderLabelSpinner__MultiplierAssignment_3_3
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__MultiplierAssignment_3_3();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getMultiplierAssignment_3_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__3__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__4"
    // InternalSpinCAD.g:5318:1: rule__SliderLabelSpinner__Group_3__4 : rule__SliderLabelSpinner__Group_3__4__Impl rule__SliderLabelSpinner__Group_3__5 ;
    public final void rule__SliderLabelSpinner__Group_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5322:1: ( rule__SliderLabelSpinner__Group_3__4__Impl rule__SliderLabelSpinner__Group_3__5 )
            // InternalSpinCAD.g:5323:2: rule__SliderLabelSpinner__Group_3__4__Impl rule__SliderLabelSpinner__Group_3__5
            {
            pushFollow(FOLLOW_9);
            rule__SliderLabelSpinner__Group_3__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__4"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__4__Impl"
    // InternalSpinCAD.g:5330:1: rule__SliderLabelSpinner__Group_3__4__Impl : ( ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 ) ) ;
    public final void rule__SliderLabelSpinner__Group_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5334:1: ( ( ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 ) ) )
            // InternalSpinCAD.g:5335:1: ( ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 ) )
            {
            // InternalSpinCAD.g:5335:1: ( ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 ) )
            // InternalSpinCAD.g:5336:1: ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getPrecisionAssignment_3_4()); 
            // InternalSpinCAD.g:5337:1: ( rule__SliderLabelSpinner__PrecisionAssignment_3_4 )
            // InternalSpinCAD.g:5337:2: rule__SliderLabelSpinner__PrecisionAssignment_3_4
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__PrecisionAssignment_3_4();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getPrecisionAssignment_3_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__4__Impl"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__5"
    // InternalSpinCAD.g:5347:1: rule__SliderLabelSpinner__Group_3__5 : rule__SliderLabelSpinner__Group_3__5__Impl ;
    public final void rule__SliderLabelSpinner__Group_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5351:1: ( rule__SliderLabelSpinner__Group_3__5__Impl )
            // InternalSpinCAD.g:5352:2: rule__SliderLabelSpinner__Group_3__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__Group_3__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__5"


    // $ANTLR start "rule__SliderLabelSpinner__Group_3__5__Impl"
    // InternalSpinCAD.g:5358:1: rule__SliderLabelSpinner__Group_3__5__Impl : ( ( rule__SliderLabelSpinner__OptionAssignment_3_5 )? ) ;
    public final void rule__SliderLabelSpinner__Group_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5362:1: ( ( ( rule__SliderLabelSpinner__OptionAssignment_3_5 )? ) )
            // InternalSpinCAD.g:5363:1: ( ( rule__SliderLabelSpinner__OptionAssignment_3_5 )? )
            {
            // InternalSpinCAD.g:5363:1: ( ( rule__SliderLabelSpinner__OptionAssignment_3_5 )? )
            // InternalSpinCAD.g:5364:1: ( rule__SliderLabelSpinner__OptionAssignment_3_5 )?
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getOptionAssignment_3_5()); 
            // InternalSpinCAD.g:5365:1: ( rule__SliderLabelSpinner__OptionAssignment_3_5 )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==RULE_ID) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==EOF||LA43_1==RULE_ID||LA43_1==RULE_SC_COMMENT||(LA43_1>=25 && LA43_1<=37)||(LA43_1>=39 && LA43_1<=61)||(LA43_1>=63 && LA43_1<=89)) ) {
                    alt43=1;
                }
            }
            switch (alt43) {
                case 1 :
                    // InternalSpinCAD.g:5365:2: rule__SliderLabelSpinner__OptionAssignment_3_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__SliderLabelSpinner__OptionAssignment_3_5();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getOptionAssignment_3_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__Group_3__5__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__0"
    // InternalSpinCAD.g:5387:1: rule__SliderLabelCheckBox__Group__0 : rule__SliderLabelCheckBox__Group__0__Impl rule__SliderLabelCheckBox__Group__1 ;
    public final void rule__SliderLabelCheckBox__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5391:1: ( rule__SliderLabelCheckBox__Group__0__Impl rule__SliderLabelCheckBox__Group__1 )
            // InternalSpinCAD.g:5392:2: rule__SliderLabelCheckBox__Group__0__Impl rule__SliderLabelCheckBox__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SliderLabelCheckBox__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__0"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__0__Impl"
    // InternalSpinCAD.g:5399:1: rule__SliderLabelCheckBox__Group__0__Impl : ( '@sliderLabelCheckBox' ) ;
    public final void rule__SliderLabelCheckBox__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5403:1: ( ( '@sliderLabelCheckBox' ) )
            // InternalSpinCAD.g:5404:1: ( '@sliderLabelCheckBox' )
            {
            // InternalSpinCAD.g:5404:1: ( '@sliderLabelCheckBox' )
            // InternalSpinCAD.g:5405:1: '@sliderLabelCheckBox'
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getSliderLabelCheckBoxKeyword_0()); 
            match(input,32,FOLLOW_2); 
             after(grammarAccess.getSliderLabelCheckBoxAccess().getSliderLabelCheckBoxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__0__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__1"
    // InternalSpinCAD.g:5418:1: rule__SliderLabelCheckBox__Group__1 : rule__SliderLabelCheckBox__Group__1__Impl rule__SliderLabelCheckBox__Group__2 ;
    public final void rule__SliderLabelCheckBox__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5422:1: ( rule__SliderLabelCheckBox__Group__1__Impl rule__SliderLabelCheckBox__Group__2 )
            // InternalSpinCAD.g:5423:2: rule__SliderLabelCheckBox__Group__1__Impl rule__SliderLabelCheckBox__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__SliderLabelCheckBox__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__1"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__1__Impl"
    // InternalSpinCAD.g:5430:1: rule__SliderLabelCheckBox__Group__1__Impl : ( ( rule__SliderLabelCheckBox__EnameAssignment_1 ) ) ;
    public final void rule__SliderLabelCheckBox__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5434:1: ( ( ( rule__SliderLabelCheckBox__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:5435:1: ( ( rule__SliderLabelCheckBox__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:5435:1: ( ( rule__SliderLabelCheckBox__EnameAssignment_1 ) )
            // InternalSpinCAD.g:5436:1: ( rule__SliderLabelCheckBox__EnameAssignment_1 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:5437:1: ( rule__SliderLabelCheckBox__EnameAssignment_1 )
            // InternalSpinCAD.g:5437:2: rule__SliderLabelCheckBox__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__1__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__2"
    // InternalSpinCAD.g:5447:1: rule__SliderLabelCheckBox__Group__2 : rule__SliderLabelCheckBox__Group__2__Impl rule__SliderLabelCheckBox__Group__3 ;
    public final void rule__SliderLabelCheckBox__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5451:1: ( rule__SliderLabelCheckBox__Group__2__Impl rule__SliderLabelCheckBox__Group__3 )
            // InternalSpinCAD.g:5452:2: rule__SliderLabelCheckBox__Group__2__Impl rule__SliderLabelCheckBox__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelCheckBox__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__2"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__2__Impl"
    // InternalSpinCAD.g:5459:1: rule__SliderLabelCheckBox__Group__2__Impl : ( ( rule__SliderLabelCheckBox__ControlNameAssignment_2 ) ) ;
    public final void rule__SliderLabelCheckBox__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5463:1: ( ( ( rule__SliderLabelCheckBox__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:5464:1: ( ( rule__SliderLabelCheckBox__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:5464:1: ( ( rule__SliderLabelCheckBox__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:5465:1: ( rule__SliderLabelCheckBox__ControlNameAssignment_2 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:5466:1: ( rule__SliderLabelCheckBox__ControlNameAssignment_2 )
            // InternalSpinCAD.g:5466:2: rule__SliderLabelCheckBox__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__2__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__3"
    // InternalSpinCAD.g:5476:1: rule__SliderLabelCheckBox__Group__3 : rule__SliderLabelCheckBox__Group__3__Impl ;
    public final void rule__SliderLabelCheckBox__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5480:1: ( rule__SliderLabelCheckBox__Group__3__Impl )
            // InternalSpinCAD.g:5481:2: rule__SliderLabelCheckBox__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__3"


    // $ANTLR start "rule__SliderLabelCheckBox__Group__3__Impl"
    // InternalSpinCAD.g:5487:1: rule__SliderLabelCheckBox__Group__3__Impl : ( ( rule__SliderLabelCheckBox__Group_3__0 )? ) ;
    public final void rule__SliderLabelCheckBox__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5491:1: ( ( ( rule__SliderLabelCheckBox__Group_3__0 )? ) )
            // InternalSpinCAD.g:5492:1: ( ( rule__SliderLabelCheckBox__Group_3__0 )? )
            {
            // InternalSpinCAD.g:5492:1: ( ( rule__SliderLabelCheckBox__Group_3__0 )? )
            // InternalSpinCAD.g:5493:1: ( rule__SliderLabelCheckBox__Group_3__0 )?
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getGroup_3()); 
            // InternalSpinCAD.g:5494:1: ( rule__SliderLabelCheckBox__Group_3__0 )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==RULE_INT||LA44_0==16) ) {
                alt44=1;
            }
            else if ( (LA44_0==RULE_ID) ) {
                int LA44_2 = input.LA(2);

                if ( (LA44_2==RULE_ID||LA44_2==RULE_INT||LA44_2==16) ) {
                    alt44=1;
                }
            }
            switch (alt44) {
                case 1 :
                    // InternalSpinCAD.g:5494:2: rule__SliderLabelCheckBox__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SliderLabelCheckBox__Group_3__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getGroup_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group__3__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__0"
    // InternalSpinCAD.g:5512:1: rule__SliderLabelCheckBox__Group_3__0 : rule__SliderLabelCheckBox__Group_3__0__Impl rule__SliderLabelCheckBox__Group_3__1 ;
    public final void rule__SliderLabelCheckBox__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5516:1: ( rule__SliderLabelCheckBox__Group_3__0__Impl rule__SliderLabelCheckBox__Group_3__1 )
            // InternalSpinCAD.g:5517:2: rule__SliderLabelCheckBox__Group_3__0__Impl rule__SliderLabelCheckBox__Group_3__1
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelCheckBox__Group_3__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__0"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__0__Impl"
    // InternalSpinCAD.g:5524:1: rule__SliderLabelCheckBox__Group_3__0__Impl : ( ( rule__SliderLabelCheckBox__MinValAssignment_3_0 ) ) ;
    public final void rule__SliderLabelCheckBox__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5528:1: ( ( ( rule__SliderLabelCheckBox__MinValAssignment_3_0 ) ) )
            // InternalSpinCAD.g:5529:1: ( ( rule__SliderLabelCheckBox__MinValAssignment_3_0 ) )
            {
            // InternalSpinCAD.g:5529:1: ( ( rule__SliderLabelCheckBox__MinValAssignment_3_0 ) )
            // InternalSpinCAD.g:5530:1: ( rule__SliderLabelCheckBox__MinValAssignment_3_0 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMinValAssignment_3_0()); 
            // InternalSpinCAD.g:5531:1: ( rule__SliderLabelCheckBox__MinValAssignment_3_0 )
            // InternalSpinCAD.g:5531:2: rule__SliderLabelCheckBox__MinValAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__MinValAssignment_3_0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMinValAssignment_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__0__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__1"
    // InternalSpinCAD.g:5541:1: rule__SliderLabelCheckBox__Group_3__1 : rule__SliderLabelCheckBox__Group_3__1__Impl rule__SliderLabelCheckBox__Group_3__2 ;
    public final void rule__SliderLabelCheckBox__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5545:1: ( rule__SliderLabelCheckBox__Group_3__1__Impl rule__SliderLabelCheckBox__Group_3__2 )
            // InternalSpinCAD.g:5546:2: rule__SliderLabelCheckBox__Group_3__1__Impl rule__SliderLabelCheckBox__Group_3__2
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelCheckBox__Group_3__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__1"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__1__Impl"
    // InternalSpinCAD.g:5553:1: rule__SliderLabelCheckBox__Group_3__1__Impl : ( ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 ) ) ;
    public final void rule__SliderLabelCheckBox__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5557:1: ( ( ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 ) ) )
            // InternalSpinCAD.g:5558:1: ( ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 ) )
            {
            // InternalSpinCAD.g:5558:1: ( ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 ) )
            // InternalSpinCAD.g:5559:1: ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMaxValAssignment_3_1()); 
            // InternalSpinCAD.g:5560:1: ( rule__SliderLabelCheckBox__MaxValAssignment_3_1 )
            // InternalSpinCAD.g:5560:2: rule__SliderLabelCheckBox__MaxValAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__MaxValAssignment_3_1();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMaxValAssignment_3_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__1__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__2"
    // InternalSpinCAD.g:5570:1: rule__SliderLabelCheckBox__Group_3__2 : rule__SliderLabelCheckBox__Group_3__2__Impl rule__SliderLabelCheckBox__Group_3__3 ;
    public final void rule__SliderLabelCheckBox__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5574:1: ( rule__SliderLabelCheckBox__Group_3__2__Impl rule__SliderLabelCheckBox__Group_3__3 )
            // InternalSpinCAD.g:5575:2: rule__SliderLabelCheckBox__Group_3__2__Impl rule__SliderLabelCheckBox__Group_3__3
            {
            pushFollow(FOLLOW_10);
            rule__SliderLabelCheckBox__Group_3__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__2"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__2__Impl"
    // InternalSpinCAD.g:5582:1: rule__SliderLabelCheckBox__Group_3__2__Impl : ( ( rule__SliderLabelCheckBox__InitValAssignment_3_2 ) ) ;
    public final void rule__SliderLabelCheckBox__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5586:1: ( ( ( rule__SliderLabelCheckBox__InitValAssignment_3_2 ) ) )
            // InternalSpinCAD.g:5587:1: ( ( rule__SliderLabelCheckBox__InitValAssignment_3_2 ) )
            {
            // InternalSpinCAD.g:5587:1: ( ( rule__SliderLabelCheckBox__InitValAssignment_3_2 ) )
            // InternalSpinCAD.g:5588:1: ( rule__SliderLabelCheckBox__InitValAssignment_3_2 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getInitValAssignment_3_2()); 
            // InternalSpinCAD.g:5589:1: ( rule__SliderLabelCheckBox__InitValAssignment_3_2 )
            // InternalSpinCAD.g:5589:2: rule__SliderLabelCheckBox__InitValAssignment_3_2
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__InitValAssignment_3_2();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getInitValAssignment_3_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__2__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__3"
    // InternalSpinCAD.g:5599:1: rule__SliderLabelCheckBox__Group_3__3 : rule__SliderLabelCheckBox__Group_3__3__Impl rule__SliderLabelCheckBox__Group_3__4 ;
    public final void rule__SliderLabelCheckBox__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5603:1: ( rule__SliderLabelCheckBox__Group_3__3__Impl rule__SliderLabelCheckBox__Group_3__4 )
            // InternalSpinCAD.g:5604:2: rule__SliderLabelCheckBox__Group_3__3__Impl rule__SliderLabelCheckBox__Group_3__4
            {
            pushFollow(FOLLOW_11);
            rule__SliderLabelCheckBox__Group_3__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__3"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__3__Impl"
    // InternalSpinCAD.g:5611:1: rule__SliderLabelCheckBox__Group_3__3__Impl : ( ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 ) ) ;
    public final void rule__SliderLabelCheckBox__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5615:1: ( ( ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 ) ) )
            // InternalSpinCAD.g:5616:1: ( ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 ) )
            {
            // InternalSpinCAD.g:5616:1: ( ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 ) )
            // InternalSpinCAD.g:5617:1: ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMultiplierAssignment_3_3()); 
            // InternalSpinCAD.g:5618:1: ( rule__SliderLabelCheckBox__MultiplierAssignment_3_3 )
            // InternalSpinCAD.g:5618:2: rule__SliderLabelCheckBox__MultiplierAssignment_3_3
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__MultiplierAssignment_3_3();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMultiplierAssignment_3_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__3__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__4"
    // InternalSpinCAD.g:5628:1: rule__SliderLabelCheckBox__Group_3__4 : rule__SliderLabelCheckBox__Group_3__4__Impl rule__SliderLabelCheckBox__Group_3__5 ;
    public final void rule__SliderLabelCheckBox__Group_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5632:1: ( rule__SliderLabelCheckBox__Group_3__4__Impl rule__SliderLabelCheckBox__Group_3__5 )
            // InternalSpinCAD.g:5633:2: rule__SliderLabelCheckBox__Group_3__4__Impl rule__SliderLabelCheckBox__Group_3__5
            {
            pushFollow(FOLLOW_9);
            rule__SliderLabelCheckBox__Group_3__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__4"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__4__Impl"
    // InternalSpinCAD.g:5640:1: rule__SliderLabelCheckBox__Group_3__4__Impl : ( ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 ) ) ;
    public final void rule__SliderLabelCheckBox__Group_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5644:1: ( ( ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 ) ) )
            // InternalSpinCAD.g:5645:1: ( ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 ) )
            {
            // InternalSpinCAD.g:5645:1: ( ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 ) )
            // InternalSpinCAD.g:5646:1: ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getPrecisionAssignment_3_4()); 
            // InternalSpinCAD.g:5647:1: ( rule__SliderLabelCheckBox__PrecisionAssignment_3_4 )
            // InternalSpinCAD.g:5647:2: rule__SliderLabelCheckBox__PrecisionAssignment_3_4
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__PrecisionAssignment_3_4();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getPrecisionAssignment_3_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__4__Impl"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__5"
    // InternalSpinCAD.g:5657:1: rule__SliderLabelCheckBox__Group_3__5 : rule__SliderLabelCheckBox__Group_3__5__Impl ;
    public final void rule__SliderLabelCheckBox__Group_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5661:1: ( rule__SliderLabelCheckBox__Group_3__5__Impl )
            // InternalSpinCAD.g:5662:2: rule__SliderLabelCheckBox__Group_3__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__Group_3__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__5"


    // $ANTLR start "rule__SliderLabelCheckBox__Group_3__5__Impl"
    // InternalSpinCAD.g:5668:1: rule__SliderLabelCheckBox__Group_3__5__Impl : ( ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )? ) ;
    public final void rule__SliderLabelCheckBox__Group_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5672:1: ( ( ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )? ) )
            // InternalSpinCAD.g:5673:1: ( ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )? )
            {
            // InternalSpinCAD.g:5673:1: ( ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )? )
            // InternalSpinCAD.g:5674:1: ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )?
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getOptionAssignment_3_5()); 
            // InternalSpinCAD.g:5675:1: ( rule__SliderLabelCheckBox__OptionAssignment_3_5 )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==RULE_ID) ) {
                int LA45_1 = input.LA(2);

                if ( (LA45_1==EOF||LA45_1==RULE_ID||LA45_1==RULE_SC_COMMENT||(LA45_1>=25 && LA45_1<=37)||(LA45_1>=39 && LA45_1<=61)||(LA45_1>=63 && LA45_1<=89)) ) {
                    alt45=1;
                }
            }
            switch (alt45) {
                case 1 :
                    // InternalSpinCAD.g:5675:2: rule__SliderLabelCheckBox__OptionAssignment_3_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__SliderLabelCheckBox__OptionAssignment_3_5();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getOptionAssignment_3_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__Group_3__5__Impl"


    // $ANTLR start "rule__SpinCheckBox__Group__0"
    // InternalSpinCAD.g:5697:1: rule__SpinCheckBox__Group__0 : rule__SpinCheckBox__Group__0__Impl rule__SpinCheckBox__Group__1 ;
    public final void rule__SpinCheckBox__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5701:1: ( rule__SpinCheckBox__Group__0__Impl rule__SpinCheckBox__Group__1 )
            // InternalSpinCAD.g:5702:2: rule__SpinCheckBox__Group__0__Impl rule__SpinCheckBox__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinCheckBox__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__0"


    // $ANTLR start "rule__SpinCheckBox__Group__0__Impl"
    // InternalSpinCAD.g:5709:1: rule__SpinCheckBox__Group__0__Impl : ( '@checkbox' ) ;
    public final void rule__SpinCheckBox__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5713:1: ( ( '@checkbox' ) )
            // InternalSpinCAD.g:5714:1: ( '@checkbox' )
            {
            // InternalSpinCAD.g:5714:1: ( '@checkbox' )
            // InternalSpinCAD.g:5715:1: '@checkbox'
            {
             before(grammarAccess.getSpinCheckBoxAccess().getCheckboxKeyword_0()); 
            match(input,33,FOLLOW_2); 
             after(grammarAccess.getSpinCheckBoxAccess().getCheckboxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__0__Impl"


    // $ANTLR start "rule__SpinCheckBox__Group__1"
    // InternalSpinCAD.g:5728:1: rule__SpinCheckBox__Group__1 : rule__SpinCheckBox__Group__1__Impl rule__SpinCheckBox__Group__2 ;
    public final void rule__SpinCheckBox__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5732:1: ( rule__SpinCheckBox__Group__1__Impl rule__SpinCheckBox__Group__2 )
            // InternalSpinCAD.g:5733:2: rule__SpinCheckBox__Group__1__Impl rule__SpinCheckBox__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__SpinCheckBox__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__1"


    // $ANTLR start "rule__SpinCheckBox__Group__1__Impl"
    // InternalSpinCAD.g:5740:1: rule__SpinCheckBox__Group__1__Impl : ( ( rule__SpinCheckBox__EnameAssignment_1 ) ) ;
    public final void rule__SpinCheckBox__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5744:1: ( ( ( rule__SpinCheckBox__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:5745:1: ( ( rule__SpinCheckBox__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:5745:1: ( ( rule__SpinCheckBox__EnameAssignment_1 ) )
            // InternalSpinCAD.g:5746:1: ( rule__SpinCheckBox__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinCheckBoxAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:5747:1: ( rule__SpinCheckBox__EnameAssignment_1 )
            // InternalSpinCAD.g:5747:2: rule__SpinCheckBox__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinCheckBoxAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__1__Impl"


    // $ANTLR start "rule__SpinCheckBox__Group__2"
    // InternalSpinCAD.g:5757:1: rule__SpinCheckBox__Group__2 : rule__SpinCheckBox__Group__2__Impl ;
    public final void rule__SpinCheckBox__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5761:1: ( rule__SpinCheckBox__Group__2__Impl )
            // InternalSpinCAD.g:5762:2: rule__SpinCheckBox__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__2"


    // $ANTLR start "rule__SpinCheckBox__Group__2__Impl"
    // InternalSpinCAD.g:5768:1: rule__SpinCheckBox__Group__2__Impl : ( ( rule__SpinCheckBox__ControlNameAssignment_2 ) ) ;
    public final void rule__SpinCheckBox__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5772:1: ( ( ( rule__SpinCheckBox__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:5773:1: ( ( rule__SpinCheckBox__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:5773:1: ( ( rule__SpinCheckBox__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:5774:1: ( rule__SpinCheckBox__ControlNameAssignment_2 )
            {
             before(grammarAccess.getSpinCheckBoxAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:5775:1: ( rule__SpinCheckBox__ControlNameAssignment_2 )
            // InternalSpinCAD.g:5775:2: rule__SpinCheckBox__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinCheckBoxAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__Group__2__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__0"
    // InternalSpinCAD.g:5791:1: rule__LogFreqSliderLabel__Group__0 : rule__LogFreqSliderLabel__Group__0__Impl rule__LogFreqSliderLabel__Group__1 ;
    public final void rule__LogFreqSliderLabel__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5795:1: ( rule__LogFreqSliderLabel__Group__0__Impl rule__LogFreqSliderLabel__Group__1 )
            // InternalSpinCAD.g:5796:2: rule__LogFreqSliderLabel__Group__0__Impl rule__LogFreqSliderLabel__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__LogFreqSliderLabel__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__0"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__0__Impl"
    // InternalSpinCAD.g:5803:1: rule__LogFreqSliderLabel__Group__0__Impl : ( '@logFreqSliderLabel' ) ;
    public final void rule__LogFreqSliderLabel__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5807:1: ( ( '@logFreqSliderLabel' ) )
            // InternalSpinCAD.g:5808:1: ( '@logFreqSliderLabel' )
            {
            // InternalSpinCAD.g:5808:1: ( '@logFreqSliderLabel' )
            // InternalSpinCAD.g:5809:1: '@logFreqSliderLabel'
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getLogFreqSliderLabelKeyword_0()); 
            match(input,34,FOLLOW_2); 
             after(grammarAccess.getLogFreqSliderLabelAccess().getLogFreqSliderLabelKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__0__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__1"
    // InternalSpinCAD.g:5822:1: rule__LogFreqSliderLabel__Group__1 : rule__LogFreqSliderLabel__Group__1__Impl rule__LogFreqSliderLabel__Group__2 ;
    public final void rule__LogFreqSliderLabel__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5826:1: ( rule__LogFreqSliderLabel__Group__1__Impl rule__LogFreqSliderLabel__Group__2 )
            // InternalSpinCAD.g:5827:2: rule__LogFreqSliderLabel__Group__1__Impl rule__LogFreqSliderLabel__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__LogFreqSliderLabel__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__1"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__1__Impl"
    // InternalSpinCAD.g:5834:1: rule__LogFreqSliderLabel__Group__1__Impl : ( ( rule__LogFreqSliderLabel__EnameAssignment_1 ) ) ;
    public final void rule__LogFreqSliderLabel__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5838:1: ( ( ( rule__LogFreqSliderLabel__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:5839:1: ( ( rule__LogFreqSliderLabel__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:5839:1: ( ( rule__LogFreqSliderLabel__EnameAssignment_1 ) )
            // InternalSpinCAD.g:5840:1: ( rule__LogFreqSliderLabel__EnameAssignment_1 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:5841:1: ( rule__LogFreqSliderLabel__EnameAssignment_1 )
            // InternalSpinCAD.g:5841:2: rule__LogFreqSliderLabel__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__1__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__2"
    // InternalSpinCAD.g:5851:1: rule__LogFreqSliderLabel__Group__2 : rule__LogFreqSliderLabel__Group__2__Impl rule__LogFreqSliderLabel__Group__3 ;
    public final void rule__LogFreqSliderLabel__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5855:1: ( rule__LogFreqSliderLabel__Group__2__Impl rule__LogFreqSliderLabel__Group__3 )
            // InternalSpinCAD.g:5856:2: rule__LogFreqSliderLabel__Group__2__Impl rule__LogFreqSliderLabel__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__LogFreqSliderLabel__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__2"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__2__Impl"
    // InternalSpinCAD.g:5863:1: rule__LogFreqSliderLabel__Group__2__Impl : ( ( rule__LogFreqSliderLabel__ControlNameAssignment_2 ) ) ;
    public final void rule__LogFreqSliderLabel__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5867:1: ( ( ( rule__LogFreqSliderLabel__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:5868:1: ( ( rule__LogFreqSliderLabel__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:5868:1: ( ( rule__LogFreqSliderLabel__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:5869:1: ( rule__LogFreqSliderLabel__ControlNameAssignment_2 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:5870:1: ( rule__LogFreqSliderLabel__ControlNameAssignment_2 )
            // InternalSpinCAD.g:5870:2: rule__LogFreqSliderLabel__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__2__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__3"
    // InternalSpinCAD.g:5880:1: rule__LogFreqSliderLabel__Group__3 : rule__LogFreqSliderLabel__Group__3__Impl ;
    public final void rule__LogFreqSliderLabel__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5884:1: ( rule__LogFreqSliderLabel__Group__3__Impl )
            // InternalSpinCAD.g:5885:2: rule__LogFreqSliderLabel__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__3"


    // $ANTLR start "rule__LogFreqSliderLabel__Group__3__Impl"
    // InternalSpinCAD.g:5891:1: rule__LogFreqSliderLabel__Group__3__Impl : ( ( rule__LogFreqSliderLabel__Group_3__0 )? ) ;
    public final void rule__LogFreqSliderLabel__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5895:1: ( ( ( rule__LogFreqSliderLabel__Group_3__0 )? ) )
            // InternalSpinCAD.g:5896:1: ( ( rule__LogFreqSliderLabel__Group_3__0 )? )
            {
            // InternalSpinCAD.g:5896:1: ( ( rule__LogFreqSliderLabel__Group_3__0 )? )
            // InternalSpinCAD.g:5897:1: ( rule__LogFreqSliderLabel__Group_3__0 )?
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getGroup_3()); 
            // InternalSpinCAD.g:5898:1: ( rule__LogFreqSliderLabel__Group_3__0 )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==RULE_INT||LA46_0==16) ) {
                alt46=1;
            }
            else if ( (LA46_0==RULE_ID) ) {
                int LA46_2 = input.LA(2);

                if ( (LA46_2==RULE_ID||LA46_2==RULE_INT||LA46_2==16) ) {
                    alt46=1;
                }
            }
            switch (alt46) {
                case 1 :
                    // InternalSpinCAD.g:5898:2: rule__LogFreqSliderLabel__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__LogFreqSliderLabel__Group_3__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getGroup_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group__3__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__0"
    // InternalSpinCAD.g:5916:1: rule__LogFreqSliderLabel__Group_3__0 : rule__LogFreqSliderLabel__Group_3__0__Impl rule__LogFreqSliderLabel__Group_3__1 ;
    public final void rule__LogFreqSliderLabel__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5920:1: ( rule__LogFreqSliderLabel__Group_3__0__Impl rule__LogFreqSliderLabel__Group_3__1 )
            // InternalSpinCAD.g:5921:2: rule__LogFreqSliderLabel__Group_3__0__Impl rule__LogFreqSliderLabel__Group_3__1
            {
            pushFollow(FOLLOW_10);
            rule__LogFreqSliderLabel__Group_3__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__0"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__0__Impl"
    // InternalSpinCAD.g:5928:1: rule__LogFreqSliderLabel__Group_3__0__Impl : ( ( rule__LogFreqSliderLabel__MinValAssignment_3_0 ) ) ;
    public final void rule__LogFreqSliderLabel__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5932:1: ( ( ( rule__LogFreqSliderLabel__MinValAssignment_3_0 ) ) )
            // InternalSpinCAD.g:5933:1: ( ( rule__LogFreqSliderLabel__MinValAssignment_3_0 ) )
            {
            // InternalSpinCAD.g:5933:1: ( ( rule__LogFreqSliderLabel__MinValAssignment_3_0 ) )
            // InternalSpinCAD.g:5934:1: ( rule__LogFreqSliderLabel__MinValAssignment_3_0 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMinValAssignment_3_0()); 
            // InternalSpinCAD.g:5935:1: ( rule__LogFreqSliderLabel__MinValAssignment_3_0 )
            // InternalSpinCAD.g:5935:2: rule__LogFreqSliderLabel__MinValAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__MinValAssignment_3_0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getMinValAssignment_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__0__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__1"
    // InternalSpinCAD.g:5945:1: rule__LogFreqSliderLabel__Group_3__1 : rule__LogFreqSliderLabel__Group_3__1__Impl rule__LogFreqSliderLabel__Group_3__2 ;
    public final void rule__LogFreqSliderLabel__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5949:1: ( rule__LogFreqSliderLabel__Group_3__1__Impl rule__LogFreqSliderLabel__Group_3__2 )
            // InternalSpinCAD.g:5950:2: rule__LogFreqSliderLabel__Group_3__1__Impl rule__LogFreqSliderLabel__Group_3__2
            {
            pushFollow(FOLLOW_10);
            rule__LogFreqSliderLabel__Group_3__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__1"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__1__Impl"
    // InternalSpinCAD.g:5957:1: rule__LogFreqSliderLabel__Group_3__1__Impl : ( ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 ) ) ;
    public final void rule__LogFreqSliderLabel__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5961:1: ( ( ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 ) ) )
            // InternalSpinCAD.g:5962:1: ( ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 ) )
            {
            // InternalSpinCAD.g:5962:1: ( ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 ) )
            // InternalSpinCAD.g:5963:1: ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMaxValAssignment_3_1()); 
            // InternalSpinCAD.g:5964:1: ( rule__LogFreqSliderLabel__MaxValAssignment_3_1 )
            // InternalSpinCAD.g:5964:2: rule__LogFreqSliderLabel__MaxValAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__MaxValAssignment_3_1();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getMaxValAssignment_3_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__1__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__2"
    // InternalSpinCAD.g:5974:1: rule__LogFreqSliderLabel__Group_3__2 : rule__LogFreqSliderLabel__Group_3__2__Impl rule__LogFreqSliderLabel__Group_3__3 ;
    public final void rule__LogFreqSliderLabel__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5978:1: ( rule__LogFreqSliderLabel__Group_3__2__Impl rule__LogFreqSliderLabel__Group_3__3 )
            // InternalSpinCAD.g:5979:2: rule__LogFreqSliderLabel__Group_3__2__Impl rule__LogFreqSliderLabel__Group_3__3
            {
            pushFollow(FOLLOW_10);
            rule__LogFreqSliderLabel__Group_3__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__2"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__2__Impl"
    // InternalSpinCAD.g:5986:1: rule__LogFreqSliderLabel__Group_3__2__Impl : ( ( rule__LogFreqSliderLabel__InitValAssignment_3_2 ) ) ;
    public final void rule__LogFreqSliderLabel__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:5990:1: ( ( ( rule__LogFreqSliderLabel__InitValAssignment_3_2 ) ) )
            // InternalSpinCAD.g:5991:1: ( ( rule__LogFreqSliderLabel__InitValAssignment_3_2 ) )
            {
            // InternalSpinCAD.g:5991:1: ( ( rule__LogFreqSliderLabel__InitValAssignment_3_2 ) )
            // InternalSpinCAD.g:5992:1: ( rule__LogFreqSliderLabel__InitValAssignment_3_2 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getInitValAssignment_3_2()); 
            // InternalSpinCAD.g:5993:1: ( rule__LogFreqSliderLabel__InitValAssignment_3_2 )
            // InternalSpinCAD.g:5993:2: rule__LogFreqSliderLabel__InitValAssignment_3_2
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__InitValAssignment_3_2();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getInitValAssignment_3_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__2__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__3"
    // InternalSpinCAD.g:6003:1: rule__LogFreqSliderLabel__Group_3__3 : rule__LogFreqSliderLabel__Group_3__3__Impl rule__LogFreqSliderLabel__Group_3__4 ;
    public final void rule__LogFreqSliderLabel__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6007:1: ( rule__LogFreqSliderLabel__Group_3__3__Impl rule__LogFreqSliderLabel__Group_3__4 )
            // InternalSpinCAD.g:6008:2: rule__LogFreqSliderLabel__Group_3__3__Impl rule__LogFreqSliderLabel__Group_3__4
            {
            pushFollow(FOLLOW_11);
            rule__LogFreqSliderLabel__Group_3__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__3"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__3__Impl"
    // InternalSpinCAD.g:6015:1: rule__LogFreqSliderLabel__Group_3__3__Impl : ( ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 ) ) ;
    public final void rule__LogFreqSliderLabel__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6019:1: ( ( ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 ) ) )
            // InternalSpinCAD.g:6020:1: ( ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 ) )
            {
            // InternalSpinCAD.g:6020:1: ( ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 ) )
            // InternalSpinCAD.g:6021:1: ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMultiplierAssignment_3_3()); 
            // InternalSpinCAD.g:6022:1: ( rule__LogFreqSliderLabel__MultiplierAssignment_3_3 )
            // InternalSpinCAD.g:6022:2: rule__LogFreqSliderLabel__MultiplierAssignment_3_3
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__MultiplierAssignment_3_3();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getMultiplierAssignment_3_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__3__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__4"
    // InternalSpinCAD.g:6032:1: rule__LogFreqSliderLabel__Group_3__4 : rule__LogFreqSliderLabel__Group_3__4__Impl rule__LogFreqSliderLabel__Group_3__5 ;
    public final void rule__LogFreqSliderLabel__Group_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6036:1: ( rule__LogFreqSliderLabel__Group_3__4__Impl rule__LogFreqSliderLabel__Group_3__5 )
            // InternalSpinCAD.g:6037:2: rule__LogFreqSliderLabel__Group_3__4__Impl rule__LogFreqSliderLabel__Group_3__5
            {
            pushFollow(FOLLOW_9);
            rule__LogFreqSliderLabel__Group_3__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__4"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__4__Impl"
    // InternalSpinCAD.g:6044:1: rule__LogFreqSliderLabel__Group_3__4__Impl : ( ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 ) ) ;
    public final void rule__LogFreqSliderLabel__Group_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6048:1: ( ( ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 ) ) )
            // InternalSpinCAD.g:6049:1: ( ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 ) )
            {
            // InternalSpinCAD.g:6049:1: ( ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 ) )
            // InternalSpinCAD.g:6050:1: ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getPrecisionAssignment_3_4()); 
            // InternalSpinCAD.g:6051:1: ( rule__LogFreqSliderLabel__PrecisionAssignment_3_4 )
            // InternalSpinCAD.g:6051:2: rule__LogFreqSliderLabel__PrecisionAssignment_3_4
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__PrecisionAssignment_3_4();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getPrecisionAssignment_3_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__4__Impl"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__5"
    // InternalSpinCAD.g:6061:1: rule__LogFreqSliderLabel__Group_3__5 : rule__LogFreqSliderLabel__Group_3__5__Impl ;
    public final void rule__LogFreqSliderLabel__Group_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6065:1: ( rule__LogFreqSliderLabel__Group_3__5__Impl )
            // InternalSpinCAD.g:6066:2: rule__LogFreqSliderLabel__Group_3__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__Group_3__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__5"


    // $ANTLR start "rule__LogFreqSliderLabel__Group_3__5__Impl"
    // InternalSpinCAD.g:6072:1: rule__LogFreqSliderLabel__Group_3__5__Impl : ( ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )? ) ;
    public final void rule__LogFreqSliderLabel__Group_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6076:1: ( ( ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )? ) )
            // InternalSpinCAD.g:6077:1: ( ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )? )
            {
            // InternalSpinCAD.g:6077:1: ( ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )? )
            // InternalSpinCAD.g:6078:1: ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )?
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getOptionAssignment_3_5()); 
            // InternalSpinCAD.g:6079:1: ( rule__LogFreqSliderLabel__OptionAssignment_3_5 )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==RULE_ID) ) {
                int LA47_1 = input.LA(2);

                if ( (LA47_1==EOF||LA47_1==RULE_ID||LA47_1==RULE_SC_COMMENT||(LA47_1>=25 && LA47_1<=37)||(LA47_1>=39 && LA47_1<=61)||(LA47_1>=63 && LA47_1<=89)) ) {
                    alt47=1;
                }
            }
            switch (alt47) {
                case 1 :
                    // InternalSpinCAD.g:6079:2: rule__LogFreqSliderLabel__OptionAssignment_3_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__LogFreqSliderLabel__OptionAssignment_3_5();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getOptionAssignment_3_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__Group_3__5__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__0"
    // InternalSpinCAD.g:6101:1: rule__LogFreq2SliderLabel__Group__0 : rule__LogFreq2SliderLabel__Group__0__Impl rule__LogFreq2SliderLabel__Group__1 ;
    public final void rule__LogFreq2SliderLabel__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6105:1: ( rule__LogFreq2SliderLabel__Group__0__Impl rule__LogFreq2SliderLabel__Group__1 )
            // InternalSpinCAD.g:6106:2: rule__LogFreq2SliderLabel__Group__0__Impl rule__LogFreq2SliderLabel__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__LogFreq2SliderLabel__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__0"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__0__Impl"
    // InternalSpinCAD.g:6113:1: rule__LogFreq2SliderLabel__Group__0__Impl : ( '@logFreq2SliderLabel' ) ;
    public final void rule__LogFreq2SliderLabel__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6117:1: ( ( '@logFreq2SliderLabel' ) )
            // InternalSpinCAD.g:6118:1: ( '@logFreq2SliderLabel' )
            {
            // InternalSpinCAD.g:6118:1: ( '@logFreq2SliderLabel' )
            // InternalSpinCAD.g:6119:1: '@logFreq2SliderLabel'
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getLogFreq2SliderLabelKeyword_0()); 
            match(input,35,FOLLOW_2); 
             after(grammarAccess.getLogFreq2SliderLabelAccess().getLogFreq2SliderLabelKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__0__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__1"
    // InternalSpinCAD.g:6132:1: rule__LogFreq2SliderLabel__Group__1 : rule__LogFreq2SliderLabel__Group__1__Impl rule__LogFreq2SliderLabel__Group__2 ;
    public final void rule__LogFreq2SliderLabel__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6136:1: ( rule__LogFreq2SliderLabel__Group__1__Impl rule__LogFreq2SliderLabel__Group__2 )
            // InternalSpinCAD.g:6137:2: rule__LogFreq2SliderLabel__Group__1__Impl rule__LogFreq2SliderLabel__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__LogFreq2SliderLabel__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__1"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__1__Impl"
    // InternalSpinCAD.g:6144:1: rule__LogFreq2SliderLabel__Group__1__Impl : ( ( rule__LogFreq2SliderLabel__EnameAssignment_1 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6148:1: ( ( ( rule__LogFreq2SliderLabel__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:6149:1: ( ( rule__LogFreq2SliderLabel__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:6149:1: ( ( rule__LogFreq2SliderLabel__EnameAssignment_1 ) )
            // InternalSpinCAD.g:6150:1: ( rule__LogFreq2SliderLabel__EnameAssignment_1 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:6151:1: ( rule__LogFreq2SliderLabel__EnameAssignment_1 )
            // InternalSpinCAD.g:6151:2: rule__LogFreq2SliderLabel__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__1__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__2"
    // InternalSpinCAD.g:6161:1: rule__LogFreq2SliderLabel__Group__2 : rule__LogFreq2SliderLabel__Group__2__Impl rule__LogFreq2SliderLabel__Group__3 ;
    public final void rule__LogFreq2SliderLabel__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6165:1: ( rule__LogFreq2SliderLabel__Group__2__Impl rule__LogFreq2SliderLabel__Group__3 )
            // InternalSpinCAD.g:6166:2: rule__LogFreq2SliderLabel__Group__2__Impl rule__LogFreq2SliderLabel__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__LogFreq2SliderLabel__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__2"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__2__Impl"
    // InternalSpinCAD.g:6173:1: rule__LogFreq2SliderLabel__Group__2__Impl : ( ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6177:1: ( ( ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:6178:1: ( ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:6178:1: ( ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:6179:1: ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:6180:1: ( rule__LogFreq2SliderLabel__ControlNameAssignment_2 )
            // InternalSpinCAD.g:6180:2: rule__LogFreq2SliderLabel__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__2__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__3"
    // InternalSpinCAD.g:6190:1: rule__LogFreq2SliderLabel__Group__3 : rule__LogFreq2SliderLabel__Group__3__Impl ;
    public final void rule__LogFreq2SliderLabel__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6194:1: ( rule__LogFreq2SliderLabel__Group__3__Impl )
            // InternalSpinCAD.g:6195:2: rule__LogFreq2SliderLabel__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__3"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group__3__Impl"
    // InternalSpinCAD.g:6201:1: rule__LogFreq2SliderLabel__Group__3__Impl : ( ( rule__LogFreq2SliderLabel__Group_3__0 )? ) ;
    public final void rule__LogFreq2SliderLabel__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6205:1: ( ( ( rule__LogFreq2SliderLabel__Group_3__0 )? ) )
            // InternalSpinCAD.g:6206:1: ( ( rule__LogFreq2SliderLabel__Group_3__0 )? )
            {
            // InternalSpinCAD.g:6206:1: ( ( rule__LogFreq2SliderLabel__Group_3__0 )? )
            // InternalSpinCAD.g:6207:1: ( rule__LogFreq2SliderLabel__Group_3__0 )?
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getGroup_3()); 
            // InternalSpinCAD.g:6208:1: ( rule__LogFreq2SliderLabel__Group_3__0 )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==RULE_INT||LA48_0==16) ) {
                alt48=1;
            }
            else if ( (LA48_0==RULE_ID) ) {
                int LA48_2 = input.LA(2);

                if ( (LA48_2==RULE_ID||LA48_2==RULE_INT||LA48_2==16) ) {
                    alt48=1;
                }
            }
            switch (alt48) {
                case 1 :
                    // InternalSpinCAD.g:6208:2: rule__LogFreq2SliderLabel__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__LogFreq2SliderLabel__Group_3__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getGroup_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group__3__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__0"
    // InternalSpinCAD.g:6226:1: rule__LogFreq2SliderLabel__Group_3__0 : rule__LogFreq2SliderLabel__Group_3__0__Impl rule__LogFreq2SliderLabel__Group_3__1 ;
    public final void rule__LogFreq2SliderLabel__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6230:1: ( rule__LogFreq2SliderLabel__Group_3__0__Impl rule__LogFreq2SliderLabel__Group_3__1 )
            // InternalSpinCAD.g:6231:2: rule__LogFreq2SliderLabel__Group_3__0__Impl rule__LogFreq2SliderLabel__Group_3__1
            {
            pushFollow(FOLLOW_10);
            rule__LogFreq2SliderLabel__Group_3__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__0"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__0__Impl"
    // InternalSpinCAD.g:6238:1: rule__LogFreq2SliderLabel__Group_3__0__Impl : ( ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6242:1: ( ( ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 ) ) )
            // InternalSpinCAD.g:6243:1: ( ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 ) )
            {
            // InternalSpinCAD.g:6243:1: ( ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 ) )
            // InternalSpinCAD.g:6244:1: ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMinValAssignment_3_0()); 
            // InternalSpinCAD.g:6245:1: ( rule__LogFreq2SliderLabel__MinValAssignment_3_0 )
            // InternalSpinCAD.g:6245:2: rule__LogFreq2SliderLabel__MinValAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__MinValAssignment_3_0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMinValAssignment_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__0__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__1"
    // InternalSpinCAD.g:6255:1: rule__LogFreq2SliderLabel__Group_3__1 : rule__LogFreq2SliderLabel__Group_3__1__Impl rule__LogFreq2SliderLabel__Group_3__2 ;
    public final void rule__LogFreq2SliderLabel__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6259:1: ( rule__LogFreq2SliderLabel__Group_3__1__Impl rule__LogFreq2SliderLabel__Group_3__2 )
            // InternalSpinCAD.g:6260:2: rule__LogFreq2SliderLabel__Group_3__1__Impl rule__LogFreq2SliderLabel__Group_3__2
            {
            pushFollow(FOLLOW_10);
            rule__LogFreq2SliderLabel__Group_3__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__1"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__1__Impl"
    // InternalSpinCAD.g:6267:1: rule__LogFreq2SliderLabel__Group_3__1__Impl : ( ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6271:1: ( ( ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 ) ) )
            // InternalSpinCAD.g:6272:1: ( ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 ) )
            {
            // InternalSpinCAD.g:6272:1: ( ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 ) )
            // InternalSpinCAD.g:6273:1: ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMaxValAssignment_3_1()); 
            // InternalSpinCAD.g:6274:1: ( rule__LogFreq2SliderLabel__MaxValAssignment_3_1 )
            // InternalSpinCAD.g:6274:2: rule__LogFreq2SliderLabel__MaxValAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__MaxValAssignment_3_1();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMaxValAssignment_3_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__1__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__2"
    // InternalSpinCAD.g:6284:1: rule__LogFreq2SliderLabel__Group_3__2 : rule__LogFreq2SliderLabel__Group_3__2__Impl rule__LogFreq2SliderLabel__Group_3__3 ;
    public final void rule__LogFreq2SliderLabel__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6288:1: ( rule__LogFreq2SliderLabel__Group_3__2__Impl rule__LogFreq2SliderLabel__Group_3__3 )
            // InternalSpinCAD.g:6289:2: rule__LogFreq2SliderLabel__Group_3__2__Impl rule__LogFreq2SliderLabel__Group_3__3
            {
            pushFollow(FOLLOW_10);
            rule__LogFreq2SliderLabel__Group_3__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__2"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__2__Impl"
    // InternalSpinCAD.g:6296:1: rule__LogFreq2SliderLabel__Group_3__2__Impl : ( ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6300:1: ( ( ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 ) ) )
            // InternalSpinCAD.g:6301:1: ( ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 ) )
            {
            // InternalSpinCAD.g:6301:1: ( ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 ) )
            // InternalSpinCAD.g:6302:1: ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getInitValAssignment_3_2()); 
            // InternalSpinCAD.g:6303:1: ( rule__LogFreq2SliderLabel__InitValAssignment_3_2 )
            // InternalSpinCAD.g:6303:2: rule__LogFreq2SliderLabel__InitValAssignment_3_2
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__InitValAssignment_3_2();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getInitValAssignment_3_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__2__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__3"
    // InternalSpinCAD.g:6313:1: rule__LogFreq2SliderLabel__Group_3__3 : rule__LogFreq2SliderLabel__Group_3__3__Impl rule__LogFreq2SliderLabel__Group_3__4 ;
    public final void rule__LogFreq2SliderLabel__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6317:1: ( rule__LogFreq2SliderLabel__Group_3__3__Impl rule__LogFreq2SliderLabel__Group_3__4 )
            // InternalSpinCAD.g:6318:2: rule__LogFreq2SliderLabel__Group_3__3__Impl rule__LogFreq2SliderLabel__Group_3__4
            {
            pushFollow(FOLLOW_11);
            rule__LogFreq2SliderLabel__Group_3__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__3"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__3__Impl"
    // InternalSpinCAD.g:6325:1: rule__LogFreq2SliderLabel__Group_3__3__Impl : ( ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6329:1: ( ( ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 ) ) )
            // InternalSpinCAD.g:6330:1: ( ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 ) )
            {
            // InternalSpinCAD.g:6330:1: ( ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 ) )
            // InternalSpinCAD.g:6331:1: ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMultiplierAssignment_3_3()); 
            // InternalSpinCAD.g:6332:1: ( rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 )
            // InternalSpinCAD.g:6332:2: rule__LogFreq2SliderLabel__MultiplierAssignment_3_3
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__MultiplierAssignment_3_3();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMultiplierAssignment_3_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__3__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__4"
    // InternalSpinCAD.g:6342:1: rule__LogFreq2SliderLabel__Group_3__4 : rule__LogFreq2SliderLabel__Group_3__4__Impl rule__LogFreq2SliderLabel__Group_3__5 ;
    public final void rule__LogFreq2SliderLabel__Group_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6346:1: ( rule__LogFreq2SliderLabel__Group_3__4__Impl rule__LogFreq2SliderLabel__Group_3__5 )
            // InternalSpinCAD.g:6347:2: rule__LogFreq2SliderLabel__Group_3__4__Impl rule__LogFreq2SliderLabel__Group_3__5
            {
            pushFollow(FOLLOW_9);
            rule__LogFreq2SliderLabel__Group_3__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__4"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__4__Impl"
    // InternalSpinCAD.g:6354:1: rule__LogFreq2SliderLabel__Group_3__4__Impl : ( ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 ) ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6358:1: ( ( ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 ) ) )
            // InternalSpinCAD.g:6359:1: ( ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 ) )
            {
            // InternalSpinCAD.g:6359:1: ( ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 ) )
            // InternalSpinCAD.g:6360:1: ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getPrecisionAssignment_3_4()); 
            // InternalSpinCAD.g:6361:1: ( rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 )
            // InternalSpinCAD.g:6361:2: rule__LogFreq2SliderLabel__PrecisionAssignment_3_4
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__PrecisionAssignment_3_4();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getPrecisionAssignment_3_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__4__Impl"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__5"
    // InternalSpinCAD.g:6371:1: rule__LogFreq2SliderLabel__Group_3__5 : rule__LogFreq2SliderLabel__Group_3__5__Impl ;
    public final void rule__LogFreq2SliderLabel__Group_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6375:1: ( rule__LogFreq2SliderLabel__Group_3__5__Impl )
            // InternalSpinCAD.g:6376:2: rule__LogFreq2SliderLabel__Group_3__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__Group_3__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__5"


    // $ANTLR start "rule__LogFreq2SliderLabel__Group_3__5__Impl"
    // InternalSpinCAD.g:6382:1: rule__LogFreq2SliderLabel__Group_3__5__Impl : ( ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )? ) ;
    public final void rule__LogFreq2SliderLabel__Group_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6386:1: ( ( ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )? ) )
            // InternalSpinCAD.g:6387:1: ( ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )? )
            {
            // InternalSpinCAD.g:6387:1: ( ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )? )
            // InternalSpinCAD.g:6388:1: ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )?
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getOptionAssignment_3_5()); 
            // InternalSpinCAD.g:6389:1: ( rule__LogFreq2SliderLabel__OptionAssignment_3_5 )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==RULE_ID) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==EOF||LA49_1==RULE_ID||LA49_1==RULE_SC_COMMENT||(LA49_1>=25 && LA49_1<=37)||(LA49_1>=39 && LA49_1<=61)||(LA49_1>=63 && LA49_1<=89)) ) {
                    alt49=1;
                }
            }
            switch (alt49) {
                case 1 :
                    // InternalSpinCAD.g:6389:2: rule__LogFreq2SliderLabel__OptionAssignment_3_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__LogFreq2SliderLabel__OptionAssignment_3_5();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getOptionAssignment_3_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__Group_3__5__Impl"


    // $ANTLR start "rule__SpinRadioButton__Group__0"
    // InternalSpinCAD.g:6411:1: rule__SpinRadioButton__Group__0 : rule__SpinRadioButton__Group__0__Impl rule__SpinRadioButton__Group__1 ;
    public final void rule__SpinRadioButton__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6415:1: ( rule__SpinRadioButton__Group__0__Impl rule__SpinRadioButton__Group__1 )
            // InternalSpinCAD.g:6416:2: rule__SpinRadioButton__Group__0__Impl rule__SpinRadioButton__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinRadioButton__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__0"


    // $ANTLR start "rule__SpinRadioButton__Group__0__Impl"
    // InternalSpinCAD.g:6423:1: rule__SpinRadioButton__Group__0__Impl : ( '@spinRadioButton' ) ;
    public final void rule__SpinRadioButton__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6427:1: ( ( '@spinRadioButton' ) )
            // InternalSpinCAD.g:6428:1: ( '@spinRadioButton' )
            {
            // InternalSpinCAD.g:6428:1: ( '@spinRadioButton' )
            // InternalSpinCAD.g:6429:1: '@spinRadioButton'
            {
             before(grammarAccess.getSpinRadioButtonAccess().getSpinRadioButtonKeyword_0()); 
            match(input,36,FOLLOW_2); 
             after(grammarAccess.getSpinRadioButtonAccess().getSpinRadioButtonKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__0__Impl"


    // $ANTLR start "rule__SpinRadioButton__Group__1"
    // InternalSpinCAD.g:6442:1: rule__SpinRadioButton__Group__1 : rule__SpinRadioButton__Group__1__Impl rule__SpinRadioButton__Group__2 ;
    public final void rule__SpinRadioButton__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6446:1: ( rule__SpinRadioButton__Group__1__Impl rule__SpinRadioButton__Group__2 )
            // InternalSpinCAD.g:6447:2: rule__SpinRadioButton__Group__1__Impl rule__SpinRadioButton__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__SpinRadioButton__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__1"


    // $ANTLR start "rule__SpinRadioButton__Group__1__Impl"
    // InternalSpinCAD.g:6454:1: rule__SpinRadioButton__Group__1__Impl : ( ( rule__SpinRadioButton__EnameAssignment_1 ) ) ;
    public final void rule__SpinRadioButton__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6458:1: ( ( ( rule__SpinRadioButton__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:6459:1: ( ( rule__SpinRadioButton__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:6459:1: ( ( rule__SpinRadioButton__EnameAssignment_1 ) )
            // InternalSpinCAD.g:6460:1: ( rule__SpinRadioButton__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinRadioButtonAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:6461:1: ( rule__SpinRadioButton__EnameAssignment_1 )
            // InternalSpinCAD.g:6461:2: rule__SpinRadioButton__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinRadioButtonAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__1__Impl"


    // $ANTLR start "rule__SpinRadioButton__Group__2"
    // InternalSpinCAD.g:6471:1: rule__SpinRadioButton__Group__2 : rule__SpinRadioButton__Group__2__Impl ;
    public final void rule__SpinRadioButton__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6475:1: ( rule__SpinRadioButton__Group__2__Impl )
            // InternalSpinCAD.g:6476:2: rule__SpinRadioButton__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__2"


    // $ANTLR start "rule__SpinRadioButton__Group__2__Impl"
    // InternalSpinCAD.g:6482:1: rule__SpinRadioButton__Group__2__Impl : ( ( rule__SpinRadioButton__ControlNameAssignment_2 ) ) ;
    public final void rule__SpinRadioButton__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6486:1: ( ( ( rule__SpinRadioButton__ControlNameAssignment_2 ) ) )
            // InternalSpinCAD.g:6487:1: ( ( rule__SpinRadioButton__ControlNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:6487:1: ( ( rule__SpinRadioButton__ControlNameAssignment_2 ) )
            // InternalSpinCAD.g:6488:1: ( rule__SpinRadioButton__ControlNameAssignment_2 )
            {
             before(grammarAccess.getSpinRadioButtonAccess().getControlNameAssignment_2()); 
            // InternalSpinCAD.g:6489:1: ( rule__SpinRadioButton__ControlNameAssignment_2 )
            // InternalSpinCAD.g:6489:2: rule__SpinRadioButton__ControlNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__ControlNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinRadioButtonAccess().getControlNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__Group__2__Impl"


    // $ANTLR start "rule__SpinComboBox__Group__0"
    // InternalSpinCAD.g:6505:1: rule__SpinComboBox__Group__0 : rule__SpinComboBox__Group__0__Impl rule__SpinComboBox__Group__1 ;
    public final void rule__SpinComboBox__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6509:1: ( rule__SpinComboBox__Group__0__Impl rule__SpinComboBox__Group__1 )
            // InternalSpinCAD.g:6510:2: rule__SpinComboBox__Group__0__Impl rule__SpinComboBox__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SpinComboBox__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__0"


    // $ANTLR start "rule__SpinComboBox__Group__0__Impl"
    // InternalSpinCAD.g:6517:1: rule__SpinComboBox__Group__0__Impl : ( '@comboBox' ) ;
    public final void rule__SpinComboBox__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6521:1: ( ( '@comboBox' ) )
            // InternalSpinCAD.g:6522:1: ( '@comboBox' )
            {
            // InternalSpinCAD.g:6522:1: ( '@comboBox' )
            // InternalSpinCAD.g:6523:1: '@comboBox'
            {
             before(grammarAccess.getSpinComboBoxAccess().getComboBoxKeyword_0()); 
            match(input,37,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getComboBoxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__0__Impl"


    // $ANTLR start "rule__SpinComboBox__Group__1"
    // InternalSpinCAD.g:6536:1: rule__SpinComboBox__Group__1 : rule__SpinComboBox__Group__1__Impl rule__SpinComboBox__Group__2 ;
    public final void rule__SpinComboBox__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6540:1: ( rule__SpinComboBox__Group__1__Impl rule__SpinComboBox__Group__2 )
            // InternalSpinCAD.g:6541:2: rule__SpinComboBox__Group__1__Impl rule__SpinComboBox__Group__2
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__1"


    // $ANTLR start "rule__SpinComboBox__Group__1__Impl"
    // InternalSpinCAD.g:6548:1: rule__SpinComboBox__Group__1__Impl : ( ( rule__SpinComboBox__EnameAssignment_1 ) ) ;
    public final void rule__SpinComboBox__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6552:1: ( ( ( rule__SpinComboBox__EnameAssignment_1 ) ) )
            // InternalSpinCAD.g:6553:1: ( ( rule__SpinComboBox__EnameAssignment_1 ) )
            {
            // InternalSpinCAD.g:6553:1: ( ( rule__SpinComboBox__EnameAssignment_1 ) )
            // InternalSpinCAD.g:6554:1: ( rule__SpinComboBox__EnameAssignment_1 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getEnameAssignment_1()); 
            // InternalSpinCAD.g:6555:1: ( rule__SpinComboBox__EnameAssignment_1 )
            // InternalSpinCAD.g:6555:2: rule__SpinComboBox__EnameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__EnameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getEnameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__1__Impl"


    // $ANTLR start "rule__SpinComboBox__Group__2"
    // InternalSpinCAD.g:6565:1: rule__SpinComboBox__Group__2 : rule__SpinComboBox__Group__2__Impl rule__SpinComboBox__Group__3 ;
    public final void rule__SpinComboBox__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6569:1: ( rule__SpinComboBox__Group__2__Impl rule__SpinComboBox__Group__3 )
            // InternalSpinCAD.g:6570:2: rule__SpinComboBox__Group__2__Impl rule__SpinComboBox__Group__3
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__2"


    // $ANTLR start "rule__SpinComboBox__Group__2__Impl"
    // InternalSpinCAD.g:6577:1: rule__SpinComboBox__Group__2__Impl : ( ( rule__SpinComboBox__OptionaAssignment_2 ) ) ;
    public final void rule__SpinComboBox__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6581:1: ( ( ( rule__SpinComboBox__OptionaAssignment_2 ) ) )
            // InternalSpinCAD.g:6582:1: ( ( rule__SpinComboBox__OptionaAssignment_2 ) )
            {
            // InternalSpinCAD.g:6582:1: ( ( rule__SpinComboBox__OptionaAssignment_2 ) )
            // InternalSpinCAD.g:6583:1: ( rule__SpinComboBox__OptionaAssignment_2 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionaAssignment_2()); 
            // InternalSpinCAD.g:6584:1: ( rule__SpinComboBox__OptionaAssignment_2 )
            // InternalSpinCAD.g:6584:2: rule__SpinComboBox__OptionaAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__OptionaAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getOptionaAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__2__Impl"


    // $ANTLR start "rule__SpinComboBox__Group__3"
    // InternalSpinCAD.g:6594:1: rule__SpinComboBox__Group__3 : rule__SpinComboBox__Group__3__Impl rule__SpinComboBox__Group__4 ;
    public final void rule__SpinComboBox__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6598:1: ( rule__SpinComboBox__Group__3__Impl rule__SpinComboBox__Group__4 )
            // InternalSpinCAD.g:6599:2: rule__SpinComboBox__Group__3__Impl rule__SpinComboBox__Group__4
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__3"


    // $ANTLR start "rule__SpinComboBox__Group__3__Impl"
    // InternalSpinCAD.g:6606:1: rule__SpinComboBox__Group__3__Impl : ( ( rule__SpinComboBox__OptionbAssignment_3 ) ) ;
    public final void rule__SpinComboBox__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6610:1: ( ( ( rule__SpinComboBox__OptionbAssignment_3 ) ) )
            // InternalSpinCAD.g:6611:1: ( ( rule__SpinComboBox__OptionbAssignment_3 ) )
            {
            // InternalSpinCAD.g:6611:1: ( ( rule__SpinComboBox__OptionbAssignment_3 ) )
            // InternalSpinCAD.g:6612:1: ( rule__SpinComboBox__OptionbAssignment_3 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionbAssignment_3()); 
            // InternalSpinCAD.g:6613:1: ( rule__SpinComboBox__OptionbAssignment_3 )
            // InternalSpinCAD.g:6613:2: rule__SpinComboBox__OptionbAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__OptionbAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getOptionbAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__3__Impl"


    // $ANTLR start "rule__SpinComboBox__Group__4"
    // InternalSpinCAD.g:6623:1: rule__SpinComboBox__Group__4 : rule__SpinComboBox__Group__4__Impl ;
    public final void rule__SpinComboBox__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6627:1: ( rule__SpinComboBox__Group__4__Impl )
            // InternalSpinCAD.g:6628:2: rule__SpinComboBox__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group__4__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__4"


    // $ANTLR start "rule__SpinComboBox__Group__4__Impl"
    // InternalSpinCAD.g:6634:1: rule__SpinComboBox__Group__4__Impl : ( ( rule__SpinComboBox__Group_4__0 )? ) ;
    public final void rule__SpinComboBox__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6638:1: ( ( ( rule__SpinComboBox__Group_4__0 )? ) )
            // InternalSpinCAD.g:6639:1: ( ( rule__SpinComboBox__Group_4__0 )? )
            {
            // InternalSpinCAD.g:6639:1: ( ( rule__SpinComboBox__Group_4__0 )? )
            // InternalSpinCAD.g:6640:1: ( rule__SpinComboBox__Group_4__0 )?
            {
             before(grammarAccess.getSpinComboBoxAccess().getGroup_4()); 
            // InternalSpinCAD.g:6641:1: ( rule__SpinComboBox__Group_4__0 )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==RULE_STRING) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalSpinCAD.g:6641:2: rule__SpinComboBox__Group_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinComboBox__Group_4__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinComboBoxAccess().getGroup_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group__4__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4__0"
    // InternalSpinCAD.g:6661:1: rule__SpinComboBox__Group_4__0 : rule__SpinComboBox__Group_4__0__Impl rule__SpinComboBox__Group_4__1 ;
    public final void rule__SpinComboBox__Group_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6665:1: ( rule__SpinComboBox__Group_4__0__Impl rule__SpinComboBox__Group_4__1 )
            // InternalSpinCAD.g:6666:2: rule__SpinComboBox__Group_4__0__Impl rule__SpinComboBox__Group_4__1
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group_4__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4__0"


    // $ANTLR start "rule__SpinComboBox__Group_4__0__Impl"
    // InternalSpinCAD.g:6673:1: rule__SpinComboBox__Group_4__0__Impl : ( ( rule__SpinComboBox__OptioncAssignment_4_0 ) ) ;
    public final void rule__SpinComboBox__Group_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6677:1: ( ( ( rule__SpinComboBox__OptioncAssignment_4_0 ) ) )
            // InternalSpinCAD.g:6678:1: ( ( rule__SpinComboBox__OptioncAssignment_4_0 ) )
            {
            // InternalSpinCAD.g:6678:1: ( ( rule__SpinComboBox__OptioncAssignment_4_0 ) )
            // InternalSpinCAD.g:6679:1: ( rule__SpinComboBox__OptioncAssignment_4_0 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptioncAssignment_4_0()); 
            // InternalSpinCAD.g:6680:1: ( rule__SpinComboBox__OptioncAssignment_4_0 )
            // InternalSpinCAD.g:6680:2: rule__SpinComboBox__OptioncAssignment_4_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__OptioncAssignment_4_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getOptioncAssignment_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4__0__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4__1"
    // InternalSpinCAD.g:6690:1: rule__SpinComboBox__Group_4__1 : rule__SpinComboBox__Group_4__1__Impl ;
    public final void rule__SpinComboBox__Group_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6694:1: ( rule__SpinComboBox__Group_4__1__Impl )
            // InternalSpinCAD.g:6695:2: rule__SpinComboBox__Group_4__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4__1"


    // $ANTLR start "rule__SpinComboBox__Group_4__1__Impl"
    // InternalSpinCAD.g:6701:1: rule__SpinComboBox__Group_4__1__Impl : ( ( rule__SpinComboBox__Group_4_1__0 )? ) ;
    public final void rule__SpinComboBox__Group_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6705:1: ( ( ( rule__SpinComboBox__Group_4_1__0 )? ) )
            // InternalSpinCAD.g:6706:1: ( ( rule__SpinComboBox__Group_4_1__0 )? )
            {
            // InternalSpinCAD.g:6706:1: ( ( rule__SpinComboBox__Group_4_1__0 )? )
            // InternalSpinCAD.g:6707:1: ( rule__SpinComboBox__Group_4_1__0 )?
            {
             before(grammarAccess.getSpinComboBoxAccess().getGroup_4_1()); 
            // InternalSpinCAD.g:6708:1: ( rule__SpinComboBox__Group_4_1__0 )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==RULE_STRING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // InternalSpinCAD.g:6708:2: rule__SpinComboBox__Group_4_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinComboBox__Group_4_1__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinComboBoxAccess().getGroup_4_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4__1__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4_1__0"
    // InternalSpinCAD.g:6722:1: rule__SpinComboBox__Group_4_1__0 : rule__SpinComboBox__Group_4_1__0__Impl rule__SpinComboBox__Group_4_1__1 ;
    public final void rule__SpinComboBox__Group_4_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6726:1: ( rule__SpinComboBox__Group_4_1__0__Impl rule__SpinComboBox__Group_4_1__1 )
            // InternalSpinCAD.g:6727:2: rule__SpinComboBox__Group_4_1__0__Impl rule__SpinComboBox__Group_4_1__1
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group_4_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1__0"


    // $ANTLR start "rule__SpinComboBox__Group_4_1__0__Impl"
    // InternalSpinCAD.g:6734:1: rule__SpinComboBox__Group_4_1__0__Impl : ( ( rule__SpinComboBox__OptiondAssignment_4_1_0 ) ) ;
    public final void rule__SpinComboBox__Group_4_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6738:1: ( ( ( rule__SpinComboBox__OptiondAssignment_4_1_0 ) ) )
            // InternalSpinCAD.g:6739:1: ( ( rule__SpinComboBox__OptiondAssignment_4_1_0 ) )
            {
            // InternalSpinCAD.g:6739:1: ( ( rule__SpinComboBox__OptiondAssignment_4_1_0 ) )
            // InternalSpinCAD.g:6740:1: ( rule__SpinComboBox__OptiondAssignment_4_1_0 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptiondAssignment_4_1_0()); 
            // InternalSpinCAD.g:6741:1: ( rule__SpinComboBox__OptiondAssignment_4_1_0 )
            // InternalSpinCAD.g:6741:2: rule__SpinComboBox__OptiondAssignment_4_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__OptiondAssignment_4_1_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getOptiondAssignment_4_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1__0__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4_1__1"
    // InternalSpinCAD.g:6751:1: rule__SpinComboBox__Group_4_1__1 : rule__SpinComboBox__Group_4_1__1__Impl ;
    public final void rule__SpinComboBox__Group_4_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6755:1: ( rule__SpinComboBox__Group_4_1__1__Impl )
            // InternalSpinCAD.g:6756:2: rule__SpinComboBox__Group_4_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1__1"


    // $ANTLR start "rule__SpinComboBox__Group_4_1__1__Impl"
    // InternalSpinCAD.g:6762:1: rule__SpinComboBox__Group_4_1__1__Impl : ( ( rule__SpinComboBox__Group_4_1_1__0 )? ) ;
    public final void rule__SpinComboBox__Group_4_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6766:1: ( ( ( rule__SpinComboBox__Group_4_1_1__0 )? ) )
            // InternalSpinCAD.g:6767:1: ( ( rule__SpinComboBox__Group_4_1_1__0 )? )
            {
            // InternalSpinCAD.g:6767:1: ( ( rule__SpinComboBox__Group_4_1_1__0 )? )
            // InternalSpinCAD.g:6768:1: ( rule__SpinComboBox__Group_4_1_1__0 )?
            {
             before(grammarAccess.getSpinComboBoxAccess().getGroup_4_1_1()); 
            // InternalSpinCAD.g:6769:1: ( rule__SpinComboBox__Group_4_1_1__0 )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==RULE_STRING) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalSpinCAD.g:6769:2: rule__SpinComboBox__Group_4_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinComboBox__Group_4_1_1__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinComboBoxAccess().getGroup_4_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1__1__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4_1_1__0"
    // InternalSpinCAD.g:6783:1: rule__SpinComboBox__Group_4_1_1__0 : rule__SpinComboBox__Group_4_1_1__0__Impl rule__SpinComboBox__Group_4_1_1__1 ;
    public final void rule__SpinComboBox__Group_4_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6787:1: ( rule__SpinComboBox__Group_4_1_1__0__Impl rule__SpinComboBox__Group_4_1_1__1 )
            // InternalSpinCAD.g:6788:2: rule__SpinComboBox__Group_4_1_1__0__Impl rule__SpinComboBox__Group_4_1_1__1
            {
            pushFollow(FOLLOW_8);
            rule__SpinComboBox__Group_4_1_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4_1_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1_1__0"


    // $ANTLR start "rule__SpinComboBox__Group_4_1_1__0__Impl"
    // InternalSpinCAD.g:6795:1: rule__SpinComboBox__Group_4_1_1__0__Impl : ( ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 ) ) ;
    public final void rule__SpinComboBox__Group_4_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6799:1: ( ( ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 ) ) )
            // InternalSpinCAD.g:6800:1: ( ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 ) )
            {
            // InternalSpinCAD.g:6800:1: ( ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 ) )
            // InternalSpinCAD.g:6801:1: ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 )
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptioneAssignment_4_1_1_0()); 
            // InternalSpinCAD.g:6802:1: ( rule__SpinComboBox__OptioneAssignment_4_1_1_0 )
            // InternalSpinCAD.g:6802:2: rule__SpinComboBox__OptioneAssignment_4_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__OptioneAssignment_4_1_1_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinComboBoxAccess().getOptioneAssignment_4_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1_1__0__Impl"


    // $ANTLR start "rule__SpinComboBox__Group_4_1_1__1"
    // InternalSpinCAD.g:6812:1: rule__SpinComboBox__Group_4_1_1__1 : rule__SpinComboBox__Group_4_1_1__1__Impl ;
    public final void rule__SpinComboBox__Group_4_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6816:1: ( rule__SpinComboBox__Group_4_1_1__1__Impl )
            // InternalSpinCAD.g:6817:2: rule__SpinComboBox__Group_4_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SpinComboBox__Group_4_1_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1_1__1"


    // $ANTLR start "rule__SpinComboBox__Group_4_1_1__1__Impl"
    // InternalSpinCAD.g:6823:1: rule__SpinComboBox__Group_4_1_1__1__Impl : ( ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )? ) ;
    public final void rule__SpinComboBox__Group_4_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6827:1: ( ( ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )? ) )
            // InternalSpinCAD.g:6828:1: ( ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )? )
            {
            // InternalSpinCAD.g:6828:1: ( ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )? )
            // InternalSpinCAD.g:6829:1: ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )?
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionfAssignment_4_1_1_1()); 
            // InternalSpinCAD.g:6830:1: ( rule__SpinComboBox__OptionfAssignment_4_1_1_1 )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RULE_STRING) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalSpinCAD.g:6830:2: rule__SpinComboBox__OptionfAssignment_4_1_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SpinComboBox__OptionfAssignment_4_1_1_1();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSpinComboBoxAccess().getOptionfAssignment_4_1_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__Group_4_1_1__1__Impl"


    // $ANTLR start "rule__Label__Group__0"
    // InternalSpinCAD.g:6844:1: rule__Label__Group__0 : rule__Label__Group__0__Impl rule__Label__Group__1 ;
    public final void rule__Label__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6848:1: ( rule__Label__Group__0__Impl rule__Label__Group__1 )
            // InternalSpinCAD.g:6849:2: rule__Label__Group__0__Impl rule__Label__Group__1
            {
            pushFollow(FOLLOW_13);
            rule__Label__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Label__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Label__Group__0"


    // $ANTLR start "rule__Label__Group__0__Impl"
    // InternalSpinCAD.g:6856:1: rule__Label__Group__0__Impl : ( ( rule__Label__NameAssignment_0 ) ) ;
    public final void rule__Label__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6860:1: ( ( ( rule__Label__NameAssignment_0 ) ) )
            // InternalSpinCAD.g:6861:1: ( ( rule__Label__NameAssignment_0 ) )
            {
            // InternalSpinCAD.g:6861:1: ( ( rule__Label__NameAssignment_0 ) )
            // InternalSpinCAD.g:6862:1: ( rule__Label__NameAssignment_0 )
            {
             before(grammarAccess.getLabelAccess().getNameAssignment_0()); 
            // InternalSpinCAD.g:6863:1: ( rule__Label__NameAssignment_0 )
            // InternalSpinCAD.g:6863:2: rule__Label__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Label__NameAssignment_0();

            state._fsp--;


            }

             after(grammarAccess.getLabelAccess().getNameAssignment_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Label__Group__0__Impl"


    // $ANTLR start "rule__Label__Group__1"
    // InternalSpinCAD.g:6873:1: rule__Label__Group__1 : rule__Label__Group__1__Impl ;
    public final void rule__Label__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6877:1: ( rule__Label__Group__1__Impl )
            // InternalSpinCAD.g:6878:2: rule__Label__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Label__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Label__Group__1"


    // $ANTLR start "rule__Label__Group__1__Impl"
    // InternalSpinCAD.g:6884:1: rule__Label__Group__1__Impl : ( ':' ) ;
    public final void rule__Label__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6888:1: ( ( ':' ) )
            // InternalSpinCAD.g:6889:1: ( ':' )
            {
            // InternalSpinCAD.g:6889:1: ( ':' )
            // InternalSpinCAD.g:6890:1: ':'
            {
             before(grammarAccess.getLabelAccess().getColonKeyword_1()); 
            match(input,38,FOLLOW_2); 
             after(grammarAccess.getLabelAccess().getColonKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Label__Group__1__Impl"


    // $ANTLR start "rule__IsPinConnected__Group__0"
    // InternalSpinCAD.g:6907:1: rule__IsPinConnected__Group__0 : rule__IsPinConnected__Group__0__Impl rule__IsPinConnected__Group__1 ;
    public final void rule__IsPinConnected__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6911:1: ( rule__IsPinConnected__Group__0__Impl rule__IsPinConnected__Group__1 )
            // InternalSpinCAD.g:6912:2: rule__IsPinConnected__Group__0__Impl rule__IsPinConnected__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__IsPinConnected__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsPinConnected__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Group__0"


    // $ANTLR start "rule__IsPinConnected__Group__0__Impl"
    // InternalSpinCAD.g:6919:1: rule__IsPinConnected__Group__0__Impl : ( '@isPinConnected' ) ;
    public final void rule__IsPinConnected__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6923:1: ( ( '@isPinConnected' ) )
            // InternalSpinCAD.g:6924:1: ( '@isPinConnected' )
            {
            // InternalSpinCAD.g:6924:1: ( '@isPinConnected' )
            // InternalSpinCAD.g:6925:1: '@isPinConnected'
            {
             before(grammarAccess.getIsPinConnectedAccess().getIsPinConnectedKeyword_0()); 
            match(input,39,FOLLOW_2); 
             after(grammarAccess.getIsPinConnectedAccess().getIsPinConnectedKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Group__0__Impl"


    // $ANTLR start "rule__IsPinConnected__Group__1"
    // InternalSpinCAD.g:6938:1: rule__IsPinConnected__Group__1 : rule__IsPinConnected__Group__1__Impl ;
    public final void rule__IsPinConnected__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6942:1: ( rule__IsPinConnected__Group__1__Impl )
            // InternalSpinCAD.g:6943:2: rule__IsPinConnected__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsPinConnected__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Group__1"


    // $ANTLR start "rule__IsPinConnected__Group__1__Impl"
    // InternalSpinCAD.g:6949:1: rule__IsPinConnected__Group__1__Impl : ( ( rule__IsPinConnected__Arg1Assignment_1 ) ) ;
    public final void rule__IsPinConnected__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6953:1: ( ( ( rule__IsPinConnected__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:6954:1: ( ( rule__IsPinConnected__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:6954:1: ( ( rule__IsPinConnected__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:6955:1: ( rule__IsPinConnected__Arg1Assignment_1 )
            {
             before(grammarAccess.getIsPinConnectedAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:6956:1: ( rule__IsPinConnected__Arg1Assignment_1 )
            // InternalSpinCAD.g:6956:2: rule__IsPinConnected__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsPinConnected__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsPinConnectedAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Group__1__Impl"


    // $ANTLR start "rule__IsGreaterThan__Group__0"
    // InternalSpinCAD.g:6970:1: rule__IsGreaterThan__Group__0 : rule__IsGreaterThan__Group__0__Impl rule__IsGreaterThan__Group__1 ;
    public final void rule__IsGreaterThan__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6974:1: ( rule__IsGreaterThan__Group__0__Impl rule__IsGreaterThan__Group__1 )
            // InternalSpinCAD.g:6975:2: rule__IsGreaterThan__Group__0__Impl rule__IsGreaterThan__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IsGreaterThan__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__0"


    // $ANTLR start "rule__IsGreaterThan__Group__0__Impl"
    // InternalSpinCAD.g:6982:1: rule__IsGreaterThan__Group__0__Impl : ( '@isGreaterThan' ) ;
    public final void rule__IsGreaterThan__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:6986:1: ( ( '@isGreaterThan' ) )
            // InternalSpinCAD.g:6987:1: ( '@isGreaterThan' )
            {
            // InternalSpinCAD.g:6987:1: ( '@isGreaterThan' )
            // InternalSpinCAD.g:6988:1: '@isGreaterThan'
            {
             before(grammarAccess.getIsGreaterThanAccess().getIsGreaterThanKeyword_0()); 
            match(input,40,FOLLOW_2); 
             after(grammarAccess.getIsGreaterThanAccess().getIsGreaterThanKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__0__Impl"


    // $ANTLR start "rule__IsGreaterThan__Group__1"
    // InternalSpinCAD.g:7001:1: rule__IsGreaterThan__Group__1 : rule__IsGreaterThan__Group__1__Impl rule__IsGreaterThan__Group__2 ;
    public final void rule__IsGreaterThan__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7005:1: ( rule__IsGreaterThan__Group__1__Impl rule__IsGreaterThan__Group__2 )
            // InternalSpinCAD.g:7006:2: rule__IsGreaterThan__Group__1__Impl rule__IsGreaterThan__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__IsGreaterThan__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__1"


    // $ANTLR start "rule__IsGreaterThan__Group__1__Impl"
    // InternalSpinCAD.g:7013:1: rule__IsGreaterThan__Group__1__Impl : ( ( rule__IsGreaterThan__VariableAssignment_1 ) ) ;
    public final void rule__IsGreaterThan__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7017:1: ( ( ( rule__IsGreaterThan__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:7018:1: ( ( rule__IsGreaterThan__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:7018:1: ( ( rule__IsGreaterThan__VariableAssignment_1 ) )
            // InternalSpinCAD.g:7019:1: ( rule__IsGreaterThan__VariableAssignment_1 )
            {
             before(grammarAccess.getIsGreaterThanAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:7020:1: ( rule__IsGreaterThan__VariableAssignment_1 )
            // InternalSpinCAD.g:7020:2: rule__IsGreaterThan__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsGreaterThanAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__1__Impl"


    // $ANTLR start "rule__IsGreaterThan__Group__2"
    // InternalSpinCAD.g:7030:1: rule__IsGreaterThan__Group__2 : rule__IsGreaterThan__Group__2__Impl ;
    public final void rule__IsGreaterThan__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7034:1: ( rule__IsGreaterThan__Group__2__Impl )
            // InternalSpinCAD.g:7035:2: rule__IsGreaterThan__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__2"


    // $ANTLR start "rule__IsGreaterThan__Group__2__Impl"
    // InternalSpinCAD.g:7041:1: rule__IsGreaterThan__Group__2__Impl : ( ( rule__IsGreaterThan__ValueAssignment_2 ) ) ;
    public final void rule__IsGreaterThan__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7045:1: ( ( ( rule__IsGreaterThan__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:7046:1: ( ( rule__IsGreaterThan__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:7046:1: ( ( rule__IsGreaterThan__ValueAssignment_2 ) )
            // InternalSpinCAD.g:7047:1: ( rule__IsGreaterThan__ValueAssignment_2 )
            {
             before(grammarAccess.getIsGreaterThanAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:7048:1: ( rule__IsGreaterThan__ValueAssignment_2 )
            // InternalSpinCAD.g:7048:2: rule__IsGreaterThan__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IsGreaterThan__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getIsGreaterThanAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__Group__2__Impl"


    // $ANTLR start "rule__IsLessThan__Group__0"
    // InternalSpinCAD.g:7064:1: rule__IsLessThan__Group__0 : rule__IsLessThan__Group__0__Impl rule__IsLessThan__Group__1 ;
    public final void rule__IsLessThan__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7068:1: ( rule__IsLessThan__Group__0__Impl rule__IsLessThan__Group__1 )
            // InternalSpinCAD.g:7069:2: rule__IsLessThan__Group__0__Impl rule__IsLessThan__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IsLessThan__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsLessThan__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__0"


    // $ANTLR start "rule__IsLessThan__Group__0__Impl"
    // InternalSpinCAD.g:7076:1: rule__IsLessThan__Group__0__Impl : ( '@isLessThan' ) ;
    public final void rule__IsLessThan__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7080:1: ( ( '@isLessThan' ) )
            // InternalSpinCAD.g:7081:1: ( '@isLessThan' )
            {
            // InternalSpinCAD.g:7081:1: ( '@isLessThan' )
            // InternalSpinCAD.g:7082:1: '@isLessThan'
            {
             before(grammarAccess.getIsLessThanAccess().getIsLessThanKeyword_0()); 
            match(input,41,FOLLOW_2); 
             after(grammarAccess.getIsLessThanAccess().getIsLessThanKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__0__Impl"


    // $ANTLR start "rule__IsLessThan__Group__1"
    // InternalSpinCAD.g:7095:1: rule__IsLessThan__Group__1 : rule__IsLessThan__Group__1__Impl rule__IsLessThan__Group__2 ;
    public final void rule__IsLessThan__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7099:1: ( rule__IsLessThan__Group__1__Impl rule__IsLessThan__Group__2 )
            // InternalSpinCAD.g:7100:2: rule__IsLessThan__Group__1__Impl rule__IsLessThan__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__IsLessThan__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsLessThan__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__1"


    // $ANTLR start "rule__IsLessThan__Group__1__Impl"
    // InternalSpinCAD.g:7107:1: rule__IsLessThan__Group__1__Impl : ( ( rule__IsLessThan__VariableAssignment_1 ) ) ;
    public final void rule__IsLessThan__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7111:1: ( ( ( rule__IsLessThan__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:7112:1: ( ( rule__IsLessThan__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:7112:1: ( ( rule__IsLessThan__VariableAssignment_1 ) )
            // InternalSpinCAD.g:7113:1: ( rule__IsLessThan__VariableAssignment_1 )
            {
             before(grammarAccess.getIsLessThanAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:7114:1: ( rule__IsLessThan__VariableAssignment_1 )
            // InternalSpinCAD.g:7114:2: rule__IsLessThan__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsLessThan__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsLessThanAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__1__Impl"


    // $ANTLR start "rule__IsLessThan__Group__2"
    // InternalSpinCAD.g:7124:1: rule__IsLessThan__Group__2 : rule__IsLessThan__Group__2__Impl ;
    public final void rule__IsLessThan__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7128:1: ( rule__IsLessThan__Group__2__Impl )
            // InternalSpinCAD.g:7129:2: rule__IsLessThan__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsLessThan__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__2"


    // $ANTLR start "rule__IsLessThan__Group__2__Impl"
    // InternalSpinCAD.g:7135:1: rule__IsLessThan__Group__2__Impl : ( ( rule__IsLessThan__ValueAssignment_2 ) ) ;
    public final void rule__IsLessThan__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7139:1: ( ( ( rule__IsLessThan__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:7140:1: ( ( rule__IsLessThan__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:7140:1: ( ( rule__IsLessThan__ValueAssignment_2 ) )
            // InternalSpinCAD.g:7141:1: ( rule__IsLessThan__ValueAssignment_2 )
            {
             before(grammarAccess.getIsLessThanAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:7142:1: ( rule__IsLessThan__ValueAssignment_2 )
            // InternalSpinCAD.g:7142:2: rule__IsLessThan__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IsLessThan__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getIsLessThanAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__Group__2__Impl"


    // $ANTLR start "rule__IsEqualTo__Group__0"
    // InternalSpinCAD.g:7158:1: rule__IsEqualTo__Group__0 : rule__IsEqualTo__Group__0__Impl rule__IsEqualTo__Group__1 ;
    public final void rule__IsEqualTo__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7162:1: ( rule__IsEqualTo__Group__0__Impl rule__IsEqualTo__Group__1 )
            // InternalSpinCAD.g:7163:2: rule__IsEqualTo__Group__0__Impl rule__IsEqualTo__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IsEqualTo__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsEqualTo__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__0"


    // $ANTLR start "rule__IsEqualTo__Group__0__Impl"
    // InternalSpinCAD.g:7170:1: rule__IsEqualTo__Group__0__Impl : ( '@isEqualTo' ) ;
    public final void rule__IsEqualTo__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7174:1: ( ( '@isEqualTo' ) )
            // InternalSpinCAD.g:7175:1: ( '@isEqualTo' )
            {
            // InternalSpinCAD.g:7175:1: ( '@isEqualTo' )
            // InternalSpinCAD.g:7176:1: '@isEqualTo'
            {
             before(grammarAccess.getIsEqualToAccess().getIsEqualToKeyword_0()); 
            match(input,42,FOLLOW_2); 
             after(grammarAccess.getIsEqualToAccess().getIsEqualToKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__0__Impl"


    // $ANTLR start "rule__IsEqualTo__Group__1"
    // InternalSpinCAD.g:7189:1: rule__IsEqualTo__Group__1 : rule__IsEqualTo__Group__1__Impl rule__IsEqualTo__Group__2 ;
    public final void rule__IsEqualTo__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7193:1: ( rule__IsEqualTo__Group__1__Impl rule__IsEqualTo__Group__2 )
            // InternalSpinCAD.g:7194:2: rule__IsEqualTo__Group__1__Impl rule__IsEqualTo__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__IsEqualTo__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsEqualTo__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__1"


    // $ANTLR start "rule__IsEqualTo__Group__1__Impl"
    // InternalSpinCAD.g:7201:1: rule__IsEqualTo__Group__1__Impl : ( ( rule__IsEqualTo__VariableAssignment_1 ) ) ;
    public final void rule__IsEqualTo__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7205:1: ( ( ( rule__IsEqualTo__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:7206:1: ( ( rule__IsEqualTo__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:7206:1: ( ( rule__IsEqualTo__VariableAssignment_1 ) )
            // InternalSpinCAD.g:7207:1: ( rule__IsEqualTo__VariableAssignment_1 )
            {
             before(grammarAccess.getIsEqualToAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:7208:1: ( rule__IsEqualTo__VariableAssignment_1 )
            // InternalSpinCAD.g:7208:2: rule__IsEqualTo__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsEqualTo__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsEqualToAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__1__Impl"


    // $ANTLR start "rule__IsEqualTo__Group__2"
    // InternalSpinCAD.g:7218:1: rule__IsEqualTo__Group__2 : rule__IsEqualTo__Group__2__Impl ;
    public final void rule__IsEqualTo__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7222:1: ( rule__IsEqualTo__Group__2__Impl )
            // InternalSpinCAD.g:7223:2: rule__IsEqualTo__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsEqualTo__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__2"


    // $ANTLR start "rule__IsEqualTo__Group__2__Impl"
    // InternalSpinCAD.g:7229:1: rule__IsEqualTo__Group__2__Impl : ( ( rule__IsEqualTo__ValueAssignment_2 ) ) ;
    public final void rule__IsEqualTo__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7233:1: ( ( ( rule__IsEqualTo__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:7234:1: ( ( rule__IsEqualTo__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:7234:1: ( ( rule__IsEqualTo__ValueAssignment_2 ) )
            // InternalSpinCAD.g:7235:1: ( rule__IsEqualTo__ValueAssignment_2 )
            {
             before(grammarAccess.getIsEqualToAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:7236:1: ( rule__IsEqualTo__ValueAssignment_2 )
            // InternalSpinCAD.g:7236:2: rule__IsEqualTo__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IsEqualTo__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getIsEqualToAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__Group__2__Impl"


    // $ANTLR start "rule__IsTrue__Group__0"
    // InternalSpinCAD.g:7252:1: rule__IsTrue__Group__0 : rule__IsTrue__Group__0__Impl rule__IsTrue__Group__1 ;
    public final void rule__IsTrue__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7256:1: ( rule__IsTrue__Group__0__Impl rule__IsTrue__Group__1 )
            // InternalSpinCAD.g:7257:2: rule__IsTrue__Group__0__Impl rule__IsTrue__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IsTrue__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsTrue__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsTrue__Group__0"


    // $ANTLR start "rule__IsTrue__Group__0__Impl"
    // InternalSpinCAD.g:7264:1: rule__IsTrue__Group__0__Impl : ( '@isTrue' ) ;
    public final void rule__IsTrue__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7268:1: ( ( '@isTrue' ) )
            // InternalSpinCAD.g:7269:1: ( '@isTrue' )
            {
            // InternalSpinCAD.g:7269:1: ( '@isTrue' )
            // InternalSpinCAD.g:7270:1: '@isTrue'
            {
             before(grammarAccess.getIsTrueAccess().getIsTrueKeyword_0()); 
            match(input,43,FOLLOW_2); 
             after(grammarAccess.getIsTrueAccess().getIsTrueKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsTrue__Group__0__Impl"


    // $ANTLR start "rule__IsTrue__Group__1"
    // InternalSpinCAD.g:7283:1: rule__IsTrue__Group__1 : rule__IsTrue__Group__1__Impl ;
    public final void rule__IsTrue__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7287:1: ( rule__IsTrue__Group__1__Impl )
            // InternalSpinCAD.g:7288:2: rule__IsTrue__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsTrue__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsTrue__Group__1"


    // $ANTLR start "rule__IsTrue__Group__1__Impl"
    // InternalSpinCAD.g:7294:1: rule__IsTrue__Group__1__Impl : ( ( rule__IsTrue__VariableAssignment_1 ) ) ;
    public final void rule__IsTrue__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7298:1: ( ( ( rule__IsTrue__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:7299:1: ( ( rule__IsTrue__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:7299:1: ( ( rule__IsTrue__VariableAssignment_1 ) )
            // InternalSpinCAD.g:7300:1: ( rule__IsTrue__VariableAssignment_1 )
            {
             before(grammarAccess.getIsTrueAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:7301:1: ( rule__IsTrue__VariableAssignment_1 )
            // InternalSpinCAD.g:7301:2: rule__IsTrue__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsTrue__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsTrueAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsTrue__Group__1__Impl"


    // $ANTLR start "rule__IsElse__Group__0"
    // InternalSpinCAD.g:7315:1: rule__IsElse__Group__0 : rule__IsElse__Group__0__Impl rule__IsElse__Group__1 ;
    public final void rule__IsElse__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7319:1: ( rule__IsElse__Group__0__Impl rule__IsElse__Group__1 )
            // InternalSpinCAD.g:7320:2: rule__IsElse__Group__0__Impl rule__IsElse__Group__1
            {
            pushFollow(FOLLOW_14);
            rule__IsElse__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsElse__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsElse__Group__0"


    // $ANTLR start "rule__IsElse__Group__0__Impl"
    // InternalSpinCAD.g:7327:1: rule__IsElse__Group__0__Impl : ( () ) ;
    public final void rule__IsElse__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7331:1: ( ( () ) )
            // InternalSpinCAD.g:7332:1: ( () )
            {
            // InternalSpinCAD.g:7332:1: ( () )
            // InternalSpinCAD.g:7333:1: ()
            {
             before(grammarAccess.getIsElseAccess().getIsElseAction_0()); 
            // InternalSpinCAD.g:7334:1: ()
            // InternalSpinCAD.g:7336:1: 
            {
            }

             after(grammarAccess.getIsElseAccess().getIsElseAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsElse__Group__0__Impl"


    // $ANTLR start "rule__IsElse__Group__1"
    // InternalSpinCAD.g:7346:1: rule__IsElse__Group__1 : rule__IsElse__Group__1__Impl ;
    public final void rule__IsElse__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7350:1: ( rule__IsElse__Group__1__Impl )
            // InternalSpinCAD.g:7351:2: rule__IsElse__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsElse__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsElse__Group__1"


    // $ANTLR start "rule__IsElse__Group__1__Impl"
    // InternalSpinCAD.g:7357:1: rule__IsElse__Group__1__Impl : ( '@else' ) ;
    public final void rule__IsElse__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7361:1: ( ( '@else' ) )
            // InternalSpinCAD.g:7362:1: ( '@else' )
            {
            // InternalSpinCAD.g:7362:1: ( '@else' )
            // InternalSpinCAD.g:7363:1: '@else'
            {
             before(grammarAccess.getIsElseAccess().getElseKeyword_1()); 
            match(input,44,FOLLOW_2); 
             after(grammarAccess.getIsElseAccess().getElseKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsElse__Group__1__Impl"


    // $ANTLR start "rule__IsEndif__Group__0"
    // InternalSpinCAD.g:7380:1: rule__IsEndif__Group__0 : rule__IsEndif__Group__0__Impl rule__IsEndif__Group__1 ;
    public final void rule__IsEndif__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7384:1: ( rule__IsEndif__Group__0__Impl rule__IsEndif__Group__1 )
            // InternalSpinCAD.g:7385:2: rule__IsEndif__Group__0__Impl rule__IsEndif__Group__1
            {
            pushFollow(FOLLOW_15);
            rule__IsEndif__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsEndif__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEndif__Group__0"


    // $ANTLR start "rule__IsEndif__Group__0__Impl"
    // InternalSpinCAD.g:7392:1: rule__IsEndif__Group__0__Impl : ( () ) ;
    public final void rule__IsEndif__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7396:1: ( ( () ) )
            // InternalSpinCAD.g:7397:1: ( () )
            {
            // InternalSpinCAD.g:7397:1: ( () )
            // InternalSpinCAD.g:7398:1: ()
            {
             before(grammarAccess.getIsEndifAccess().getIsEndifAction_0()); 
            // InternalSpinCAD.g:7399:1: ()
            // InternalSpinCAD.g:7401:1: 
            {
            }

             after(grammarAccess.getIsEndifAccess().getIsEndifAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEndif__Group__0__Impl"


    // $ANTLR start "rule__IsEndif__Group__1"
    // InternalSpinCAD.g:7411:1: rule__IsEndif__Group__1 : rule__IsEndif__Group__1__Impl ;
    public final void rule__IsEndif__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7415:1: ( rule__IsEndif__Group__1__Impl )
            // InternalSpinCAD.g:7416:2: rule__IsEndif__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsEndif__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEndif__Group__1"


    // $ANTLR start "rule__IsEndif__Group__1__Impl"
    // InternalSpinCAD.g:7422:1: rule__IsEndif__Group__1__Impl : ( '@endif' ) ;
    public final void rule__IsEndif__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7426:1: ( ( '@endif' ) )
            // InternalSpinCAD.g:7427:1: ( '@endif' )
            {
            // InternalSpinCAD.g:7427:1: ( '@endif' )
            // InternalSpinCAD.g:7428:1: '@endif'
            {
             before(grammarAccess.getIsEndifAccess().getEndifKeyword_1()); 
            match(input,45,FOLLOW_2); 
             after(grammarAccess.getIsEndifAccess().getEndifKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEndif__Group__1__Impl"


    // $ANTLR start "rule__IsOr__Group__0"
    // InternalSpinCAD.g:7445:1: rule__IsOr__Group__0 : rule__IsOr__Group__0__Impl rule__IsOr__Group__1 ;
    public final void rule__IsOr__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7449:1: ( rule__IsOr__Group__0__Impl rule__IsOr__Group__1 )
            // InternalSpinCAD.g:7450:2: rule__IsOr__Group__0__Impl rule__IsOr__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IsOr__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsOr__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__0"


    // $ANTLR start "rule__IsOr__Group__0__Impl"
    // InternalSpinCAD.g:7457:1: rule__IsOr__Group__0__Impl : ( '@isOr' ) ;
    public final void rule__IsOr__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7461:1: ( ( '@isOr' ) )
            // InternalSpinCAD.g:7462:1: ( '@isOr' )
            {
            // InternalSpinCAD.g:7462:1: ( '@isOr' )
            // InternalSpinCAD.g:7463:1: '@isOr'
            {
             before(grammarAccess.getIsOrAccess().getIsOrKeyword_0()); 
            match(input,46,FOLLOW_2); 
             after(grammarAccess.getIsOrAccess().getIsOrKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__0__Impl"


    // $ANTLR start "rule__IsOr__Group__1"
    // InternalSpinCAD.g:7476:1: rule__IsOr__Group__1 : rule__IsOr__Group__1__Impl rule__IsOr__Group__2 ;
    public final void rule__IsOr__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7480:1: ( rule__IsOr__Group__1__Impl rule__IsOr__Group__2 )
            // InternalSpinCAD.g:7481:2: rule__IsOr__Group__1__Impl rule__IsOr__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__IsOr__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsOr__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__1"


    // $ANTLR start "rule__IsOr__Group__1__Impl"
    // InternalSpinCAD.g:7488:1: rule__IsOr__Group__1__Impl : ( ( rule__IsOr__Var1Assignment_1 ) ) ;
    public final void rule__IsOr__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7492:1: ( ( ( rule__IsOr__Var1Assignment_1 ) ) )
            // InternalSpinCAD.g:7493:1: ( ( rule__IsOr__Var1Assignment_1 ) )
            {
            // InternalSpinCAD.g:7493:1: ( ( rule__IsOr__Var1Assignment_1 ) )
            // InternalSpinCAD.g:7494:1: ( rule__IsOr__Var1Assignment_1 )
            {
             before(grammarAccess.getIsOrAccess().getVar1Assignment_1()); 
            // InternalSpinCAD.g:7495:1: ( rule__IsOr__Var1Assignment_1 )
            // InternalSpinCAD.g:7495:2: rule__IsOr__Var1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IsOr__Var1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getIsOrAccess().getVar1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__1__Impl"


    // $ANTLR start "rule__IsOr__Group__2"
    // InternalSpinCAD.g:7505:1: rule__IsOr__Group__2 : rule__IsOr__Group__2__Impl rule__IsOr__Group__3 ;
    public final void rule__IsOr__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7509:1: ( rule__IsOr__Group__2__Impl rule__IsOr__Group__3 )
            // InternalSpinCAD.g:7510:2: rule__IsOr__Group__2__Impl rule__IsOr__Group__3
            {
            pushFollow(FOLLOW_12);
            rule__IsOr__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__IsOr__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__2"


    // $ANTLR start "rule__IsOr__Group__2__Impl"
    // InternalSpinCAD.g:7517:1: rule__IsOr__Group__2__Impl : ( ( rule__IsOr__Var2Assignment_2 ) ) ;
    public final void rule__IsOr__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7521:1: ( ( ( rule__IsOr__Var2Assignment_2 ) ) )
            // InternalSpinCAD.g:7522:1: ( ( rule__IsOr__Var2Assignment_2 ) )
            {
            // InternalSpinCAD.g:7522:1: ( ( rule__IsOr__Var2Assignment_2 ) )
            // InternalSpinCAD.g:7523:1: ( rule__IsOr__Var2Assignment_2 )
            {
             before(grammarAccess.getIsOrAccess().getVar2Assignment_2()); 
            // InternalSpinCAD.g:7524:1: ( rule__IsOr__Var2Assignment_2 )
            // InternalSpinCAD.g:7524:2: rule__IsOr__Var2Assignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IsOr__Var2Assignment_2();

            state._fsp--;


            }

             after(grammarAccess.getIsOrAccess().getVar2Assignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__2__Impl"


    // $ANTLR start "rule__IsOr__Group__3"
    // InternalSpinCAD.g:7534:1: rule__IsOr__Group__3 : rule__IsOr__Group__3__Impl ;
    public final void rule__IsOr__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7538:1: ( rule__IsOr__Group__3__Impl )
            // InternalSpinCAD.g:7539:2: rule__IsOr__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IsOr__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__3"


    // $ANTLR start "rule__IsOr__Group__3__Impl"
    // InternalSpinCAD.g:7545:1: rule__IsOr__Group__3__Impl : ( ( rule__IsOr__ValueAssignment_3 ) ) ;
    public final void rule__IsOr__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7549:1: ( ( ( rule__IsOr__ValueAssignment_3 ) ) )
            // InternalSpinCAD.g:7550:1: ( ( rule__IsOr__ValueAssignment_3 ) )
            {
            // InternalSpinCAD.g:7550:1: ( ( rule__IsOr__ValueAssignment_3 ) )
            // InternalSpinCAD.g:7551:1: ( rule__IsOr__ValueAssignment_3 )
            {
             before(grammarAccess.getIsOrAccess().getValueAssignment_3()); 
            // InternalSpinCAD.g:7552:1: ( rule__IsOr__ValueAssignment_3 )
            // InternalSpinCAD.g:7552:2: rule__IsOr__ValueAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__IsOr__ValueAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getIsOrAccess().getValueAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Group__3__Impl"


    // $ANTLR start "rule__GetInputDefault__Group__0"
    // InternalSpinCAD.g:7570:1: rule__GetInputDefault__Group__0 : rule__GetInputDefault__Group__0__Impl rule__GetInputDefault__Group__1 ;
    public final void rule__GetInputDefault__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7574:1: ( rule__GetInputDefault__Group__0__Impl rule__GetInputDefault__Group__1 )
            // InternalSpinCAD.g:7575:2: rule__GetInputDefault__Group__0__Impl rule__GetInputDefault__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__GetInputDefault__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__0"


    // $ANTLR start "rule__GetInputDefault__Group__0__Impl"
    // InternalSpinCAD.g:7582:1: rule__GetInputDefault__Group__0__Impl : ( '@getInputDefault' ) ;
    public final void rule__GetInputDefault__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7586:1: ( ( '@getInputDefault' ) )
            // InternalSpinCAD.g:7587:1: ( '@getInputDefault' )
            {
            // InternalSpinCAD.g:7587:1: ( '@getInputDefault' )
            // InternalSpinCAD.g:7588:1: '@getInputDefault'
            {
             before(grammarAccess.getGetInputDefaultAccess().getGetInputDefaultKeyword_0()); 
            match(input,47,FOLLOW_2); 
             after(grammarAccess.getGetInputDefaultAccess().getGetInputDefaultKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__0__Impl"


    // $ANTLR start "rule__GetInputDefault__Group__1"
    // InternalSpinCAD.g:7601:1: rule__GetInputDefault__Group__1 : rule__GetInputDefault__Group__1__Impl rule__GetInputDefault__Group__2 ;
    public final void rule__GetInputDefault__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7605:1: ( rule__GetInputDefault__Group__1__Impl rule__GetInputDefault__Group__2 )
            // InternalSpinCAD.g:7606:2: rule__GetInputDefault__Group__1__Impl rule__GetInputDefault__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__GetInputDefault__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__1"


    // $ANTLR start "rule__GetInputDefault__Group__1__Impl"
    // InternalSpinCAD.g:7613:1: rule__GetInputDefault__Group__1__Impl : ( ( rule__GetInputDefault__LabelAssignment_1 ) ) ;
    public final void rule__GetInputDefault__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7617:1: ( ( ( rule__GetInputDefault__LabelAssignment_1 ) ) )
            // InternalSpinCAD.g:7618:1: ( ( rule__GetInputDefault__LabelAssignment_1 ) )
            {
            // InternalSpinCAD.g:7618:1: ( ( rule__GetInputDefault__LabelAssignment_1 ) )
            // InternalSpinCAD.g:7619:1: ( rule__GetInputDefault__LabelAssignment_1 )
            {
             before(grammarAccess.getGetInputDefaultAccess().getLabelAssignment_1()); 
            // InternalSpinCAD.g:7620:1: ( rule__GetInputDefault__LabelAssignment_1 )
            // InternalSpinCAD.g:7620:2: rule__GetInputDefault__LabelAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__LabelAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getGetInputDefaultAccess().getLabelAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__1__Impl"


    // $ANTLR start "rule__GetInputDefault__Group__2"
    // InternalSpinCAD.g:7630:1: rule__GetInputDefault__Group__2 : rule__GetInputDefault__Group__2__Impl rule__GetInputDefault__Group__3 ;
    public final void rule__GetInputDefault__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7634:1: ( rule__GetInputDefault__Group__2__Impl rule__GetInputDefault__Group__3 )
            // InternalSpinCAD.g:7635:2: rule__GetInputDefault__Group__2__Impl rule__GetInputDefault__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__GetInputDefault__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__2"


    // $ANTLR start "rule__GetInputDefault__Group__2__Impl"
    // InternalSpinCAD.g:7642:1: rule__GetInputDefault__Group__2__Impl : ( ( rule__GetInputDefault__VariableAssignment_2 ) ) ;
    public final void rule__GetInputDefault__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7646:1: ( ( ( rule__GetInputDefault__VariableAssignment_2 ) ) )
            // InternalSpinCAD.g:7647:1: ( ( rule__GetInputDefault__VariableAssignment_2 ) )
            {
            // InternalSpinCAD.g:7647:1: ( ( rule__GetInputDefault__VariableAssignment_2 ) )
            // InternalSpinCAD.g:7648:1: ( rule__GetInputDefault__VariableAssignment_2 )
            {
             before(grammarAccess.getGetInputDefaultAccess().getVariableAssignment_2()); 
            // InternalSpinCAD.g:7649:1: ( rule__GetInputDefault__VariableAssignment_2 )
            // InternalSpinCAD.g:7649:2: rule__GetInputDefault__VariableAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__VariableAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getGetInputDefaultAccess().getVariableAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__2__Impl"


    // $ANTLR start "rule__GetInputDefault__Group__3"
    // InternalSpinCAD.g:7659:1: rule__GetInputDefault__Group__3 : rule__GetInputDefault__Group__3__Impl rule__GetInputDefault__Group__4 ;
    public final void rule__GetInputDefault__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7663:1: ( rule__GetInputDefault__Group__3__Impl rule__GetInputDefault__Group__4 )
            // InternalSpinCAD.g:7664:2: rule__GetInputDefault__Group__3__Impl rule__GetInputDefault__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__GetInputDefault__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__3"


    // $ANTLR start "rule__GetInputDefault__Group__3__Impl"
    // InternalSpinCAD.g:7671:1: rule__GetInputDefault__Group__3__Impl : ( ( rule__GetInputDefault__ScaleAssignment_3 ) ) ;
    public final void rule__GetInputDefault__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7675:1: ( ( ( rule__GetInputDefault__ScaleAssignment_3 ) ) )
            // InternalSpinCAD.g:7676:1: ( ( rule__GetInputDefault__ScaleAssignment_3 ) )
            {
            // InternalSpinCAD.g:7676:1: ( ( rule__GetInputDefault__ScaleAssignment_3 ) )
            // InternalSpinCAD.g:7677:1: ( rule__GetInputDefault__ScaleAssignment_3 )
            {
             before(grammarAccess.getGetInputDefaultAccess().getScaleAssignment_3()); 
            // InternalSpinCAD.g:7678:1: ( rule__GetInputDefault__ScaleAssignment_3 )
            // InternalSpinCAD.g:7678:2: rule__GetInputDefault__ScaleAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__ScaleAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getGetInputDefaultAccess().getScaleAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__3__Impl"


    // $ANTLR start "rule__GetInputDefault__Group__4"
    // InternalSpinCAD.g:7688:1: rule__GetInputDefault__Group__4 : rule__GetInputDefault__Group__4__Impl ;
    public final void rule__GetInputDefault__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7692:1: ( rule__GetInputDefault__Group__4__Impl )
            // InternalSpinCAD.g:7693:2: rule__GetInputDefault__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__Group__4__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__4"


    // $ANTLR start "rule__GetInputDefault__Group__4__Impl"
    // InternalSpinCAD.g:7699:1: rule__GetInputDefault__Group__4__Impl : ( ( rule__GetInputDefault__DefaultValAssignment_4 ) ) ;
    public final void rule__GetInputDefault__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7703:1: ( ( ( rule__GetInputDefault__DefaultValAssignment_4 ) ) )
            // InternalSpinCAD.g:7704:1: ( ( rule__GetInputDefault__DefaultValAssignment_4 ) )
            {
            // InternalSpinCAD.g:7704:1: ( ( rule__GetInputDefault__DefaultValAssignment_4 ) )
            // InternalSpinCAD.g:7705:1: ( rule__GetInputDefault__DefaultValAssignment_4 )
            {
             before(grammarAccess.getGetInputDefaultAccess().getDefaultValAssignment_4()); 
            // InternalSpinCAD.g:7706:1: ( rule__GetInputDefault__DefaultValAssignment_4 )
            // InternalSpinCAD.g:7706:2: rule__GetInputDefault__DefaultValAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__GetInputDefault__DefaultValAssignment_4();

            state._fsp--;


            }

             after(grammarAccess.getGetInputDefaultAccess().getDefaultValAssignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__Group__4__Impl"


    // $ANTLR start "rule__GetDelayScaleControl__Group__0"
    // InternalSpinCAD.g:7726:1: rule__GetDelayScaleControl__Group__0 : rule__GetDelayScaleControl__Group__0__Impl rule__GetDelayScaleControl__Group__1 ;
    public final void rule__GetDelayScaleControl__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7730:1: ( rule__GetDelayScaleControl__Group__0__Impl rule__GetDelayScaleControl__Group__1 )
            // InternalSpinCAD.g:7731:2: rule__GetDelayScaleControl__Group__0__Impl rule__GetDelayScaleControl__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__GetDelayScaleControl__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__0"


    // $ANTLR start "rule__GetDelayScaleControl__Group__0__Impl"
    // InternalSpinCAD.g:7738:1: rule__GetDelayScaleControl__Group__0__Impl : ( '@getDelayScaleControl' ) ;
    public final void rule__GetDelayScaleControl__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7742:1: ( ( '@getDelayScaleControl' ) )
            // InternalSpinCAD.g:7743:1: ( '@getDelayScaleControl' )
            {
            // InternalSpinCAD.g:7743:1: ( '@getDelayScaleControl' )
            // InternalSpinCAD.g:7744:1: '@getDelayScaleControl'
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getGetDelayScaleControlKeyword_0()); 
            match(input,48,FOLLOW_2); 
             after(grammarAccess.getGetDelayScaleControlAccess().getGetDelayScaleControlKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__0__Impl"


    // $ANTLR start "rule__GetDelayScaleControl__Group__1"
    // InternalSpinCAD.g:7757:1: rule__GetDelayScaleControl__Group__1 : rule__GetDelayScaleControl__Group__1__Impl rule__GetDelayScaleControl__Group__2 ;
    public final void rule__GetDelayScaleControl__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7761:1: ( rule__GetDelayScaleControl__Group__1__Impl rule__GetDelayScaleControl__Group__2 )
            // InternalSpinCAD.g:7762:2: rule__GetDelayScaleControl__Group__1__Impl rule__GetDelayScaleControl__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__GetDelayScaleControl__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__1"


    // $ANTLR start "rule__GetDelayScaleControl__Group__1__Impl"
    // InternalSpinCAD.g:7769:1: rule__GetDelayScaleControl__Group__1__Impl : ( ( rule__GetDelayScaleControl__RatioAssignment_1 ) ) ;
    public final void rule__GetDelayScaleControl__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7773:1: ( ( ( rule__GetDelayScaleControl__RatioAssignment_1 ) ) )
            // InternalSpinCAD.g:7774:1: ( ( rule__GetDelayScaleControl__RatioAssignment_1 ) )
            {
            // InternalSpinCAD.g:7774:1: ( ( rule__GetDelayScaleControl__RatioAssignment_1 ) )
            // InternalSpinCAD.g:7775:1: ( rule__GetDelayScaleControl__RatioAssignment_1 )
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getRatioAssignment_1()); 
            // InternalSpinCAD.g:7776:1: ( rule__GetDelayScaleControl__RatioAssignment_1 )
            // InternalSpinCAD.g:7776:2: rule__GetDelayScaleControl__RatioAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__RatioAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getGetDelayScaleControlAccess().getRatioAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__1__Impl"


    // $ANTLR start "rule__GetDelayScaleControl__Group__2"
    // InternalSpinCAD.g:7786:1: rule__GetDelayScaleControl__Group__2 : rule__GetDelayScaleControl__Group__2__Impl rule__GetDelayScaleControl__Group__3 ;
    public final void rule__GetDelayScaleControl__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7790:1: ( rule__GetDelayScaleControl__Group__2__Impl rule__GetDelayScaleControl__Group__3 )
            // InternalSpinCAD.g:7791:2: rule__GetDelayScaleControl__Group__2__Impl rule__GetDelayScaleControl__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__GetDelayScaleControl__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__2"


    // $ANTLR start "rule__GetDelayScaleControl__Group__2__Impl"
    // InternalSpinCAD.g:7798:1: rule__GetDelayScaleControl__Group__2__Impl : ( ( rule__GetDelayScaleControl__LengthAssignment_2 ) ) ;
    public final void rule__GetDelayScaleControl__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7802:1: ( ( ( rule__GetDelayScaleControl__LengthAssignment_2 ) ) )
            // InternalSpinCAD.g:7803:1: ( ( rule__GetDelayScaleControl__LengthAssignment_2 ) )
            {
            // InternalSpinCAD.g:7803:1: ( ( rule__GetDelayScaleControl__LengthAssignment_2 ) )
            // InternalSpinCAD.g:7804:1: ( rule__GetDelayScaleControl__LengthAssignment_2 )
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getLengthAssignment_2()); 
            // InternalSpinCAD.g:7805:1: ( rule__GetDelayScaleControl__LengthAssignment_2 )
            // InternalSpinCAD.g:7805:2: rule__GetDelayScaleControl__LengthAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__LengthAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getGetDelayScaleControlAccess().getLengthAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__2__Impl"


    // $ANTLR start "rule__GetDelayScaleControl__Group__3"
    // InternalSpinCAD.g:7815:1: rule__GetDelayScaleControl__Group__3 : rule__GetDelayScaleControl__Group__3__Impl rule__GetDelayScaleControl__Group__4 ;
    public final void rule__GetDelayScaleControl__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7819:1: ( rule__GetDelayScaleControl__Group__3__Impl rule__GetDelayScaleControl__Group__4 )
            // InternalSpinCAD.g:7820:2: rule__GetDelayScaleControl__Group__3__Impl rule__GetDelayScaleControl__Group__4
            {
            pushFollow(FOLLOW_9);
            rule__GetDelayScaleControl__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__3"


    // $ANTLR start "rule__GetDelayScaleControl__Group__3__Impl"
    // InternalSpinCAD.g:7827:1: rule__GetDelayScaleControl__Group__3__Impl : ( ( rule__GetDelayScaleControl__OffsetAssignment_3 ) ) ;
    public final void rule__GetDelayScaleControl__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7831:1: ( ( ( rule__GetDelayScaleControl__OffsetAssignment_3 ) ) )
            // InternalSpinCAD.g:7832:1: ( ( rule__GetDelayScaleControl__OffsetAssignment_3 ) )
            {
            // InternalSpinCAD.g:7832:1: ( ( rule__GetDelayScaleControl__OffsetAssignment_3 ) )
            // InternalSpinCAD.g:7833:1: ( rule__GetDelayScaleControl__OffsetAssignment_3 )
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getOffsetAssignment_3()); 
            // InternalSpinCAD.g:7834:1: ( rule__GetDelayScaleControl__OffsetAssignment_3 )
            // InternalSpinCAD.g:7834:2: rule__GetDelayScaleControl__OffsetAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__OffsetAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getGetDelayScaleControlAccess().getOffsetAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__3__Impl"


    // $ANTLR start "rule__GetDelayScaleControl__Group__4"
    // InternalSpinCAD.g:7844:1: rule__GetDelayScaleControl__Group__4 : rule__GetDelayScaleControl__Group__4__Impl ;
    public final void rule__GetDelayScaleControl__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7848:1: ( rule__GetDelayScaleControl__Group__4__Impl )
            // InternalSpinCAD.g:7849:2: rule__GetDelayScaleControl__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__GetDelayScaleControl__Group__4__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__4"


    // $ANTLR start "rule__GetDelayScaleControl__Group__4__Impl"
    // InternalSpinCAD.g:7855:1: rule__GetDelayScaleControl__Group__4__Impl : ( ( rule__GetDelayScaleControl__ControlAssignment_4 )? ) ;
    public final void rule__GetDelayScaleControl__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7859:1: ( ( ( rule__GetDelayScaleControl__ControlAssignment_4 )? ) )
            // InternalSpinCAD.g:7860:1: ( ( rule__GetDelayScaleControl__ControlAssignment_4 )? )
            {
            // InternalSpinCAD.g:7860:1: ( ( rule__GetDelayScaleControl__ControlAssignment_4 )? )
            // InternalSpinCAD.g:7861:1: ( rule__GetDelayScaleControl__ControlAssignment_4 )?
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getControlAssignment_4()); 
            // InternalSpinCAD.g:7862:1: ( rule__GetDelayScaleControl__ControlAssignment_4 )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==RULE_ID) ) {
                int LA54_1 = input.LA(2);

                if ( (LA54_1==EOF||LA54_1==RULE_ID||LA54_1==RULE_SC_COMMENT||(LA54_1>=25 && LA54_1<=37)||(LA54_1>=39 && LA54_1<=61)||(LA54_1>=63 && LA54_1<=89)) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    // InternalSpinCAD.g:7862:2: rule__GetDelayScaleControl__ControlAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__GetDelayScaleControl__ControlAssignment_4();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getGetDelayScaleControlAccess().getControlAssignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__Group__4__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__0"
    // InternalSpinCAD.g:7882:1: rule__ReadChorusTap__Group__0 : rule__ReadChorusTap__Group__0__Impl rule__ReadChorusTap__Group__1 ;
    public final void rule__ReadChorusTap__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7886:1: ( rule__ReadChorusTap__Group__0__Impl rule__ReadChorusTap__Group__1 )
            // InternalSpinCAD.g:7887:2: rule__ReadChorusTap__Group__0__Impl rule__ReadChorusTap__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ReadChorusTap__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__0"


    // $ANTLR start "rule__ReadChorusTap__Group__0__Impl"
    // InternalSpinCAD.g:7894:1: rule__ReadChorusTap__Group__0__Impl : ( '@readChorusTap' ) ;
    public final void rule__ReadChorusTap__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7898:1: ( ( '@readChorusTap' ) )
            // InternalSpinCAD.g:7899:1: ( '@readChorusTap' )
            {
            // InternalSpinCAD.g:7899:1: ( '@readChorusTap' )
            // InternalSpinCAD.g:7900:1: '@readChorusTap'
            {
             before(grammarAccess.getReadChorusTapAccess().getReadChorusTapKeyword_0()); 
            match(input,49,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getReadChorusTapKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__0__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__1"
    // InternalSpinCAD.g:7913:1: rule__ReadChorusTap__Group__1 : rule__ReadChorusTap__Group__1__Impl rule__ReadChorusTap__Group__2 ;
    public final void rule__ReadChorusTap__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7917:1: ( rule__ReadChorusTap__Group__1__Impl rule__ReadChorusTap__Group__2 )
            // InternalSpinCAD.g:7918:2: rule__ReadChorusTap__Group__1__Impl rule__ReadChorusTap__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__ReadChorusTap__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__1"


    // $ANTLR start "rule__ReadChorusTap__Group__1__Impl"
    // InternalSpinCAD.g:7925:1: rule__ReadChorusTap__Group__1__Impl : ( ( rule__ReadChorusTap__LfoAssignment_1 ) ) ;
    public final void rule__ReadChorusTap__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7929:1: ( ( ( rule__ReadChorusTap__LfoAssignment_1 ) ) )
            // InternalSpinCAD.g:7930:1: ( ( rule__ReadChorusTap__LfoAssignment_1 ) )
            {
            // InternalSpinCAD.g:7930:1: ( ( rule__ReadChorusTap__LfoAssignment_1 ) )
            // InternalSpinCAD.g:7931:1: ( rule__ReadChorusTap__LfoAssignment_1 )
            {
             before(grammarAccess.getReadChorusTapAccess().getLfoAssignment_1()); 
            // InternalSpinCAD.g:7932:1: ( rule__ReadChorusTap__LfoAssignment_1 )
            // InternalSpinCAD.g:7932:2: rule__ReadChorusTap__LfoAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__LfoAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getLfoAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__1__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__2"
    // InternalSpinCAD.g:7942:1: rule__ReadChorusTap__Group__2 : rule__ReadChorusTap__Group__2__Impl rule__ReadChorusTap__Group__3 ;
    public final void rule__ReadChorusTap__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7946:1: ( rule__ReadChorusTap__Group__2__Impl rule__ReadChorusTap__Group__3 )
            // InternalSpinCAD.g:7947:2: rule__ReadChorusTap__Group__2__Impl rule__ReadChorusTap__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__ReadChorusTap__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__2"


    // $ANTLR start "rule__ReadChorusTap__Group__2__Impl"
    // InternalSpinCAD.g:7954:1: rule__ReadChorusTap__Group__2__Impl : ( ( rule__ReadChorusTap__PhaseAssignment_2 ) ) ;
    public final void rule__ReadChorusTap__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7958:1: ( ( ( rule__ReadChorusTap__PhaseAssignment_2 ) ) )
            // InternalSpinCAD.g:7959:1: ( ( rule__ReadChorusTap__PhaseAssignment_2 ) )
            {
            // InternalSpinCAD.g:7959:1: ( ( rule__ReadChorusTap__PhaseAssignment_2 ) )
            // InternalSpinCAD.g:7960:1: ( rule__ReadChorusTap__PhaseAssignment_2 )
            {
             before(grammarAccess.getReadChorusTapAccess().getPhaseAssignment_2()); 
            // InternalSpinCAD.g:7961:1: ( rule__ReadChorusTap__PhaseAssignment_2 )
            // InternalSpinCAD.g:7961:2: rule__ReadChorusTap__PhaseAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__PhaseAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getPhaseAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__2__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__3"
    // InternalSpinCAD.g:7971:1: rule__ReadChorusTap__Group__3 : rule__ReadChorusTap__Group__3__Impl rule__ReadChorusTap__Group__4 ;
    public final void rule__ReadChorusTap__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7975:1: ( rule__ReadChorusTap__Group__3__Impl rule__ReadChorusTap__Group__4 )
            // InternalSpinCAD.g:7976:2: rule__ReadChorusTap__Group__3__Impl rule__ReadChorusTap__Group__4
            {
            pushFollow(FOLLOW_9);
            rule__ReadChorusTap__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__3"


    // $ANTLR start "rule__ReadChorusTap__Group__3__Impl"
    // InternalSpinCAD.g:7983:1: rule__ReadChorusTap__Group__3__Impl : ( ( rule__ReadChorusTap__RatioAssignment_3 ) ) ;
    public final void rule__ReadChorusTap__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:7987:1: ( ( ( rule__ReadChorusTap__RatioAssignment_3 ) ) )
            // InternalSpinCAD.g:7988:1: ( ( rule__ReadChorusTap__RatioAssignment_3 ) )
            {
            // InternalSpinCAD.g:7988:1: ( ( rule__ReadChorusTap__RatioAssignment_3 ) )
            // InternalSpinCAD.g:7989:1: ( rule__ReadChorusTap__RatioAssignment_3 )
            {
             before(grammarAccess.getReadChorusTapAccess().getRatioAssignment_3()); 
            // InternalSpinCAD.g:7990:1: ( rule__ReadChorusTap__RatioAssignment_3 )
            // InternalSpinCAD.g:7990:2: rule__ReadChorusTap__RatioAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__RatioAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getRatioAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__3__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__4"
    // InternalSpinCAD.g:8000:1: rule__ReadChorusTap__Group__4 : rule__ReadChorusTap__Group__4__Impl rule__ReadChorusTap__Group__5 ;
    public final void rule__ReadChorusTap__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8004:1: ( rule__ReadChorusTap__Group__4__Impl rule__ReadChorusTap__Group__5 )
            // InternalSpinCAD.g:8005:2: rule__ReadChorusTap__Group__4__Impl rule__ReadChorusTap__Group__5
            {
            pushFollow(FOLLOW_9);
            rule__ReadChorusTap__Group__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__4"


    // $ANTLR start "rule__ReadChorusTap__Group__4__Impl"
    // InternalSpinCAD.g:8012:1: rule__ReadChorusTap__Group__4__Impl : ( ( rule__ReadChorusTap__LengthAssignment_4 ) ) ;
    public final void rule__ReadChorusTap__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8016:1: ( ( ( rule__ReadChorusTap__LengthAssignment_4 ) ) )
            // InternalSpinCAD.g:8017:1: ( ( rule__ReadChorusTap__LengthAssignment_4 ) )
            {
            // InternalSpinCAD.g:8017:1: ( ( rule__ReadChorusTap__LengthAssignment_4 ) )
            // InternalSpinCAD.g:8018:1: ( rule__ReadChorusTap__LengthAssignment_4 )
            {
             before(grammarAccess.getReadChorusTapAccess().getLengthAssignment_4()); 
            // InternalSpinCAD.g:8019:1: ( rule__ReadChorusTap__LengthAssignment_4 )
            // InternalSpinCAD.g:8019:2: rule__ReadChorusTap__LengthAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__LengthAssignment_4();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getLengthAssignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__4__Impl"


    // $ANTLR start "rule__ReadChorusTap__Group__5"
    // InternalSpinCAD.g:8029:1: rule__ReadChorusTap__Group__5 : rule__ReadChorusTap__Group__5__Impl ;
    public final void rule__ReadChorusTap__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8033:1: ( rule__ReadChorusTap__Group__5__Impl )
            // InternalSpinCAD.g:8034:2: rule__ReadChorusTap__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__Group__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__5"


    // $ANTLR start "rule__ReadChorusTap__Group__5__Impl"
    // InternalSpinCAD.g:8040:1: rule__ReadChorusTap__Group__5__Impl : ( ( rule__ReadChorusTap__OffsetAssignment_5 ) ) ;
    public final void rule__ReadChorusTap__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8044:1: ( ( ( rule__ReadChorusTap__OffsetAssignment_5 ) ) )
            // InternalSpinCAD.g:8045:1: ( ( rule__ReadChorusTap__OffsetAssignment_5 ) )
            {
            // InternalSpinCAD.g:8045:1: ( ( rule__ReadChorusTap__OffsetAssignment_5 ) )
            // InternalSpinCAD.g:8046:1: ( rule__ReadChorusTap__OffsetAssignment_5 )
            {
             before(grammarAccess.getReadChorusTapAccess().getOffsetAssignment_5()); 
            // InternalSpinCAD.g:8047:1: ( rule__ReadChorusTap__OffsetAssignment_5 )
            // InternalSpinCAD.g:8047:2: rule__ReadChorusTap__OffsetAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__ReadChorusTap__OffsetAssignment_5();

            state._fsp--;


            }

             after(grammarAccess.getReadChorusTapAccess().getOffsetAssignment_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__Group__5__Impl"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__0"
    // InternalSpinCAD.g:8069:1: rule__GetSamplesFromRatio__Group__0 : rule__GetSamplesFromRatio__Group__0__Impl rule__GetSamplesFromRatio__Group__1 ;
    public final void rule__GetSamplesFromRatio__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8073:1: ( rule__GetSamplesFromRatio__Group__0__Impl rule__GetSamplesFromRatio__Group__1 )
            // InternalSpinCAD.g:8074:2: rule__GetSamplesFromRatio__Group__0__Impl rule__GetSamplesFromRatio__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__GetSamplesFromRatio__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__0"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__0__Impl"
    // InternalSpinCAD.g:8081:1: rule__GetSamplesFromRatio__Group__0__Impl : ( '@getSamplesFromRatio' ) ;
    public final void rule__GetSamplesFromRatio__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8085:1: ( ( '@getSamplesFromRatio' ) )
            // InternalSpinCAD.g:8086:1: ( '@getSamplesFromRatio' )
            {
            // InternalSpinCAD.g:8086:1: ( '@getSamplesFromRatio' )
            // InternalSpinCAD.g:8087:1: '@getSamplesFromRatio'
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getGetSamplesFromRatioKeyword_0()); 
            match(input,50,FOLLOW_2); 
             after(grammarAccess.getGetSamplesFromRatioAccess().getGetSamplesFromRatioKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__0__Impl"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__1"
    // InternalSpinCAD.g:8100:1: rule__GetSamplesFromRatio__Group__1 : rule__GetSamplesFromRatio__Group__1__Impl rule__GetSamplesFromRatio__Group__2 ;
    public final void rule__GetSamplesFromRatio__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8104:1: ( rule__GetSamplesFromRatio__Group__1__Impl rule__GetSamplesFromRatio__Group__2 )
            // InternalSpinCAD.g:8105:2: rule__GetSamplesFromRatio__Group__1__Impl rule__GetSamplesFromRatio__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__GetSamplesFromRatio__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__1"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__1__Impl"
    // InternalSpinCAD.g:8112:1: rule__GetSamplesFromRatio__Group__1__Impl : ( ( rule__GetSamplesFromRatio__VariableAssignment_1 ) ) ;
    public final void rule__GetSamplesFromRatio__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8116:1: ( ( ( rule__GetSamplesFromRatio__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:8117:1: ( ( rule__GetSamplesFromRatio__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:8117:1: ( ( rule__GetSamplesFromRatio__VariableAssignment_1 ) )
            // InternalSpinCAD.g:8118:1: ( rule__GetSamplesFromRatio__VariableAssignment_1 )
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:8119:1: ( rule__GetSamplesFromRatio__VariableAssignment_1 )
            // InternalSpinCAD.g:8119:2: rule__GetSamplesFromRatio__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getGetSamplesFromRatioAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__1__Impl"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__2"
    // InternalSpinCAD.g:8129:1: rule__GetSamplesFromRatio__Group__2 : rule__GetSamplesFromRatio__Group__2__Impl rule__GetSamplesFromRatio__Group__3 ;
    public final void rule__GetSamplesFromRatio__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8133:1: ( rule__GetSamplesFromRatio__Group__2__Impl rule__GetSamplesFromRatio__Group__3 )
            // InternalSpinCAD.g:8134:2: rule__GetSamplesFromRatio__Group__2__Impl rule__GetSamplesFromRatio__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__GetSamplesFromRatio__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__2"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__2__Impl"
    // InternalSpinCAD.g:8141:1: rule__GetSamplesFromRatio__Group__2__Impl : ( ( rule__GetSamplesFromRatio__RatioAssignment_2 ) ) ;
    public final void rule__GetSamplesFromRatio__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8145:1: ( ( ( rule__GetSamplesFromRatio__RatioAssignment_2 ) ) )
            // InternalSpinCAD.g:8146:1: ( ( rule__GetSamplesFromRatio__RatioAssignment_2 ) )
            {
            // InternalSpinCAD.g:8146:1: ( ( rule__GetSamplesFromRatio__RatioAssignment_2 ) )
            // InternalSpinCAD.g:8147:1: ( rule__GetSamplesFromRatio__RatioAssignment_2 )
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getRatioAssignment_2()); 
            // InternalSpinCAD.g:8148:1: ( rule__GetSamplesFromRatio__RatioAssignment_2 )
            // InternalSpinCAD.g:8148:2: rule__GetSamplesFromRatio__RatioAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__RatioAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getGetSamplesFromRatioAccess().getRatioAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__2__Impl"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__3"
    // InternalSpinCAD.g:8158:1: rule__GetSamplesFromRatio__Group__3 : rule__GetSamplesFromRatio__Group__3__Impl ;
    public final void rule__GetSamplesFromRatio__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8162:1: ( rule__GetSamplesFromRatio__Group__3__Impl )
            // InternalSpinCAD.g:8163:2: rule__GetSamplesFromRatio__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__3"


    // $ANTLR start "rule__GetSamplesFromRatio__Group__3__Impl"
    // InternalSpinCAD.g:8169:1: rule__GetSamplesFromRatio__Group__3__Impl : ( ( rule__GetSamplesFromRatio__LengthAssignment_3 ) ) ;
    public final void rule__GetSamplesFromRatio__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8173:1: ( ( ( rule__GetSamplesFromRatio__LengthAssignment_3 ) ) )
            // InternalSpinCAD.g:8174:1: ( ( rule__GetSamplesFromRatio__LengthAssignment_3 ) )
            {
            // InternalSpinCAD.g:8174:1: ( ( rule__GetSamplesFromRatio__LengthAssignment_3 ) )
            // InternalSpinCAD.g:8175:1: ( rule__GetSamplesFromRatio__LengthAssignment_3 )
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getLengthAssignment_3()); 
            // InternalSpinCAD.g:8176:1: ( rule__GetSamplesFromRatio__LengthAssignment_3 )
            // InternalSpinCAD.g:8176:2: rule__GetSamplesFromRatio__LengthAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__GetSamplesFromRatio__LengthAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getGetSamplesFromRatioAccess().getLengthAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__Group__3__Impl"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__0"
    // InternalSpinCAD.g:8194:1: rule__SemitonesToRmpRate__Group__0 : rule__SemitonesToRmpRate__Group__0__Impl rule__SemitonesToRmpRate__Group__1 ;
    public final void rule__SemitonesToRmpRate__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8198:1: ( rule__SemitonesToRmpRate__Group__0__Impl rule__SemitonesToRmpRate__Group__1 )
            // InternalSpinCAD.g:8199:2: rule__SemitonesToRmpRate__Group__0__Impl rule__SemitonesToRmpRate__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SemitonesToRmpRate__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__0"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__0__Impl"
    // InternalSpinCAD.g:8206:1: rule__SemitonesToRmpRate__Group__0__Impl : ( '@semitonesToRmpRate' ) ;
    public final void rule__SemitonesToRmpRate__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8210:1: ( ( '@semitonesToRmpRate' ) )
            // InternalSpinCAD.g:8211:1: ( '@semitonesToRmpRate' )
            {
            // InternalSpinCAD.g:8211:1: ( '@semitonesToRmpRate' )
            // InternalSpinCAD.g:8212:1: '@semitonesToRmpRate'
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesToRmpRateKeyword_0()); 
            match(input,51,FOLLOW_2); 
             after(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesToRmpRateKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__0__Impl"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__1"
    // InternalSpinCAD.g:8225:1: rule__SemitonesToRmpRate__Group__1 : rule__SemitonesToRmpRate__Group__1__Impl rule__SemitonesToRmpRate__Group__2 ;
    public final void rule__SemitonesToRmpRate__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8229:1: ( rule__SemitonesToRmpRate__Group__1__Impl rule__SemitonesToRmpRate__Group__2 )
            // InternalSpinCAD.g:8230:2: rule__SemitonesToRmpRate__Group__1__Impl rule__SemitonesToRmpRate__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__SemitonesToRmpRate__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__1"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__1__Impl"
    // InternalSpinCAD.g:8237:1: rule__SemitonesToRmpRate__Group__1__Impl : ( ( rule__SemitonesToRmpRate__VariableAssignment_1 ) ) ;
    public final void rule__SemitonesToRmpRate__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8241:1: ( ( ( rule__SemitonesToRmpRate__VariableAssignment_1 ) ) )
            // InternalSpinCAD.g:8242:1: ( ( rule__SemitonesToRmpRate__VariableAssignment_1 ) )
            {
            // InternalSpinCAD.g:8242:1: ( ( rule__SemitonesToRmpRate__VariableAssignment_1 ) )
            // InternalSpinCAD.g:8243:1: ( rule__SemitonesToRmpRate__VariableAssignment_1 )
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getVariableAssignment_1()); 
            // InternalSpinCAD.g:8244:1: ( rule__SemitonesToRmpRate__VariableAssignment_1 )
            // InternalSpinCAD.g:8244:2: rule__SemitonesToRmpRate__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__VariableAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSemitonesToRmpRateAccess().getVariableAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__1__Impl"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__2"
    // InternalSpinCAD.g:8254:1: rule__SemitonesToRmpRate__Group__2 : rule__SemitonesToRmpRate__Group__2__Impl ;
    public final void rule__SemitonesToRmpRate__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8258:1: ( rule__SemitonesToRmpRate__Group__2__Impl )
            // InternalSpinCAD.g:8259:2: rule__SemitonesToRmpRate__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__2"


    // $ANTLR start "rule__SemitonesToRmpRate__Group__2__Impl"
    // InternalSpinCAD.g:8265:1: rule__SemitonesToRmpRate__Group__2__Impl : ( ( rule__SemitonesToRmpRate__SemitonesAssignment_2 ) ) ;
    public final void rule__SemitonesToRmpRate__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8269:1: ( ( ( rule__SemitonesToRmpRate__SemitonesAssignment_2 ) ) )
            // InternalSpinCAD.g:8270:1: ( ( rule__SemitonesToRmpRate__SemitonesAssignment_2 ) )
            {
            // InternalSpinCAD.g:8270:1: ( ( rule__SemitonesToRmpRate__SemitonesAssignment_2 ) )
            // InternalSpinCAD.g:8271:1: ( rule__SemitonesToRmpRate__SemitonesAssignment_2 )
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesAssignment_2()); 
            // InternalSpinCAD.g:8272:1: ( rule__SemitonesToRmpRate__SemitonesAssignment_2 )
            // InternalSpinCAD.g:8272:2: rule__SemitonesToRmpRate__SemitonesAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SemitonesToRmpRate__SemitonesAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__Group__2__Impl"


    // $ANTLR start "rule__GetBaseAddress__Group__0"
    // InternalSpinCAD.g:8288:1: rule__GetBaseAddress__Group__0 : rule__GetBaseAddress__Group__0__Impl rule__GetBaseAddress__Group__1 ;
    public final void rule__GetBaseAddress__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8292:1: ( rule__GetBaseAddress__Group__0__Impl rule__GetBaseAddress__Group__1 )
            // InternalSpinCAD.g:8293:2: rule__GetBaseAddress__Group__0__Impl rule__GetBaseAddress__Group__1
            {
            pushFollow(FOLLOW_16);
            rule__GetBaseAddress__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__GetBaseAddress__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetBaseAddress__Group__0"


    // $ANTLR start "rule__GetBaseAddress__Group__0__Impl"
    // InternalSpinCAD.g:8300:1: rule__GetBaseAddress__Group__0__Impl : ( () ) ;
    public final void rule__GetBaseAddress__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8304:1: ( ( () ) )
            // InternalSpinCAD.g:8305:1: ( () )
            {
            // InternalSpinCAD.g:8305:1: ( () )
            // InternalSpinCAD.g:8306:1: ()
            {
             before(grammarAccess.getGetBaseAddressAccess().getGetBaseAddressAction_0()); 
            // InternalSpinCAD.g:8307:1: ()
            // InternalSpinCAD.g:8309:1: 
            {
            }

             after(grammarAccess.getGetBaseAddressAccess().getGetBaseAddressAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetBaseAddress__Group__0__Impl"


    // $ANTLR start "rule__GetBaseAddress__Group__1"
    // InternalSpinCAD.g:8319:1: rule__GetBaseAddress__Group__1 : rule__GetBaseAddress__Group__1__Impl ;
    public final void rule__GetBaseAddress__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8323:1: ( rule__GetBaseAddress__Group__1__Impl )
            // InternalSpinCAD.g:8324:2: rule__GetBaseAddress__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__GetBaseAddress__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetBaseAddress__Group__1"


    // $ANTLR start "rule__GetBaseAddress__Group__1__Impl"
    // InternalSpinCAD.g:8330:1: rule__GetBaseAddress__Group__1__Impl : ( '@getBaseAddress' ) ;
    public final void rule__GetBaseAddress__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8334:1: ( ( '@getBaseAddress' ) )
            // InternalSpinCAD.g:8335:1: ( '@getBaseAddress' )
            {
            // InternalSpinCAD.g:8335:1: ( '@getBaseAddress' )
            // InternalSpinCAD.g:8336:1: '@getBaseAddress'
            {
             before(grammarAccess.getGetBaseAddressAccess().getGetBaseAddressKeyword_1()); 
            match(input,52,FOLLOW_2); 
             after(grammarAccess.getGetBaseAddressAccess().getGetBaseAddressKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetBaseAddress__Group__1__Impl"


    // $ANTLR start "rule__SetOutputPin__Group__0"
    // InternalSpinCAD.g:8353:1: rule__SetOutputPin__Group__0 : rule__SetOutputPin__Group__0__Impl rule__SetOutputPin__Group__1 ;
    public final void rule__SetOutputPin__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8357:1: ( rule__SetOutputPin__Group__0__Impl rule__SetOutputPin__Group__1 )
            // InternalSpinCAD.g:8358:2: rule__SetOutputPin__Group__0__Impl rule__SetOutputPin__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__SetOutputPin__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SetOutputPin__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__0"


    // $ANTLR start "rule__SetOutputPin__Group__0__Impl"
    // InternalSpinCAD.g:8365:1: rule__SetOutputPin__Group__0__Impl : ( '@setOutputPin' ) ;
    public final void rule__SetOutputPin__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8369:1: ( ( '@setOutputPin' ) )
            // InternalSpinCAD.g:8370:1: ( '@setOutputPin' )
            {
            // InternalSpinCAD.g:8370:1: ( '@setOutputPin' )
            // InternalSpinCAD.g:8371:1: '@setOutputPin'
            {
             before(grammarAccess.getSetOutputPinAccess().getSetOutputPinKeyword_0()); 
            match(input,53,FOLLOW_2); 
             after(grammarAccess.getSetOutputPinAccess().getSetOutputPinKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__0__Impl"


    // $ANTLR start "rule__SetOutputPin__Group__1"
    // InternalSpinCAD.g:8384:1: rule__SetOutputPin__Group__1 : rule__SetOutputPin__Group__1__Impl rule__SetOutputPin__Group__2 ;
    public final void rule__SetOutputPin__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8388:1: ( rule__SetOutputPin__Group__1__Impl rule__SetOutputPin__Group__2 )
            // InternalSpinCAD.g:8389:2: rule__SetOutputPin__Group__1__Impl rule__SetOutputPin__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__SetOutputPin__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SetOutputPin__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__1"


    // $ANTLR start "rule__SetOutputPin__Group__1__Impl"
    // InternalSpinCAD.g:8396:1: rule__SetOutputPin__Group__1__Impl : ( ( rule__SetOutputPin__PinNameAssignment_1 ) ) ;
    public final void rule__SetOutputPin__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8400:1: ( ( ( rule__SetOutputPin__PinNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8401:1: ( ( rule__SetOutputPin__PinNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8401:1: ( ( rule__SetOutputPin__PinNameAssignment_1 ) )
            // InternalSpinCAD.g:8402:1: ( rule__SetOutputPin__PinNameAssignment_1 )
            {
             before(grammarAccess.getSetOutputPinAccess().getPinNameAssignment_1()); 
            // InternalSpinCAD.g:8403:1: ( rule__SetOutputPin__PinNameAssignment_1 )
            // InternalSpinCAD.g:8403:2: rule__SetOutputPin__PinNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SetOutputPin__PinNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSetOutputPinAccess().getPinNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__1__Impl"


    // $ANTLR start "rule__SetOutputPin__Group__2"
    // InternalSpinCAD.g:8413:1: rule__SetOutputPin__Group__2 : rule__SetOutputPin__Group__2__Impl ;
    public final void rule__SetOutputPin__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8417:1: ( rule__SetOutputPin__Group__2__Impl )
            // InternalSpinCAD.g:8418:2: rule__SetOutputPin__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetOutputPin__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__2"


    // $ANTLR start "rule__SetOutputPin__Group__2__Impl"
    // InternalSpinCAD.g:8424:1: rule__SetOutputPin__Group__2__Impl : ( ( rule__SetOutputPin__VarNameAssignment_2 ) ) ;
    public final void rule__SetOutputPin__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8428:1: ( ( ( rule__SetOutputPin__VarNameAssignment_2 ) ) )
            // InternalSpinCAD.g:8429:1: ( ( rule__SetOutputPin__VarNameAssignment_2 ) )
            {
            // InternalSpinCAD.g:8429:1: ( ( rule__SetOutputPin__VarNameAssignment_2 ) )
            // InternalSpinCAD.g:8430:1: ( rule__SetOutputPin__VarNameAssignment_2 )
            {
             before(grammarAccess.getSetOutputPinAccess().getVarNameAssignment_2()); 
            // InternalSpinCAD.g:8431:1: ( rule__SetOutputPin__VarNameAssignment_2 )
            // InternalSpinCAD.g:8431:2: rule__SetOutputPin__VarNameAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SetOutputPin__VarNameAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSetOutputPinAccess().getVarNameAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__Group__2__Impl"


    // $ANTLR start "rule__MinusDouble__Group__0"
    // InternalSpinCAD.g:8447:1: rule__MinusDouble__Group__0 : rule__MinusDouble__Group__0__Impl rule__MinusDouble__Group__1 ;
    public final void rule__MinusDouble__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8451:1: ( rule__MinusDouble__Group__0__Impl rule__MinusDouble__Group__1 )
            // InternalSpinCAD.g:8452:2: rule__MinusDouble__Group__0__Impl rule__MinusDouble__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__MinusDouble__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MinusDouble__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__0"


    // $ANTLR start "rule__MinusDouble__Group__0__Impl"
    // InternalSpinCAD.g:8459:1: rule__MinusDouble__Group__0__Impl : ( '@minusDouble' ) ;
    public final void rule__MinusDouble__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8463:1: ( ( '@minusDouble' ) )
            // InternalSpinCAD.g:8464:1: ( '@minusDouble' )
            {
            // InternalSpinCAD.g:8464:1: ( '@minusDouble' )
            // InternalSpinCAD.g:8465:1: '@minusDouble'
            {
             before(grammarAccess.getMinusDoubleAccess().getMinusDoubleKeyword_0()); 
            match(input,54,FOLLOW_2); 
             after(grammarAccess.getMinusDoubleAccess().getMinusDoubleKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__0__Impl"


    // $ANTLR start "rule__MinusDouble__Group__1"
    // InternalSpinCAD.g:8478:1: rule__MinusDouble__Group__1 : rule__MinusDouble__Group__1__Impl rule__MinusDouble__Group__2 ;
    public final void rule__MinusDouble__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8482:1: ( rule__MinusDouble__Group__1__Impl rule__MinusDouble__Group__2 )
            // InternalSpinCAD.g:8483:2: rule__MinusDouble__Group__1__Impl rule__MinusDouble__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__MinusDouble__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MinusDouble__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__1"


    // $ANTLR start "rule__MinusDouble__Group__1__Impl"
    // InternalSpinCAD.g:8490:1: rule__MinusDouble__Group__1__Impl : ( ( rule__MinusDouble__VarNameAssignment_1 ) ) ;
    public final void rule__MinusDouble__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8494:1: ( ( ( rule__MinusDouble__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8495:1: ( ( rule__MinusDouble__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8495:1: ( ( rule__MinusDouble__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:8496:1: ( rule__MinusDouble__VarNameAssignment_1 )
            {
             before(grammarAccess.getMinusDoubleAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:8497:1: ( rule__MinusDouble__VarNameAssignment_1 )
            // InternalSpinCAD.g:8497:2: rule__MinusDouble__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__MinusDouble__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getMinusDoubleAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__1__Impl"


    // $ANTLR start "rule__MinusDouble__Group__2"
    // InternalSpinCAD.g:8507:1: rule__MinusDouble__Group__2 : rule__MinusDouble__Group__2__Impl rule__MinusDouble__Group__3 ;
    public final void rule__MinusDouble__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8511:1: ( rule__MinusDouble__Group__2__Impl rule__MinusDouble__Group__3 )
            // InternalSpinCAD.g:8512:2: rule__MinusDouble__Group__2__Impl rule__MinusDouble__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__MinusDouble__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MinusDouble__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__2"


    // $ANTLR start "rule__MinusDouble__Group__2__Impl"
    // InternalSpinCAD.g:8519:1: rule__MinusDouble__Group__2__Impl : ( ( rule__MinusDouble__HighAssignment_2 ) ) ;
    public final void rule__MinusDouble__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8523:1: ( ( ( rule__MinusDouble__HighAssignment_2 ) ) )
            // InternalSpinCAD.g:8524:1: ( ( rule__MinusDouble__HighAssignment_2 ) )
            {
            // InternalSpinCAD.g:8524:1: ( ( rule__MinusDouble__HighAssignment_2 ) )
            // InternalSpinCAD.g:8525:1: ( rule__MinusDouble__HighAssignment_2 )
            {
             before(grammarAccess.getMinusDoubleAccess().getHighAssignment_2()); 
            // InternalSpinCAD.g:8526:1: ( rule__MinusDouble__HighAssignment_2 )
            // InternalSpinCAD.g:8526:2: rule__MinusDouble__HighAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MinusDouble__HighAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getMinusDoubleAccess().getHighAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__2__Impl"


    // $ANTLR start "rule__MinusDouble__Group__3"
    // InternalSpinCAD.g:8536:1: rule__MinusDouble__Group__3 : rule__MinusDouble__Group__3__Impl ;
    public final void rule__MinusDouble__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8540:1: ( rule__MinusDouble__Group__3__Impl )
            // InternalSpinCAD.g:8541:2: rule__MinusDouble__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MinusDouble__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__3"


    // $ANTLR start "rule__MinusDouble__Group__3__Impl"
    // InternalSpinCAD.g:8547:1: rule__MinusDouble__Group__3__Impl : ( ( rule__MinusDouble__LowAssignment_3 ) ) ;
    public final void rule__MinusDouble__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8551:1: ( ( ( rule__MinusDouble__LowAssignment_3 ) ) )
            // InternalSpinCAD.g:8552:1: ( ( rule__MinusDouble__LowAssignment_3 ) )
            {
            // InternalSpinCAD.g:8552:1: ( ( rule__MinusDouble__LowAssignment_3 ) )
            // InternalSpinCAD.g:8553:1: ( rule__MinusDouble__LowAssignment_3 )
            {
             before(grammarAccess.getMinusDoubleAccess().getLowAssignment_3()); 
            // InternalSpinCAD.g:8554:1: ( rule__MinusDouble__LowAssignment_3 )
            // InternalSpinCAD.g:8554:2: rule__MinusDouble__LowAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__MinusDouble__LowAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getMinusDoubleAccess().getLowAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__Group__3__Impl"


    // $ANTLR start "rule__DivideDouble__Group__0"
    // InternalSpinCAD.g:8572:1: rule__DivideDouble__Group__0 : rule__DivideDouble__Group__0__Impl rule__DivideDouble__Group__1 ;
    public final void rule__DivideDouble__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8576:1: ( rule__DivideDouble__Group__0__Impl rule__DivideDouble__Group__1 )
            // InternalSpinCAD.g:8577:2: rule__DivideDouble__Group__0__Impl rule__DivideDouble__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__DivideDouble__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideDouble__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__0"


    // $ANTLR start "rule__DivideDouble__Group__0__Impl"
    // InternalSpinCAD.g:8584:1: rule__DivideDouble__Group__0__Impl : ( '@divideDouble' ) ;
    public final void rule__DivideDouble__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8588:1: ( ( '@divideDouble' ) )
            // InternalSpinCAD.g:8589:1: ( '@divideDouble' )
            {
            // InternalSpinCAD.g:8589:1: ( '@divideDouble' )
            // InternalSpinCAD.g:8590:1: '@divideDouble'
            {
             before(grammarAccess.getDivideDoubleAccess().getDivideDoubleKeyword_0()); 
            match(input,55,FOLLOW_2); 
             after(grammarAccess.getDivideDoubleAccess().getDivideDoubleKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__0__Impl"


    // $ANTLR start "rule__DivideDouble__Group__1"
    // InternalSpinCAD.g:8603:1: rule__DivideDouble__Group__1 : rule__DivideDouble__Group__1__Impl rule__DivideDouble__Group__2 ;
    public final void rule__DivideDouble__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8607:1: ( rule__DivideDouble__Group__1__Impl rule__DivideDouble__Group__2 )
            // InternalSpinCAD.g:8608:2: rule__DivideDouble__Group__1__Impl rule__DivideDouble__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__DivideDouble__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideDouble__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__1"


    // $ANTLR start "rule__DivideDouble__Group__1__Impl"
    // InternalSpinCAD.g:8615:1: rule__DivideDouble__Group__1__Impl : ( ( rule__DivideDouble__VarNameAssignment_1 ) ) ;
    public final void rule__DivideDouble__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8619:1: ( ( ( rule__DivideDouble__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8620:1: ( ( rule__DivideDouble__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8620:1: ( ( rule__DivideDouble__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:8621:1: ( rule__DivideDouble__VarNameAssignment_1 )
            {
             before(grammarAccess.getDivideDoubleAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:8622:1: ( rule__DivideDouble__VarNameAssignment_1 )
            // InternalSpinCAD.g:8622:2: rule__DivideDouble__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DivideDouble__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getDivideDoubleAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__1__Impl"


    // $ANTLR start "rule__DivideDouble__Group__2"
    // InternalSpinCAD.g:8632:1: rule__DivideDouble__Group__2 : rule__DivideDouble__Group__2__Impl rule__DivideDouble__Group__3 ;
    public final void rule__DivideDouble__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8636:1: ( rule__DivideDouble__Group__2__Impl rule__DivideDouble__Group__3 )
            // InternalSpinCAD.g:8637:2: rule__DivideDouble__Group__2__Impl rule__DivideDouble__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__DivideDouble__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideDouble__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__2"


    // $ANTLR start "rule__DivideDouble__Group__2__Impl"
    // InternalSpinCAD.g:8644:1: rule__DivideDouble__Group__2__Impl : ( ( rule__DivideDouble__HighAssignment_2 ) ) ;
    public final void rule__DivideDouble__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8648:1: ( ( ( rule__DivideDouble__HighAssignment_2 ) ) )
            // InternalSpinCAD.g:8649:1: ( ( rule__DivideDouble__HighAssignment_2 ) )
            {
            // InternalSpinCAD.g:8649:1: ( ( rule__DivideDouble__HighAssignment_2 ) )
            // InternalSpinCAD.g:8650:1: ( rule__DivideDouble__HighAssignment_2 )
            {
             before(grammarAccess.getDivideDoubleAccess().getHighAssignment_2()); 
            // InternalSpinCAD.g:8651:1: ( rule__DivideDouble__HighAssignment_2 )
            // InternalSpinCAD.g:8651:2: rule__DivideDouble__HighAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__DivideDouble__HighAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getDivideDoubleAccess().getHighAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__2__Impl"


    // $ANTLR start "rule__DivideDouble__Group__3"
    // InternalSpinCAD.g:8661:1: rule__DivideDouble__Group__3 : rule__DivideDouble__Group__3__Impl ;
    public final void rule__DivideDouble__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8665:1: ( rule__DivideDouble__Group__3__Impl )
            // InternalSpinCAD.g:8666:2: rule__DivideDouble__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DivideDouble__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__3"


    // $ANTLR start "rule__DivideDouble__Group__3__Impl"
    // InternalSpinCAD.g:8672:1: rule__DivideDouble__Group__3__Impl : ( ( rule__DivideDouble__LowAssignment_3 ) ) ;
    public final void rule__DivideDouble__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8676:1: ( ( ( rule__DivideDouble__LowAssignment_3 ) ) )
            // InternalSpinCAD.g:8677:1: ( ( rule__DivideDouble__LowAssignment_3 ) )
            {
            // InternalSpinCAD.g:8677:1: ( ( rule__DivideDouble__LowAssignment_3 ) )
            // InternalSpinCAD.g:8678:1: ( rule__DivideDouble__LowAssignment_3 )
            {
             before(grammarAccess.getDivideDoubleAccess().getLowAssignment_3()); 
            // InternalSpinCAD.g:8679:1: ( rule__DivideDouble__LowAssignment_3 )
            // InternalSpinCAD.g:8679:2: rule__DivideDouble__LowAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__DivideDouble__LowAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getDivideDoubleAccess().getLowAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__Group__3__Impl"


    // $ANTLR start "rule__Equals__Group__0"
    // InternalSpinCAD.g:8697:1: rule__Equals__Group__0 : rule__Equals__Group__0__Impl rule__Equals__Group__1 ;
    public final void rule__Equals__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8701:1: ( rule__Equals__Group__0__Impl rule__Equals__Group__1 )
            // InternalSpinCAD.g:8702:2: rule__Equals__Group__0__Impl rule__Equals__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Equals__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Equals__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__0"


    // $ANTLR start "rule__Equals__Group__0__Impl"
    // InternalSpinCAD.g:8709:1: rule__Equals__Group__0__Impl : ( '@equals' ) ;
    public final void rule__Equals__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8713:1: ( ( '@equals' ) )
            // InternalSpinCAD.g:8714:1: ( '@equals' )
            {
            // InternalSpinCAD.g:8714:1: ( '@equals' )
            // InternalSpinCAD.g:8715:1: '@equals'
            {
             before(grammarAccess.getEqualsAccess().getEqualsKeyword_0()); 
            match(input,56,FOLLOW_2); 
             after(grammarAccess.getEqualsAccess().getEqualsKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__0__Impl"


    // $ANTLR start "rule__Equals__Group__1"
    // InternalSpinCAD.g:8728:1: rule__Equals__Group__1 : rule__Equals__Group__1__Impl rule__Equals__Group__2 ;
    public final void rule__Equals__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8732:1: ( rule__Equals__Group__1__Impl rule__Equals__Group__2 )
            // InternalSpinCAD.g:8733:2: rule__Equals__Group__1__Impl rule__Equals__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__Equals__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Equals__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__1"


    // $ANTLR start "rule__Equals__Group__1__Impl"
    // InternalSpinCAD.g:8740:1: rule__Equals__Group__1__Impl : ( ( rule__Equals__VarNameAssignment_1 ) ) ;
    public final void rule__Equals__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8744:1: ( ( ( rule__Equals__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8745:1: ( ( rule__Equals__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8745:1: ( ( rule__Equals__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:8746:1: ( rule__Equals__VarNameAssignment_1 )
            {
             before(grammarAccess.getEqualsAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:8747:1: ( rule__Equals__VarNameAssignment_1 )
            // InternalSpinCAD.g:8747:2: rule__Equals__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Equals__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getEqualsAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__1__Impl"


    // $ANTLR start "rule__Equals__Group__2"
    // InternalSpinCAD.g:8757:1: rule__Equals__Group__2 : rule__Equals__Group__2__Impl ;
    public final void rule__Equals__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8761:1: ( rule__Equals__Group__2__Impl )
            // InternalSpinCAD.g:8762:2: rule__Equals__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Equals__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__2"


    // $ANTLR start "rule__Equals__Group__2__Impl"
    // InternalSpinCAD.g:8768:1: rule__Equals__Group__2__Impl : ( ( rule__Equals__ValueAssignment_2 ) ) ;
    public final void rule__Equals__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8772:1: ( ( ( rule__Equals__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:8773:1: ( ( rule__Equals__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:8773:1: ( ( rule__Equals__ValueAssignment_2 ) )
            // InternalSpinCAD.g:8774:1: ( rule__Equals__ValueAssignment_2 )
            {
             before(grammarAccess.getEqualsAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:8775:1: ( rule__Equals__ValueAssignment_2 )
            // InternalSpinCAD.g:8775:2: rule__Equals__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Equals__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getEqualsAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__Group__2__Impl"


    // $ANTLR start "rule__EqualsBool__Group__0"
    // InternalSpinCAD.g:8791:1: rule__EqualsBool__Group__0 : rule__EqualsBool__Group__0__Impl rule__EqualsBool__Group__1 ;
    public final void rule__EqualsBool__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8795:1: ( rule__EqualsBool__Group__0__Impl rule__EqualsBool__Group__1 )
            // InternalSpinCAD.g:8796:2: rule__EqualsBool__Group__0__Impl rule__EqualsBool__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__EqualsBool__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__EqualsBool__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__0"


    // $ANTLR start "rule__EqualsBool__Group__0__Impl"
    // InternalSpinCAD.g:8803:1: rule__EqualsBool__Group__0__Impl : ( '@equalsBool' ) ;
    public final void rule__EqualsBool__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8807:1: ( ( '@equalsBool' ) )
            // InternalSpinCAD.g:8808:1: ( '@equalsBool' )
            {
            // InternalSpinCAD.g:8808:1: ( '@equalsBool' )
            // InternalSpinCAD.g:8809:1: '@equalsBool'
            {
             before(grammarAccess.getEqualsBoolAccess().getEqualsBoolKeyword_0()); 
            match(input,57,FOLLOW_2); 
             after(grammarAccess.getEqualsBoolAccess().getEqualsBoolKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__0__Impl"


    // $ANTLR start "rule__EqualsBool__Group__1"
    // InternalSpinCAD.g:8822:1: rule__EqualsBool__Group__1 : rule__EqualsBool__Group__1__Impl rule__EqualsBool__Group__2 ;
    public final void rule__EqualsBool__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8826:1: ( rule__EqualsBool__Group__1__Impl rule__EqualsBool__Group__2 )
            // InternalSpinCAD.g:8827:2: rule__EqualsBool__Group__1__Impl rule__EqualsBool__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__EqualsBool__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__EqualsBool__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__1"


    // $ANTLR start "rule__EqualsBool__Group__1__Impl"
    // InternalSpinCAD.g:8834:1: rule__EqualsBool__Group__1__Impl : ( ( rule__EqualsBool__VarNameAssignment_1 ) ) ;
    public final void rule__EqualsBool__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8838:1: ( ( ( rule__EqualsBool__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8839:1: ( ( rule__EqualsBool__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8839:1: ( ( rule__EqualsBool__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:8840:1: ( rule__EqualsBool__VarNameAssignment_1 )
            {
             before(grammarAccess.getEqualsBoolAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:8841:1: ( rule__EqualsBool__VarNameAssignment_1 )
            // InternalSpinCAD.g:8841:2: rule__EqualsBool__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__EqualsBool__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getEqualsBoolAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__1__Impl"


    // $ANTLR start "rule__EqualsBool__Group__2"
    // InternalSpinCAD.g:8851:1: rule__EqualsBool__Group__2 : rule__EqualsBool__Group__2__Impl ;
    public final void rule__EqualsBool__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8855:1: ( rule__EqualsBool__Group__2__Impl )
            // InternalSpinCAD.g:8856:2: rule__EqualsBool__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__EqualsBool__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__2"


    // $ANTLR start "rule__EqualsBool__Group__2__Impl"
    // InternalSpinCAD.g:8862:1: rule__EqualsBool__Group__2__Impl : ( ( rule__EqualsBool__ValueAssignment_2 ) ) ;
    public final void rule__EqualsBool__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8866:1: ( ( ( rule__EqualsBool__ValueAssignment_2 ) ) )
            // InternalSpinCAD.g:8867:1: ( ( rule__EqualsBool__ValueAssignment_2 ) )
            {
            // InternalSpinCAD.g:8867:1: ( ( rule__EqualsBool__ValueAssignment_2 ) )
            // InternalSpinCAD.g:8868:1: ( rule__EqualsBool__ValueAssignment_2 )
            {
             before(grammarAccess.getEqualsBoolAccess().getValueAssignment_2()); 
            // InternalSpinCAD.g:8869:1: ( rule__EqualsBool__ValueAssignment_2 )
            // InternalSpinCAD.g:8869:2: rule__EqualsBool__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__EqualsBool__ValueAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getEqualsBoolAccess().getValueAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__Group__2__Impl"


    // $ANTLR start "rule__DivideInt__Group__0"
    // InternalSpinCAD.g:8885:1: rule__DivideInt__Group__0 : rule__DivideInt__Group__0__Impl rule__DivideInt__Group__1 ;
    public final void rule__DivideInt__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8889:1: ( rule__DivideInt__Group__0__Impl rule__DivideInt__Group__1 )
            // InternalSpinCAD.g:8890:2: rule__DivideInt__Group__0__Impl rule__DivideInt__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__DivideInt__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideInt__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__0"


    // $ANTLR start "rule__DivideInt__Group__0__Impl"
    // InternalSpinCAD.g:8897:1: rule__DivideInt__Group__0__Impl : ( '@divideInt' ) ;
    public final void rule__DivideInt__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8901:1: ( ( '@divideInt' ) )
            // InternalSpinCAD.g:8902:1: ( '@divideInt' )
            {
            // InternalSpinCAD.g:8902:1: ( '@divideInt' )
            // InternalSpinCAD.g:8903:1: '@divideInt'
            {
             before(grammarAccess.getDivideIntAccess().getDivideIntKeyword_0()); 
            match(input,58,FOLLOW_2); 
             after(grammarAccess.getDivideIntAccess().getDivideIntKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__0__Impl"


    // $ANTLR start "rule__DivideInt__Group__1"
    // InternalSpinCAD.g:8916:1: rule__DivideInt__Group__1 : rule__DivideInt__Group__1__Impl rule__DivideInt__Group__2 ;
    public final void rule__DivideInt__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8920:1: ( rule__DivideInt__Group__1__Impl rule__DivideInt__Group__2 )
            // InternalSpinCAD.g:8921:2: rule__DivideInt__Group__1__Impl rule__DivideInt__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__DivideInt__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideInt__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__1"


    // $ANTLR start "rule__DivideInt__Group__1__Impl"
    // InternalSpinCAD.g:8928:1: rule__DivideInt__Group__1__Impl : ( ( rule__DivideInt__VarNameAssignment_1 ) ) ;
    public final void rule__DivideInt__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8932:1: ( ( ( rule__DivideInt__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:8933:1: ( ( rule__DivideInt__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:8933:1: ( ( rule__DivideInt__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:8934:1: ( rule__DivideInt__VarNameAssignment_1 )
            {
             before(grammarAccess.getDivideIntAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:8935:1: ( rule__DivideInt__VarNameAssignment_1 )
            // InternalSpinCAD.g:8935:2: rule__DivideInt__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DivideInt__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getDivideIntAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__1__Impl"


    // $ANTLR start "rule__DivideInt__Group__2"
    // InternalSpinCAD.g:8945:1: rule__DivideInt__Group__2 : rule__DivideInt__Group__2__Impl rule__DivideInt__Group__3 ;
    public final void rule__DivideInt__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8949:1: ( rule__DivideInt__Group__2__Impl rule__DivideInt__Group__3 )
            // InternalSpinCAD.g:8950:2: rule__DivideInt__Group__2__Impl rule__DivideInt__Group__3
            {
            pushFollow(FOLLOW_11);
            rule__DivideInt__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__DivideInt__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__2"


    // $ANTLR start "rule__DivideInt__Group__2__Impl"
    // InternalSpinCAD.g:8957:1: rule__DivideInt__Group__2__Impl : ( ( rule__DivideInt__HighAssignment_2 ) ) ;
    public final void rule__DivideInt__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8961:1: ( ( ( rule__DivideInt__HighAssignment_2 ) ) )
            // InternalSpinCAD.g:8962:1: ( ( rule__DivideInt__HighAssignment_2 ) )
            {
            // InternalSpinCAD.g:8962:1: ( ( rule__DivideInt__HighAssignment_2 ) )
            // InternalSpinCAD.g:8963:1: ( rule__DivideInt__HighAssignment_2 )
            {
             before(grammarAccess.getDivideIntAccess().getHighAssignment_2()); 
            // InternalSpinCAD.g:8964:1: ( rule__DivideInt__HighAssignment_2 )
            // InternalSpinCAD.g:8964:2: rule__DivideInt__HighAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__DivideInt__HighAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getDivideIntAccess().getHighAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__2__Impl"


    // $ANTLR start "rule__DivideInt__Group__3"
    // InternalSpinCAD.g:8974:1: rule__DivideInt__Group__3 : rule__DivideInt__Group__3__Impl ;
    public final void rule__DivideInt__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8978:1: ( rule__DivideInt__Group__3__Impl )
            // InternalSpinCAD.g:8979:2: rule__DivideInt__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DivideInt__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__3"


    // $ANTLR start "rule__DivideInt__Group__3__Impl"
    // InternalSpinCAD.g:8985:1: rule__DivideInt__Group__3__Impl : ( ( rule__DivideInt__LowAssignment_3 ) ) ;
    public final void rule__DivideInt__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:8989:1: ( ( ( rule__DivideInt__LowAssignment_3 ) ) )
            // InternalSpinCAD.g:8990:1: ( ( rule__DivideInt__LowAssignment_3 ) )
            {
            // InternalSpinCAD.g:8990:1: ( ( rule__DivideInt__LowAssignment_3 ) )
            // InternalSpinCAD.g:8991:1: ( rule__DivideInt__LowAssignment_3 )
            {
             before(grammarAccess.getDivideIntAccess().getLowAssignment_3()); 
            // InternalSpinCAD.g:8992:1: ( rule__DivideInt__LowAssignment_3 )
            // InternalSpinCAD.g:8992:2: rule__DivideInt__LowAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__DivideInt__LowAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getDivideIntAccess().getLowAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__Group__3__Impl"


    // $ANTLR start "rule__MultiplyDouble__Group__0"
    // InternalSpinCAD.g:9010:1: rule__MultiplyDouble__Group__0 : rule__MultiplyDouble__Group__0__Impl rule__MultiplyDouble__Group__1 ;
    public final void rule__MultiplyDouble__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9014:1: ( rule__MultiplyDouble__Group__0__Impl rule__MultiplyDouble__Group__1 )
            // InternalSpinCAD.g:9015:2: rule__MultiplyDouble__Group__0__Impl rule__MultiplyDouble__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__MultiplyDouble__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__0"


    // $ANTLR start "rule__MultiplyDouble__Group__0__Impl"
    // InternalSpinCAD.g:9022:1: rule__MultiplyDouble__Group__0__Impl : ( '@multiplyDouble' ) ;
    public final void rule__MultiplyDouble__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9026:1: ( ( '@multiplyDouble' ) )
            // InternalSpinCAD.g:9027:1: ( '@multiplyDouble' )
            {
            // InternalSpinCAD.g:9027:1: ( '@multiplyDouble' )
            // InternalSpinCAD.g:9028:1: '@multiplyDouble'
            {
             before(grammarAccess.getMultiplyDoubleAccess().getMultiplyDoubleKeyword_0()); 
            match(input,59,FOLLOW_2); 
             after(grammarAccess.getMultiplyDoubleAccess().getMultiplyDoubleKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__0__Impl"


    // $ANTLR start "rule__MultiplyDouble__Group__1"
    // InternalSpinCAD.g:9041:1: rule__MultiplyDouble__Group__1 : rule__MultiplyDouble__Group__1__Impl rule__MultiplyDouble__Group__2 ;
    public final void rule__MultiplyDouble__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9045:1: ( rule__MultiplyDouble__Group__1__Impl rule__MultiplyDouble__Group__2 )
            // InternalSpinCAD.g:9046:2: rule__MultiplyDouble__Group__1__Impl rule__MultiplyDouble__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__MultiplyDouble__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__1"


    // $ANTLR start "rule__MultiplyDouble__Group__1__Impl"
    // InternalSpinCAD.g:9053:1: rule__MultiplyDouble__Group__1__Impl : ( ( rule__MultiplyDouble__VarNameAssignment_1 ) ) ;
    public final void rule__MultiplyDouble__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9057:1: ( ( ( rule__MultiplyDouble__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:9058:1: ( ( rule__MultiplyDouble__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:9058:1: ( ( rule__MultiplyDouble__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:9059:1: ( rule__MultiplyDouble__VarNameAssignment_1 )
            {
             before(grammarAccess.getMultiplyDoubleAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:9060:1: ( rule__MultiplyDouble__VarNameAssignment_1 )
            // InternalSpinCAD.g:9060:2: rule__MultiplyDouble__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getMultiplyDoubleAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__1__Impl"


    // $ANTLR start "rule__MultiplyDouble__Group__2"
    // InternalSpinCAD.g:9070:1: rule__MultiplyDouble__Group__2 : rule__MultiplyDouble__Group__2__Impl rule__MultiplyDouble__Group__3 ;
    public final void rule__MultiplyDouble__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9074:1: ( rule__MultiplyDouble__Group__2__Impl rule__MultiplyDouble__Group__3 )
            // InternalSpinCAD.g:9075:2: rule__MultiplyDouble__Group__2__Impl rule__MultiplyDouble__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__MultiplyDouble__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__2"


    // $ANTLR start "rule__MultiplyDouble__Group__2__Impl"
    // InternalSpinCAD.g:9082:1: rule__MultiplyDouble__Group__2__Impl : ( ( rule__MultiplyDouble__HighAssignment_2 ) ) ;
    public final void rule__MultiplyDouble__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9086:1: ( ( ( rule__MultiplyDouble__HighAssignment_2 ) ) )
            // InternalSpinCAD.g:9087:1: ( ( rule__MultiplyDouble__HighAssignment_2 ) )
            {
            // InternalSpinCAD.g:9087:1: ( ( rule__MultiplyDouble__HighAssignment_2 ) )
            // InternalSpinCAD.g:9088:1: ( rule__MultiplyDouble__HighAssignment_2 )
            {
             before(grammarAccess.getMultiplyDoubleAccess().getHighAssignment_2()); 
            // InternalSpinCAD.g:9089:1: ( rule__MultiplyDouble__HighAssignment_2 )
            // InternalSpinCAD.g:9089:2: rule__MultiplyDouble__HighAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__HighAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getMultiplyDoubleAccess().getHighAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__2__Impl"


    // $ANTLR start "rule__MultiplyDouble__Group__3"
    // InternalSpinCAD.g:9099:1: rule__MultiplyDouble__Group__3 : rule__MultiplyDouble__Group__3__Impl ;
    public final void rule__MultiplyDouble__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9103:1: ( rule__MultiplyDouble__Group__3__Impl )
            // InternalSpinCAD.g:9104:2: rule__MultiplyDouble__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__3"


    // $ANTLR start "rule__MultiplyDouble__Group__3__Impl"
    // InternalSpinCAD.g:9110:1: rule__MultiplyDouble__Group__3__Impl : ( ( rule__MultiplyDouble__LowAssignment_3 ) ) ;
    public final void rule__MultiplyDouble__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9114:1: ( ( ( rule__MultiplyDouble__LowAssignment_3 ) ) )
            // InternalSpinCAD.g:9115:1: ( ( rule__MultiplyDouble__LowAssignment_3 ) )
            {
            // InternalSpinCAD.g:9115:1: ( ( rule__MultiplyDouble__LowAssignment_3 ) )
            // InternalSpinCAD.g:9116:1: ( rule__MultiplyDouble__LowAssignment_3 )
            {
             before(grammarAccess.getMultiplyDoubleAccess().getLowAssignment_3()); 
            // InternalSpinCAD.g:9117:1: ( rule__MultiplyDouble__LowAssignment_3 )
            // InternalSpinCAD.g:9117:2: rule__MultiplyDouble__LowAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDouble__LowAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getMultiplyDoubleAccess().getLowAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__Group__3__Impl"


    // $ANTLR start "rule__SetChorusWidth__Group__0"
    // InternalSpinCAD.g:9135:1: rule__SetChorusWidth__Group__0 : rule__SetChorusWidth__Group__0__Impl rule__SetChorusWidth__Group__1 ;
    public final void rule__SetChorusWidth__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9139:1: ( rule__SetChorusWidth__Group__0__Impl rule__SetChorusWidth__Group__1 )
            // InternalSpinCAD.g:9140:2: rule__SetChorusWidth__Group__0__Impl rule__SetChorusWidth__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__SetChorusWidth__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__0"


    // $ANTLR start "rule__SetChorusWidth__Group__0__Impl"
    // InternalSpinCAD.g:9147:1: rule__SetChorusWidth__Group__0__Impl : ( '@setChorusWidth' ) ;
    public final void rule__SetChorusWidth__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9151:1: ( ( '@setChorusWidth' ) )
            // InternalSpinCAD.g:9152:1: ( '@setChorusWidth' )
            {
            // InternalSpinCAD.g:9152:1: ( '@setChorusWidth' )
            // InternalSpinCAD.g:9153:1: '@setChorusWidth'
            {
             before(grammarAccess.getSetChorusWidthAccess().getSetChorusWidthKeyword_0()); 
            match(input,60,FOLLOW_2); 
             after(grammarAccess.getSetChorusWidthAccess().getSetChorusWidthKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__0__Impl"


    // $ANTLR start "rule__SetChorusWidth__Group__1"
    // InternalSpinCAD.g:9166:1: rule__SetChorusWidth__Group__1 : rule__SetChorusWidth__Group__1__Impl rule__SetChorusWidth__Group__2 ;
    public final void rule__SetChorusWidth__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9170:1: ( rule__SetChorusWidth__Group__1__Impl rule__SetChorusWidth__Group__2 )
            // InternalSpinCAD.g:9171:2: rule__SetChorusWidth__Group__1__Impl rule__SetChorusWidth__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__SetChorusWidth__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__1"


    // $ANTLR start "rule__SetChorusWidth__Group__1__Impl"
    // InternalSpinCAD.g:9178:1: rule__SetChorusWidth__Group__1__Impl : ( ( rule__SetChorusWidth__VarNameAssignment_1 ) ) ;
    public final void rule__SetChorusWidth__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9182:1: ( ( ( rule__SetChorusWidth__VarNameAssignment_1 ) ) )
            // InternalSpinCAD.g:9183:1: ( ( rule__SetChorusWidth__VarNameAssignment_1 ) )
            {
            // InternalSpinCAD.g:9183:1: ( ( rule__SetChorusWidth__VarNameAssignment_1 ) )
            // InternalSpinCAD.g:9184:1: ( rule__SetChorusWidth__VarNameAssignment_1 )
            {
             before(grammarAccess.getSetChorusWidthAccess().getVarNameAssignment_1()); 
            // InternalSpinCAD.g:9185:1: ( rule__SetChorusWidth__VarNameAssignment_1 )
            // InternalSpinCAD.g:9185:2: rule__SetChorusWidth__VarNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__VarNameAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSetChorusWidthAccess().getVarNameAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__1__Impl"


    // $ANTLR start "rule__SetChorusWidth__Group__2"
    // InternalSpinCAD.g:9195:1: rule__SetChorusWidth__Group__2 : rule__SetChorusWidth__Group__2__Impl rule__SetChorusWidth__Group__3 ;
    public final void rule__SetChorusWidth__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9199:1: ( rule__SetChorusWidth__Group__2__Impl rule__SetChorusWidth__Group__3 )
            // InternalSpinCAD.g:9200:2: rule__SetChorusWidth__Group__2__Impl rule__SetChorusWidth__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__SetChorusWidth__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__2"


    // $ANTLR start "rule__SetChorusWidth__Group__2__Impl"
    // InternalSpinCAD.g:9207:1: rule__SetChorusWidth__Group__2__Impl : ( ( rule__SetChorusWidth__LengthAssignment_2 ) ) ;
    public final void rule__SetChorusWidth__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9211:1: ( ( ( rule__SetChorusWidth__LengthAssignment_2 ) ) )
            // InternalSpinCAD.g:9212:1: ( ( rule__SetChorusWidth__LengthAssignment_2 ) )
            {
            // InternalSpinCAD.g:9212:1: ( ( rule__SetChorusWidth__LengthAssignment_2 ) )
            // InternalSpinCAD.g:9213:1: ( rule__SetChorusWidth__LengthAssignment_2 )
            {
             before(grammarAccess.getSetChorusWidthAccess().getLengthAssignment_2()); 
            // InternalSpinCAD.g:9214:1: ( rule__SetChorusWidth__LengthAssignment_2 )
            // InternalSpinCAD.g:9214:2: rule__SetChorusWidth__LengthAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__LengthAssignment_2();

            state._fsp--;


            }

             after(grammarAccess.getSetChorusWidthAccess().getLengthAssignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__2__Impl"


    // $ANTLR start "rule__SetChorusWidth__Group__3"
    // InternalSpinCAD.g:9224:1: rule__SetChorusWidth__Group__3 : rule__SetChorusWidth__Group__3__Impl ;
    public final void rule__SetChorusWidth__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9228:1: ( rule__SetChorusWidth__Group__3__Impl )
            // InternalSpinCAD.g:9229:2: rule__SetChorusWidth__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__3"


    // $ANTLR start "rule__SetChorusWidth__Group__3__Impl"
    // InternalSpinCAD.g:9235:1: rule__SetChorusWidth__Group__3__Impl : ( ( rule__SetChorusWidth__ScaleAssignment_3 ) ) ;
    public final void rule__SetChorusWidth__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9239:1: ( ( ( rule__SetChorusWidth__ScaleAssignment_3 ) ) )
            // InternalSpinCAD.g:9240:1: ( ( rule__SetChorusWidth__ScaleAssignment_3 ) )
            {
            // InternalSpinCAD.g:9240:1: ( ( rule__SetChorusWidth__ScaleAssignment_3 ) )
            // InternalSpinCAD.g:9241:1: ( rule__SetChorusWidth__ScaleAssignment_3 )
            {
             before(grammarAccess.getSetChorusWidthAccess().getScaleAssignment_3()); 
            // InternalSpinCAD.g:9242:1: ( rule__SetChorusWidth__ScaleAssignment_3 )
            // InternalSpinCAD.g:9242:2: rule__SetChorusWidth__ScaleAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__SetChorusWidth__ScaleAssignment_3();

            state._fsp--;


            }

             after(grammarAccess.getSetChorusWidthAccess().getScaleAssignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__Group__3__Impl"


    // $ANTLR start "rule__ReadRegister__Group__0"
    // InternalSpinCAD.g:9260:1: rule__ReadRegister__Group__0 : rule__ReadRegister__Group__0__Impl rule__ReadRegister__Group__1 ;
    public final void rule__ReadRegister__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9264:1: ( rule__ReadRegister__Group__0__Impl rule__ReadRegister__Group__1 )
            // InternalSpinCAD.g:9265:2: rule__ReadRegister__Group__0__Impl rule__ReadRegister__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ReadRegister__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegister__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__0"


    // $ANTLR start "rule__ReadRegister__Group__0__Impl"
    // InternalSpinCAD.g:9272:1: rule__ReadRegister__Group__0__Impl : ( 'rdax' ) ;
    public final void rule__ReadRegister__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9276:1: ( ( 'rdax' ) )
            // InternalSpinCAD.g:9277:1: ( 'rdax' )
            {
            // InternalSpinCAD.g:9277:1: ( 'rdax' )
            // InternalSpinCAD.g:9278:1: 'rdax'
            {
             before(grammarAccess.getReadRegisterAccess().getRdaxKeyword_0()); 
            match(input,61,FOLLOW_2); 
             after(grammarAccess.getReadRegisterAccess().getRdaxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__0__Impl"


    // $ANTLR start "rule__ReadRegister__Group__1"
    // InternalSpinCAD.g:9291:1: rule__ReadRegister__Group__1 : rule__ReadRegister__Group__1__Impl rule__ReadRegister__Group__2 ;
    public final void rule__ReadRegister__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9295:1: ( rule__ReadRegister__Group__1__Impl rule__ReadRegister__Group__2 )
            // InternalSpinCAD.g:9296:2: rule__ReadRegister__Group__1__Impl rule__ReadRegister__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__ReadRegister__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegister__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__1"


    // $ANTLR start "rule__ReadRegister__Group__1__Impl"
    // InternalSpinCAD.g:9303:1: rule__ReadRegister__Group__1__Impl : ( ( rule__ReadRegister__Arg1Assignment_1 ) ) ;
    public final void rule__ReadRegister__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9307:1: ( ( ( rule__ReadRegister__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9308:1: ( ( rule__ReadRegister__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9308:1: ( ( rule__ReadRegister__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9309:1: ( rule__ReadRegister__Arg1Assignment_1 )
            {
             before(grammarAccess.getReadRegisterAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9310:1: ( rule__ReadRegister__Arg1Assignment_1 )
            // InternalSpinCAD.g:9310:2: rule__ReadRegister__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegister__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__1__Impl"


    // $ANTLR start "rule__ReadRegister__Group__2"
    // InternalSpinCAD.g:9320:1: rule__ReadRegister__Group__2 : rule__ReadRegister__Group__2__Impl rule__ReadRegister__Group__3 ;
    public final void rule__ReadRegister__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9324:1: ( rule__ReadRegister__Group__2__Impl rule__ReadRegister__Group__3 )
            // InternalSpinCAD.g:9325:2: rule__ReadRegister__Group__2__Impl rule__ReadRegister__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__ReadRegister__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegister__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__2"


    // $ANTLR start "rule__ReadRegister__Group__2__Impl"
    // InternalSpinCAD.g:9332:1: rule__ReadRegister__Group__2__Impl : ( ',' ) ;
    public final void rule__ReadRegister__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9336:1: ( ( ',' ) )
            // InternalSpinCAD.g:9337:1: ( ',' )
            {
            // InternalSpinCAD.g:9337:1: ( ',' )
            // InternalSpinCAD.g:9338:1: ','
            {
             before(grammarAccess.getReadRegisterAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getReadRegisterAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__2__Impl"


    // $ANTLR start "rule__ReadRegister__Group__3"
    // InternalSpinCAD.g:9351:1: rule__ReadRegister__Group__3 : rule__ReadRegister__Group__3__Impl ;
    public final void rule__ReadRegister__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9355:1: ( rule__ReadRegister__Group__3__Impl )
            // InternalSpinCAD.g:9356:2: rule__ReadRegister__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegister__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__3"


    // $ANTLR start "rule__ReadRegister__Group__3__Impl"
    // InternalSpinCAD.g:9362:1: rule__ReadRegister__Group__3__Impl : ( ( rule__ReadRegister__Arg2Assignment_3 ) ) ;
    public final void rule__ReadRegister__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9366:1: ( ( ( rule__ReadRegister__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:9367:1: ( ( rule__ReadRegister__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:9367:1: ( ( rule__ReadRegister__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:9368:1: ( rule__ReadRegister__Arg2Assignment_3 )
            {
             before(grammarAccess.getReadRegisterAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:9369:1: ( rule__ReadRegister__Arg2Assignment_3 )
            // InternalSpinCAD.g:9369:2: rule__ReadRegister__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegister__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Group__3__Impl"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__0"
    // InternalSpinCAD.g:9387:1: rule__WriteRegisterLowshelf__Group__0 : rule__WriteRegisterLowshelf__Group__0__Impl rule__WriteRegisterLowshelf__Group__1 ;
    public final void rule__WriteRegisterLowshelf__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9391:1: ( rule__WriteRegisterLowshelf__Group__0__Impl rule__WriteRegisterLowshelf__Group__1 )
            // InternalSpinCAD.g:9392:2: rule__WriteRegisterLowshelf__Group__0__Impl rule__WriteRegisterLowshelf__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegisterLowshelf__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__0"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__0__Impl"
    // InternalSpinCAD.g:9399:1: rule__WriteRegisterLowshelf__Group__0__Impl : ( 'wrlx' ) ;
    public final void rule__WriteRegisterLowshelf__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9403:1: ( ( 'wrlx' ) )
            // InternalSpinCAD.g:9404:1: ( 'wrlx' )
            {
            // InternalSpinCAD.g:9404:1: ( 'wrlx' )
            // InternalSpinCAD.g:9405:1: 'wrlx'
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getWrlxKeyword_0()); 
            match(input,63,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterLowshelfAccess().getWrlxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__0__Impl"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__1"
    // InternalSpinCAD.g:9418:1: rule__WriteRegisterLowshelf__Group__1 : rule__WriteRegisterLowshelf__Group__1__Impl rule__WriteRegisterLowshelf__Group__2 ;
    public final void rule__WriteRegisterLowshelf__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9422:1: ( rule__WriteRegisterLowshelf__Group__1__Impl rule__WriteRegisterLowshelf__Group__2 )
            // InternalSpinCAD.g:9423:2: rule__WriteRegisterLowshelf__Group__1__Impl rule__WriteRegisterLowshelf__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__WriteRegisterLowshelf__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__1"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__1__Impl"
    // InternalSpinCAD.g:9430:1: rule__WriteRegisterLowshelf__Group__1__Impl : ( ( rule__WriteRegisterLowshelf__Arg1Assignment_1 ) ) ;
    public final void rule__WriteRegisterLowshelf__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9434:1: ( ( ( rule__WriteRegisterLowshelf__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9435:1: ( ( rule__WriteRegisterLowshelf__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9435:1: ( ( rule__WriteRegisterLowshelf__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9436:1: ( rule__WriteRegisterLowshelf__Arg1Assignment_1 )
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9437:1: ( rule__WriteRegisterLowshelf__Arg1Assignment_1 )
            // InternalSpinCAD.g:9437:2: rule__WriteRegisterLowshelf__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterLowshelfAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__1__Impl"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__2"
    // InternalSpinCAD.g:9447:1: rule__WriteRegisterLowshelf__Group__2 : rule__WriteRegisterLowshelf__Group__2__Impl rule__WriteRegisterLowshelf__Group__3 ;
    public final void rule__WriteRegisterLowshelf__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9451:1: ( rule__WriteRegisterLowshelf__Group__2__Impl rule__WriteRegisterLowshelf__Group__3 )
            // InternalSpinCAD.g:9452:2: rule__WriteRegisterLowshelf__Group__2__Impl rule__WriteRegisterLowshelf__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegisterLowshelf__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__2"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__2__Impl"
    // InternalSpinCAD.g:9459:1: rule__WriteRegisterLowshelf__Group__2__Impl : ( ',' ) ;
    public final void rule__WriteRegisterLowshelf__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9463:1: ( ( ',' ) )
            // InternalSpinCAD.g:9464:1: ( ',' )
            {
            // InternalSpinCAD.g:9464:1: ( ',' )
            // InternalSpinCAD.g:9465:1: ','
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterLowshelfAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__2__Impl"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__3"
    // InternalSpinCAD.g:9478:1: rule__WriteRegisterLowshelf__Group__3 : rule__WriteRegisterLowshelf__Group__3__Impl ;
    public final void rule__WriteRegisterLowshelf__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9482:1: ( rule__WriteRegisterLowshelf__Group__3__Impl )
            // InternalSpinCAD.g:9483:2: rule__WriteRegisterLowshelf__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__3"


    // $ANTLR start "rule__WriteRegisterLowshelf__Group__3__Impl"
    // InternalSpinCAD.g:9489:1: rule__WriteRegisterLowshelf__Group__3__Impl : ( ( rule__WriteRegisterLowshelf__Arg2Assignment_3 ) ) ;
    public final void rule__WriteRegisterLowshelf__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9493:1: ( ( ( rule__WriteRegisterLowshelf__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:9494:1: ( ( rule__WriteRegisterLowshelf__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:9494:1: ( ( rule__WriteRegisterLowshelf__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:9495:1: ( rule__WriteRegisterLowshelf__Arg2Assignment_3 )
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:9496:1: ( rule__WriteRegisterLowshelf__Arg2Assignment_3 )
            // InternalSpinCAD.g:9496:2: rule__WriteRegisterLowshelf__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterLowshelf__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterLowshelfAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Group__3__Impl"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__0"
    // InternalSpinCAD.g:9514:1: rule__WriteRegisterHighshelf__Group__0 : rule__WriteRegisterHighshelf__Group__0__Impl rule__WriteRegisterHighshelf__Group__1 ;
    public final void rule__WriteRegisterHighshelf__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9518:1: ( rule__WriteRegisterHighshelf__Group__0__Impl rule__WriteRegisterHighshelf__Group__1 )
            // InternalSpinCAD.g:9519:2: rule__WriteRegisterHighshelf__Group__0__Impl rule__WriteRegisterHighshelf__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegisterHighshelf__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__0"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__0__Impl"
    // InternalSpinCAD.g:9526:1: rule__WriteRegisterHighshelf__Group__0__Impl : ( 'wrhx' ) ;
    public final void rule__WriteRegisterHighshelf__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9530:1: ( ( 'wrhx' ) )
            // InternalSpinCAD.g:9531:1: ( 'wrhx' )
            {
            // InternalSpinCAD.g:9531:1: ( 'wrhx' )
            // InternalSpinCAD.g:9532:1: 'wrhx'
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getWrhxKeyword_0()); 
            match(input,64,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterHighshelfAccess().getWrhxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__0__Impl"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__1"
    // InternalSpinCAD.g:9545:1: rule__WriteRegisterHighshelf__Group__1 : rule__WriteRegisterHighshelf__Group__1__Impl rule__WriteRegisterHighshelf__Group__2 ;
    public final void rule__WriteRegisterHighshelf__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9549:1: ( rule__WriteRegisterHighshelf__Group__1__Impl rule__WriteRegisterHighshelf__Group__2 )
            // InternalSpinCAD.g:9550:2: rule__WriteRegisterHighshelf__Group__1__Impl rule__WriteRegisterHighshelf__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__WriteRegisterHighshelf__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__1"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__1__Impl"
    // InternalSpinCAD.g:9557:1: rule__WriteRegisterHighshelf__Group__1__Impl : ( ( rule__WriteRegisterHighshelf__Arg1Assignment_1 ) ) ;
    public final void rule__WriteRegisterHighshelf__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9561:1: ( ( ( rule__WriteRegisterHighshelf__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9562:1: ( ( rule__WriteRegisterHighshelf__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9562:1: ( ( rule__WriteRegisterHighshelf__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9563:1: ( rule__WriteRegisterHighshelf__Arg1Assignment_1 )
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9564:1: ( rule__WriteRegisterHighshelf__Arg1Assignment_1 )
            // InternalSpinCAD.g:9564:2: rule__WriteRegisterHighshelf__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterHighshelfAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__1__Impl"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__2"
    // InternalSpinCAD.g:9574:1: rule__WriteRegisterHighshelf__Group__2 : rule__WriteRegisterHighshelf__Group__2__Impl rule__WriteRegisterHighshelf__Group__3 ;
    public final void rule__WriteRegisterHighshelf__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9578:1: ( rule__WriteRegisterHighshelf__Group__2__Impl rule__WriteRegisterHighshelf__Group__3 )
            // InternalSpinCAD.g:9579:2: rule__WriteRegisterHighshelf__Group__2__Impl rule__WriteRegisterHighshelf__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegisterHighshelf__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__2"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__2__Impl"
    // InternalSpinCAD.g:9586:1: rule__WriteRegisterHighshelf__Group__2__Impl : ( ',' ) ;
    public final void rule__WriteRegisterHighshelf__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9590:1: ( ( ',' ) )
            // InternalSpinCAD.g:9591:1: ( ',' )
            {
            // InternalSpinCAD.g:9591:1: ( ',' )
            // InternalSpinCAD.g:9592:1: ','
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterHighshelfAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__2__Impl"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__3"
    // InternalSpinCAD.g:9605:1: rule__WriteRegisterHighshelf__Group__3 : rule__WriteRegisterHighshelf__Group__3__Impl ;
    public final void rule__WriteRegisterHighshelf__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9609:1: ( rule__WriteRegisterHighshelf__Group__3__Impl )
            // InternalSpinCAD.g:9610:2: rule__WriteRegisterHighshelf__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__3"


    // $ANTLR start "rule__WriteRegisterHighshelf__Group__3__Impl"
    // InternalSpinCAD.g:9616:1: rule__WriteRegisterHighshelf__Group__3__Impl : ( ( rule__WriteRegisterHighshelf__Arg2Assignment_3 ) ) ;
    public final void rule__WriteRegisterHighshelf__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9620:1: ( ( ( rule__WriteRegisterHighshelf__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:9621:1: ( ( rule__WriteRegisterHighshelf__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:9621:1: ( ( rule__WriteRegisterHighshelf__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:9622:1: ( rule__WriteRegisterHighshelf__Arg2Assignment_3 )
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:9623:1: ( rule__WriteRegisterHighshelf__Arg2Assignment_3 )
            // InternalSpinCAD.g:9623:2: rule__WriteRegisterHighshelf__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegisterHighshelf__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterHighshelfAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Group__3__Impl"


    // $ANTLR start "rule__WriteRegister__Group__0"
    // InternalSpinCAD.g:9641:1: rule__WriteRegister__Group__0 : rule__WriteRegister__Group__0__Impl rule__WriteRegister__Group__1 ;
    public final void rule__WriteRegister__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9645:1: ( rule__WriteRegister__Group__0__Impl rule__WriteRegister__Group__1 )
            // InternalSpinCAD.g:9646:2: rule__WriteRegister__Group__0__Impl rule__WriteRegister__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegister__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegister__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__0"


    // $ANTLR start "rule__WriteRegister__Group__0__Impl"
    // InternalSpinCAD.g:9653:1: rule__WriteRegister__Group__0__Impl : ( 'wrax' ) ;
    public final void rule__WriteRegister__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9657:1: ( ( 'wrax' ) )
            // InternalSpinCAD.g:9658:1: ( 'wrax' )
            {
            // InternalSpinCAD.g:9658:1: ( 'wrax' )
            // InternalSpinCAD.g:9659:1: 'wrax'
            {
             before(grammarAccess.getWriteRegisterAccess().getWraxKeyword_0()); 
            match(input,65,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterAccess().getWraxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__0__Impl"


    // $ANTLR start "rule__WriteRegister__Group__1"
    // InternalSpinCAD.g:9672:1: rule__WriteRegister__Group__1 : rule__WriteRegister__Group__1__Impl rule__WriteRegister__Group__2 ;
    public final void rule__WriteRegister__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9676:1: ( rule__WriteRegister__Group__1__Impl rule__WriteRegister__Group__2 )
            // InternalSpinCAD.g:9677:2: rule__WriteRegister__Group__1__Impl rule__WriteRegister__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__WriteRegister__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegister__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__1"


    // $ANTLR start "rule__WriteRegister__Group__1__Impl"
    // InternalSpinCAD.g:9684:1: rule__WriteRegister__Group__1__Impl : ( ( rule__WriteRegister__Arg1Assignment_1 ) ) ;
    public final void rule__WriteRegister__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9688:1: ( ( ( rule__WriteRegister__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9689:1: ( ( rule__WriteRegister__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9689:1: ( ( rule__WriteRegister__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9690:1: ( rule__WriteRegister__Arg1Assignment_1 )
            {
             before(grammarAccess.getWriteRegisterAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9691:1: ( rule__WriteRegister__Arg1Assignment_1 )
            // InternalSpinCAD.g:9691:2: rule__WriteRegister__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegister__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__1__Impl"


    // $ANTLR start "rule__WriteRegister__Group__2"
    // InternalSpinCAD.g:9701:1: rule__WriteRegister__Group__2 : rule__WriteRegister__Group__2__Impl rule__WriteRegister__Group__3 ;
    public final void rule__WriteRegister__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9705:1: ( rule__WriteRegister__Group__2__Impl rule__WriteRegister__Group__3 )
            // InternalSpinCAD.g:9706:2: rule__WriteRegister__Group__2__Impl rule__WriteRegister__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__WriteRegister__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteRegister__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__2"


    // $ANTLR start "rule__WriteRegister__Group__2__Impl"
    // InternalSpinCAD.g:9713:1: rule__WriteRegister__Group__2__Impl : ( ',' ) ;
    public final void rule__WriteRegister__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9717:1: ( ( ',' ) )
            // InternalSpinCAD.g:9718:1: ( ',' )
            {
            // InternalSpinCAD.g:9718:1: ( ',' )
            // InternalSpinCAD.g:9719:1: ','
            {
             before(grammarAccess.getWriteRegisterAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getWriteRegisterAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__2__Impl"


    // $ANTLR start "rule__WriteRegister__Group__3"
    // InternalSpinCAD.g:9732:1: rule__WriteRegister__Group__3 : rule__WriteRegister__Group__3__Impl ;
    public final void rule__WriteRegister__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9736:1: ( rule__WriteRegister__Group__3__Impl )
            // InternalSpinCAD.g:9737:2: rule__WriteRegister__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegister__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__3"


    // $ANTLR start "rule__WriteRegister__Group__3__Impl"
    // InternalSpinCAD.g:9743:1: rule__WriteRegister__Group__3__Impl : ( ( rule__WriteRegister__Arg2Assignment_3 ) ) ;
    public final void rule__WriteRegister__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9747:1: ( ( ( rule__WriteRegister__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:9748:1: ( ( rule__WriteRegister__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:9748:1: ( ( rule__WriteRegister__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:9749:1: ( rule__WriteRegister__Arg2Assignment_3 )
            {
             before(grammarAccess.getWriteRegisterAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:9750:1: ( rule__WriteRegister__Arg2Assignment_3 )
            // InternalSpinCAD.g:9750:2: rule__WriteRegister__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__WriteRegister__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getWriteRegisterAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Group__3__Impl"


    // $ANTLR start "rule__Maxx__Group__0"
    // InternalSpinCAD.g:9768:1: rule__Maxx__Group__0 : rule__Maxx__Group__0__Impl rule__Maxx__Group__1 ;
    public final void rule__Maxx__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9772:1: ( rule__Maxx__Group__0__Impl rule__Maxx__Group__1 )
            // InternalSpinCAD.g:9773:2: rule__Maxx__Group__0__Impl rule__Maxx__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__Maxx__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Maxx__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__0"


    // $ANTLR start "rule__Maxx__Group__0__Impl"
    // InternalSpinCAD.g:9780:1: rule__Maxx__Group__0__Impl : ( 'maxx' ) ;
    public final void rule__Maxx__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9784:1: ( ( 'maxx' ) )
            // InternalSpinCAD.g:9785:1: ( 'maxx' )
            {
            // InternalSpinCAD.g:9785:1: ( 'maxx' )
            // InternalSpinCAD.g:9786:1: 'maxx'
            {
             before(grammarAccess.getMaxxAccess().getMaxxKeyword_0()); 
            match(input,66,FOLLOW_2); 
             after(grammarAccess.getMaxxAccess().getMaxxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__0__Impl"


    // $ANTLR start "rule__Maxx__Group__1"
    // InternalSpinCAD.g:9799:1: rule__Maxx__Group__1 : rule__Maxx__Group__1__Impl rule__Maxx__Group__2 ;
    public final void rule__Maxx__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9803:1: ( rule__Maxx__Group__1__Impl rule__Maxx__Group__2 )
            // InternalSpinCAD.g:9804:2: rule__Maxx__Group__1__Impl rule__Maxx__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__Maxx__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Maxx__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__1"


    // $ANTLR start "rule__Maxx__Group__1__Impl"
    // InternalSpinCAD.g:9811:1: rule__Maxx__Group__1__Impl : ( ( rule__Maxx__Arg1Assignment_1 ) ) ;
    public final void rule__Maxx__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9815:1: ( ( ( rule__Maxx__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9816:1: ( ( rule__Maxx__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9816:1: ( ( rule__Maxx__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9817:1: ( rule__Maxx__Arg1Assignment_1 )
            {
             before(grammarAccess.getMaxxAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9818:1: ( rule__Maxx__Arg1Assignment_1 )
            // InternalSpinCAD.g:9818:2: rule__Maxx__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Maxx__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getMaxxAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__1__Impl"


    // $ANTLR start "rule__Maxx__Group__2"
    // InternalSpinCAD.g:9828:1: rule__Maxx__Group__2 : rule__Maxx__Group__2__Impl rule__Maxx__Group__3 ;
    public final void rule__Maxx__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9832:1: ( rule__Maxx__Group__2__Impl rule__Maxx__Group__3 )
            // InternalSpinCAD.g:9833:2: rule__Maxx__Group__2__Impl rule__Maxx__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__Maxx__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Maxx__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__2"


    // $ANTLR start "rule__Maxx__Group__2__Impl"
    // InternalSpinCAD.g:9840:1: rule__Maxx__Group__2__Impl : ( ',' ) ;
    public final void rule__Maxx__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9844:1: ( ( ',' ) )
            // InternalSpinCAD.g:9845:1: ( ',' )
            {
            // InternalSpinCAD.g:9845:1: ( ',' )
            // InternalSpinCAD.g:9846:1: ','
            {
             before(grammarAccess.getMaxxAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getMaxxAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__2__Impl"


    // $ANTLR start "rule__Maxx__Group__3"
    // InternalSpinCAD.g:9859:1: rule__Maxx__Group__3 : rule__Maxx__Group__3__Impl ;
    public final void rule__Maxx__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9863:1: ( rule__Maxx__Group__3__Impl )
            // InternalSpinCAD.g:9864:2: rule__Maxx__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Maxx__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__3"


    // $ANTLR start "rule__Maxx__Group__3__Impl"
    // InternalSpinCAD.g:9870:1: rule__Maxx__Group__3__Impl : ( ( rule__Maxx__Arg2Assignment_3 ) ) ;
    public final void rule__Maxx__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9874:1: ( ( ( rule__Maxx__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:9875:1: ( ( rule__Maxx__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:9875:1: ( ( rule__Maxx__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:9876:1: ( rule__Maxx__Arg2Assignment_3 )
            {
             before(grammarAccess.getMaxxAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:9877:1: ( rule__Maxx__Arg2Assignment_3 )
            // InternalSpinCAD.g:9877:2: rule__Maxx__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__Maxx__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getMaxxAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Group__3__Impl"


    // $ANTLR start "rule__ReadRegisterFilter__Group__0"
    // InternalSpinCAD.g:9895:1: rule__ReadRegisterFilter__Group__0 : rule__ReadRegisterFilter__Group__0__Impl rule__ReadRegisterFilter__Group__1 ;
    public final void rule__ReadRegisterFilter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9899:1: ( rule__ReadRegisterFilter__Group__0__Impl rule__ReadRegisterFilter__Group__1 )
            // InternalSpinCAD.g:9900:2: rule__ReadRegisterFilter__Group__0__Impl rule__ReadRegisterFilter__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ReadRegisterFilter__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__0"


    // $ANTLR start "rule__ReadRegisterFilter__Group__0__Impl"
    // InternalSpinCAD.g:9907:1: rule__ReadRegisterFilter__Group__0__Impl : ( 'rdfx' ) ;
    public final void rule__ReadRegisterFilter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9911:1: ( ( 'rdfx' ) )
            // InternalSpinCAD.g:9912:1: ( 'rdfx' )
            {
            // InternalSpinCAD.g:9912:1: ( 'rdfx' )
            // InternalSpinCAD.g:9913:1: 'rdfx'
            {
             before(grammarAccess.getReadRegisterFilterAccess().getRdfxKeyword_0()); 
            match(input,67,FOLLOW_2); 
             after(grammarAccess.getReadRegisterFilterAccess().getRdfxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__0__Impl"


    // $ANTLR start "rule__ReadRegisterFilter__Group__1"
    // InternalSpinCAD.g:9926:1: rule__ReadRegisterFilter__Group__1 : rule__ReadRegisterFilter__Group__1__Impl rule__ReadRegisterFilter__Group__2 ;
    public final void rule__ReadRegisterFilter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9930:1: ( rule__ReadRegisterFilter__Group__1__Impl rule__ReadRegisterFilter__Group__2 )
            // InternalSpinCAD.g:9931:2: rule__ReadRegisterFilter__Group__1__Impl rule__ReadRegisterFilter__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__ReadRegisterFilter__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__1"


    // $ANTLR start "rule__ReadRegisterFilter__Group__1__Impl"
    // InternalSpinCAD.g:9938:1: rule__ReadRegisterFilter__Group__1__Impl : ( ( rule__ReadRegisterFilter__Arg1Assignment_1 ) ) ;
    public final void rule__ReadRegisterFilter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9942:1: ( ( ( rule__ReadRegisterFilter__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:9943:1: ( ( rule__ReadRegisterFilter__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:9943:1: ( ( rule__ReadRegisterFilter__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:9944:1: ( rule__ReadRegisterFilter__Arg1Assignment_1 )
            {
             before(grammarAccess.getReadRegisterFilterAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:9945:1: ( rule__ReadRegisterFilter__Arg1Assignment_1 )
            // InternalSpinCAD.g:9945:2: rule__ReadRegisterFilter__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterFilterAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__1__Impl"


    // $ANTLR start "rule__ReadRegisterFilter__Group__2"
    // InternalSpinCAD.g:9955:1: rule__ReadRegisterFilter__Group__2 : rule__ReadRegisterFilter__Group__2__Impl rule__ReadRegisterFilter__Group__3 ;
    public final void rule__ReadRegisterFilter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9959:1: ( rule__ReadRegisterFilter__Group__2__Impl rule__ReadRegisterFilter__Group__3 )
            // InternalSpinCAD.g:9960:2: rule__ReadRegisterFilter__Group__2__Impl rule__ReadRegisterFilter__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__ReadRegisterFilter__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__2"


    // $ANTLR start "rule__ReadRegisterFilter__Group__2__Impl"
    // InternalSpinCAD.g:9967:1: rule__ReadRegisterFilter__Group__2__Impl : ( ',' ) ;
    public final void rule__ReadRegisterFilter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9971:1: ( ( ',' ) )
            // InternalSpinCAD.g:9972:1: ( ',' )
            {
            // InternalSpinCAD.g:9972:1: ( ',' )
            // InternalSpinCAD.g:9973:1: ','
            {
             before(grammarAccess.getReadRegisterFilterAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getReadRegisterFilterAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__2__Impl"


    // $ANTLR start "rule__ReadRegisterFilter__Group__3"
    // InternalSpinCAD.g:9986:1: rule__ReadRegisterFilter__Group__3 : rule__ReadRegisterFilter__Group__3__Impl ;
    public final void rule__ReadRegisterFilter__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:9990:1: ( rule__ReadRegisterFilter__Group__3__Impl )
            // InternalSpinCAD.g:9991:2: rule__ReadRegisterFilter__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__3"


    // $ANTLR start "rule__ReadRegisterFilter__Group__3__Impl"
    // InternalSpinCAD.g:9997:1: rule__ReadRegisterFilter__Group__3__Impl : ( ( rule__ReadRegisterFilter__Arg2Assignment_3 ) ) ;
    public final void rule__ReadRegisterFilter__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10001:1: ( ( ( rule__ReadRegisterFilter__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10002:1: ( ( rule__ReadRegisterFilter__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10002:1: ( ( rule__ReadRegisterFilter__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10003:1: ( rule__ReadRegisterFilter__Arg2Assignment_3 )
            {
             before(grammarAccess.getReadRegisterFilterAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10004:1: ( rule__ReadRegisterFilter__Arg2Assignment_3 )
            // InternalSpinCAD.g:10004:2: rule__ReadRegisterFilter__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__ReadRegisterFilter__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getReadRegisterFilterAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Group__3__Impl"


    // $ANTLR start "rule__Mulx__Group__0"
    // InternalSpinCAD.g:10022:1: rule__Mulx__Group__0 : rule__Mulx__Group__0__Impl rule__Mulx__Group__1 ;
    public final void rule__Mulx__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10026:1: ( rule__Mulx__Group__0__Impl rule__Mulx__Group__1 )
            // InternalSpinCAD.g:10027:2: rule__Mulx__Group__0__Impl rule__Mulx__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Mulx__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Mulx__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mulx__Group__0"


    // $ANTLR start "rule__Mulx__Group__0__Impl"
    // InternalSpinCAD.g:10034:1: rule__Mulx__Group__0__Impl : ( 'mulx' ) ;
    public final void rule__Mulx__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10038:1: ( ( 'mulx' ) )
            // InternalSpinCAD.g:10039:1: ( 'mulx' )
            {
            // InternalSpinCAD.g:10039:1: ( 'mulx' )
            // InternalSpinCAD.g:10040:1: 'mulx'
            {
             before(grammarAccess.getMulxAccess().getMulxKeyword_0()); 
            match(input,68,FOLLOW_2); 
             after(grammarAccess.getMulxAccess().getMulxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mulx__Group__0__Impl"


    // $ANTLR start "rule__Mulx__Group__1"
    // InternalSpinCAD.g:10053:1: rule__Mulx__Group__1 : rule__Mulx__Group__1__Impl ;
    public final void rule__Mulx__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10057:1: ( rule__Mulx__Group__1__Impl )
            // InternalSpinCAD.g:10058:2: rule__Mulx__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Mulx__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mulx__Group__1"


    // $ANTLR start "rule__Mulx__Group__1__Impl"
    // InternalSpinCAD.g:10064:1: rule__Mulx__Group__1__Impl : ( ( rule__Mulx__Arg1Assignment_1 ) ) ;
    public final void rule__Mulx__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10068:1: ( ( ( rule__Mulx__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10069:1: ( ( rule__Mulx__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10069:1: ( ( rule__Mulx__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10070:1: ( rule__Mulx__Arg1Assignment_1 )
            {
             before(grammarAccess.getMulxAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10071:1: ( rule__Mulx__Arg1Assignment_1 )
            // InternalSpinCAD.g:10071:2: rule__Mulx__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Mulx__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getMulxAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mulx__Group__1__Impl"


    // $ANTLR start "rule__Ldax__Group__0"
    // InternalSpinCAD.g:10085:1: rule__Ldax__Group__0 : rule__Ldax__Group__0__Impl rule__Ldax__Group__1 ;
    public final void rule__Ldax__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10089:1: ( rule__Ldax__Group__0__Impl rule__Ldax__Group__1 )
            // InternalSpinCAD.g:10090:2: rule__Ldax__Group__0__Impl rule__Ldax__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Ldax__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Ldax__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Ldax__Group__0"


    // $ANTLR start "rule__Ldax__Group__0__Impl"
    // InternalSpinCAD.g:10097:1: rule__Ldax__Group__0__Impl : ( 'ldax' ) ;
    public final void rule__Ldax__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10101:1: ( ( 'ldax' ) )
            // InternalSpinCAD.g:10102:1: ( 'ldax' )
            {
            // InternalSpinCAD.g:10102:1: ( 'ldax' )
            // InternalSpinCAD.g:10103:1: 'ldax'
            {
             before(grammarAccess.getLdaxAccess().getLdaxKeyword_0()); 
            match(input,69,FOLLOW_2); 
             after(grammarAccess.getLdaxAccess().getLdaxKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Ldax__Group__0__Impl"


    // $ANTLR start "rule__Ldax__Group__1"
    // InternalSpinCAD.g:10116:1: rule__Ldax__Group__1 : rule__Ldax__Group__1__Impl ;
    public final void rule__Ldax__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10120:1: ( rule__Ldax__Group__1__Impl )
            // InternalSpinCAD.g:10121:2: rule__Ldax__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Ldax__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Ldax__Group__1"


    // $ANTLR start "rule__Ldax__Group__1__Impl"
    // InternalSpinCAD.g:10127:1: rule__Ldax__Group__1__Impl : ( ( rule__Ldax__Arg1Assignment_1 ) ) ;
    public final void rule__Ldax__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10131:1: ( ( ( rule__Ldax__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10132:1: ( ( rule__Ldax__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10132:1: ( ( rule__Ldax__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10133:1: ( rule__Ldax__Arg1Assignment_1 )
            {
             before(grammarAccess.getLdaxAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10134:1: ( rule__Ldax__Arg1Assignment_1 )
            // InternalSpinCAD.g:10134:2: rule__Ldax__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Ldax__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLdaxAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Ldax__Group__1__Impl"


    // $ANTLR start "rule__Exp__Group__0"
    // InternalSpinCAD.g:10148:1: rule__Exp__Group__0 : rule__Exp__Group__0__Impl rule__Exp__Group__1 ;
    public final void rule__Exp__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10152:1: ( rule__Exp__Group__0__Impl rule__Exp__Group__1 )
            // InternalSpinCAD.g:10153:2: rule__Exp__Group__0__Impl rule__Exp__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__Exp__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Exp__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__0"


    // $ANTLR start "rule__Exp__Group__0__Impl"
    // InternalSpinCAD.g:10160:1: rule__Exp__Group__0__Impl : ( 'exp' ) ;
    public final void rule__Exp__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10164:1: ( ( 'exp' ) )
            // InternalSpinCAD.g:10165:1: ( 'exp' )
            {
            // InternalSpinCAD.g:10165:1: ( 'exp' )
            // InternalSpinCAD.g:10166:1: 'exp'
            {
             before(grammarAccess.getExpAccess().getExpKeyword_0()); 
            match(input,70,FOLLOW_2); 
             after(grammarAccess.getExpAccess().getExpKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__0__Impl"


    // $ANTLR start "rule__Exp__Group__1"
    // InternalSpinCAD.g:10179:1: rule__Exp__Group__1 : rule__Exp__Group__1__Impl rule__Exp__Group__2 ;
    public final void rule__Exp__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10183:1: ( rule__Exp__Group__1__Impl rule__Exp__Group__2 )
            // InternalSpinCAD.g:10184:2: rule__Exp__Group__1__Impl rule__Exp__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__Exp__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Exp__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__1"


    // $ANTLR start "rule__Exp__Group__1__Impl"
    // InternalSpinCAD.g:10191:1: rule__Exp__Group__1__Impl : ( ( rule__Exp__Arg1Assignment_1 ) ) ;
    public final void rule__Exp__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10195:1: ( ( ( rule__Exp__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10196:1: ( ( rule__Exp__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10196:1: ( ( rule__Exp__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10197:1: ( rule__Exp__Arg1Assignment_1 )
            {
             before(grammarAccess.getExpAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10198:1: ( rule__Exp__Arg1Assignment_1 )
            // InternalSpinCAD.g:10198:2: rule__Exp__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Exp__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getExpAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__1__Impl"


    // $ANTLR start "rule__Exp__Group__2"
    // InternalSpinCAD.g:10208:1: rule__Exp__Group__2 : rule__Exp__Group__2__Impl rule__Exp__Group__3 ;
    public final void rule__Exp__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10212:1: ( rule__Exp__Group__2__Impl rule__Exp__Group__3 )
            // InternalSpinCAD.g:10213:2: rule__Exp__Group__2__Impl rule__Exp__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__Exp__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Exp__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__2"


    // $ANTLR start "rule__Exp__Group__2__Impl"
    // InternalSpinCAD.g:10220:1: rule__Exp__Group__2__Impl : ( ',' ) ;
    public final void rule__Exp__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10224:1: ( ( ',' ) )
            // InternalSpinCAD.g:10225:1: ( ',' )
            {
            // InternalSpinCAD.g:10225:1: ( ',' )
            // InternalSpinCAD.g:10226:1: ','
            {
             before(grammarAccess.getExpAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getExpAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__2__Impl"


    // $ANTLR start "rule__Exp__Group__3"
    // InternalSpinCAD.g:10239:1: rule__Exp__Group__3 : rule__Exp__Group__3__Impl ;
    public final void rule__Exp__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10243:1: ( rule__Exp__Group__3__Impl )
            // InternalSpinCAD.g:10244:2: rule__Exp__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Exp__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__3"


    // $ANTLR start "rule__Exp__Group__3__Impl"
    // InternalSpinCAD.g:10250:1: rule__Exp__Group__3__Impl : ( ( rule__Exp__Arg2Assignment_3 ) ) ;
    public final void rule__Exp__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10254:1: ( ( ( rule__Exp__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10255:1: ( ( rule__Exp__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10255:1: ( ( rule__Exp__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10256:1: ( rule__Exp__Arg2Assignment_3 )
            {
             before(grammarAccess.getExpAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10257:1: ( rule__Exp__Arg2Assignment_3 )
            // InternalSpinCAD.g:10257:2: rule__Exp__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__Exp__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getExpAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Group__3__Impl"


    // $ANTLR start "rule__Log__Group__0"
    // InternalSpinCAD.g:10275:1: rule__Log__Group__0 : rule__Log__Group__0__Impl rule__Log__Group__1 ;
    public final void rule__Log__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10279:1: ( rule__Log__Group__0__Impl rule__Log__Group__1 )
            // InternalSpinCAD.g:10280:2: rule__Log__Group__0__Impl rule__Log__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__Log__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Log__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__0"


    // $ANTLR start "rule__Log__Group__0__Impl"
    // InternalSpinCAD.g:10287:1: rule__Log__Group__0__Impl : ( 'log' ) ;
    public final void rule__Log__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10291:1: ( ( 'log' ) )
            // InternalSpinCAD.g:10292:1: ( 'log' )
            {
            // InternalSpinCAD.g:10292:1: ( 'log' )
            // InternalSpinCAD.g:10293:1: 'log'
            {
             before(grammarAccess.getLogAccess().getLogKeyword_0()); 
            match(input,71,FOLLOW_2); 
             after(grammarAccess.getLogAccess().getLogKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__0__Impl"


    // $ANTLR start "rule__Log__Group__1"
    // InternalSpinCAD.g:10306:1: rule__Log__Group__1 : rule__Log__Group__1__Impl rule__Log__Group__2 ;
    public final void rule__Log__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10310:1: ( rule__Log__Group__1__Impl rule__Log__Group__2 )
            // InternalSpinCAD.g:10311:2: rule__Log__Group__1__Impl rule__Log__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__Log__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Log__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__1"


    // $ANTLR start "rule__Log__Group__1__Impl"
    // InternalSpinCAD.g:10318:1: rule__Log__Group__1__Impl : ( ( rule__Log__Arg1Assignment_1 ) ) ;
    public final void rule__Log__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10322:1: ( ( ( rule__Log__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10323:1: ( ( rule__Log__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10323:1: ( ( rule__Log__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10324:1: ( rule__Log__Arg1Assignment_1 )
            {
             before(grammarAccess.getLogAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10325:1: ( rule__Log__Arg1Assignment_1 )
            // InternalSpinCAD.g:10325:2: rule__Log__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Log__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLogAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__1__Impl"


    // $ANTLR start "rule__Log__Group__2"
    // InternalSpinCAD.g:10335:1: rule__Log__Group__2 : rule__Log__Group__2__Impl rule__Log__Group__3 ;
    public final void rule__Log__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10339:1: ( rule__Log__Group__2__Impl rule__Log__Group__3 )
            // InternalSpinCAD.g:10340:2: rule__Log__Group__2__Impl rule__Log__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__Log__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Log__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__2"


    // $ANTLR start "rule__Log__Group__2__Impl"
    // InternalSpinCAD.g:10347:1: rule__Log__Group__2__Impl : ( ',' ) ;
    public final void rule__Log__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10351:1: ( ( ',' ) )
            // InternalSpinCAD.g:10352:1: ( ',' )
            {
            // InternalSpinCAD.g:10352:1: ( ',' )
            // InternalSpinCAD.g:10353:1: ','
            {
             before(grammarAccess.getLogAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getLogAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__2__Impl"


    // $ANTLR start "rule__Log__Group__3"
    // InternalSpinCAD.g:10366:1: rule__Log__Group__3 : rule__Log__Group__3__Impl ;
    public final void rule__Log__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10370:1: ( rule__Log__Group__3__Impl )
            // InternalSpinCAD.g:10371:2: rule__Log__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Log__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__3"


    // $ANTLR start "rule__Log__Group__3__Impl"
    // InternalSpinCAD.g:10377:1: rule__Log__Group__3__Impl : ( ( rule__Log__Arg2Assignment_3 ) ) ;
    public final void rule__Log__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10381:1: ( ( ( rule__Log__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10382:1: ( ( rule__Log__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10382:1: ( ( rule__Log__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10383:1: ( rule__Log__Arg2Assignment_3 )
            {
             before(grammarAccess.getLogAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10384:1: ( rule__Log__Arg2Assignment_3 )
            // InternalSpinCAD.g:10384:2: rule__Log__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__Log__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getLogAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Group__3__Impl"


    // $ANTLR start "rule__ScaleOffset__Group__0"
    // InternalSpinCAD.g:10402:1: rule__ScaleOffset__Group__0 : rule__ScaleOffset__Group__0__Impl rule__ScaleOffset__Group__1 ;
    public final void rule__ScaleOffset__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10406:1: ( rule__ScaleOffset__Group__0__Impl rule__ScaleOffset__Group__1 )
            // InternalSpinCAD.g:10407:2: rule__ScaleOffset__Group__0__Impl rule__ScaleOffset__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ScaleOffset__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__0"


    // $ANTLR start "rule__ScaleOffset__Group__0__Impl"
    // InternalSpinCAD.g:10414:1: rule__ScaleOffset__Group__0__Impl : ( 'sof' ) ;
    public final void rule__ScaleOffset__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10418:1: ( ( 'sof' ) )
            // InternalSpinCAD.g:10419:1: ( 'sof' )
            {
            // InternalSpinCAD.g:10419:1: ( 'sof' )
            // InternalSpinCAD.g:10420:1: 'sof'
            {
             before(grammarAccess.getScaleOffsetAccess().getSofKeyword_0()); 
            match(input,72,FOLLOW_2); 
             after(grammarAccess.getScaleOffsetAccess().getSofKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__0__Impl"


    // $ANTLR start "rule__ScaleOffset__Group__1"
    // InternalSpinCAD.g:10433:1: rule__ScaleOffset__Group__1 : rule__ScaleOffset__Group__1__Impl rule__ScaleOffset__Group__2 ;
    public final void rule__ScaleOffset__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10437:1: ( rule__ScaleOffset__Group__1__Impl rule__ScaleOffset__Group__2 )
            // InternalSpinCAD.g:10438:2: rule__ScaleOffset__Group__1__Impl rule__ScaleOffset__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__ScaleOffset__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__1"


    // $ANTLR start "rule__ScaleOffset__Group__1__Impl"
    // InternalSpinCAD.g:10445:1: rule__ScaleOffset__Group__1__Impl : ( ( rule__ScaleOffset__Arg1Assignment_1 ) ) ;
    public final void rule__ScaleOffset__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10449:1: ( ( ( rule__ScaleOffset__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10450:1: ( ( rule__ScaleOffset__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10450:1: ( ( rule__ScaleOffset__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10451:1: ( rule__ScaleOffset__Arg1Assignment_1 )
            {
             before(grammarAccess.getScaleOffsetAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10452:1: ( rule__ScaleOffset__Arg1Assignment_1 )
            // InternalSpinCAD.g:10452:2: rule__ScaleOffset__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getScaleOffsetAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__1__Impl"


    // $ANTLR start "rule__ScaleOffset__Group__2"
    // InternalSpinCAD.g:10462:1: rule__ScaleOffset__Group__2 : rule__ScaleOffset__Group__2__Impl rule__ScaleOffset__Group__3 ;
    public final void rule__ScaleOffset__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10466:1: ( rule__ScaleOffset__Group__2__Impl rule__ScaleOffset__Group__3 )
            // InternalSpinCAD.g:10467:2: rule__ScaleOffset__Group__2__Impl rule__ScaleOffset__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__ScaleOffset__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__2"


    // $ANTLR start "rule__ScaleOffset__Group__2__Impl"
    // InternalSpinCAD.g:10474:1: rule__ScaleOffset__Group__2__Impl : ( ',' ) ;
    public final void rule__ScaleOffset__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10478:1: ( ( ',' ) )
            // InternalSpinCAD.g:10479:1: ( ',' )
            {
            // InternalSpinCAD.g:10479:1: ( ',' )
            // InternalSpinCAD.g:10480:1: ','
            {
             before(grammarAccess.getScaleOffsetAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getScaleOffsetAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__2__Impl"


    // $ANTLR start "rule__ScaleOffset__Group__3"
    // InternalSpinCAD.g:10493:1: rule__ScaleOffset__Group__3 : rule__ScaleOffset__Group__3__Impl ;
    public final void rule__ScaleOffset__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10497:1: ( rule__ScaleOffset__Group__3__Impl )
            // InternalSpinCAD.g:10498:2: rule__ScaleOffset__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__3"


    // $ANTLR start "rule__ScaleOffset__Group__3__Impl"
    // InternalSpinCAD.g:10504:1: rule__ScaleOffset__Group__3__Impl : ( ( rule__ScaleOffset__Arg2Assignment_3 ) ) ;
    public final void rule__ScaleOffset__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10508:1: ( ( ( rule__ScaleOffset__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10509:1: ( ( rule__ScaleOffset__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10509:1: ( ( rule__ScaleOffset__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10510:1: ( rule__ScaleOffset__Arg2Assignment_3 )
            {
             before(grammarAccess.getScaleOffsetAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10511:1: ( rule__ScaleOffset__Arg2Assignment_3 )
            // InternalSpinCAD.g:10511:2: rule__ScaleOffset__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__ScaleOffset__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getScaleOffsetAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Group__3__Impl"


    // $ANTLR start "rule__WriteDelay__Group__0"
    // InternalSpinCAD.g:10529:1: rule__WriteDelay__Group__0 : rule__WriteDelay__Group__0__Impl rule__WriteDelay__Group__1 ;
    public final void rule__WriteDelay__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10533:1: ( rule__WriteDelay__Group__0__Impl rule__WriteDelay__Group__1 )
            // InternalSpinCAD.g:10534:2: rule__WriteDelay__Group__0__Impl rule__WriteDelay__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__WriteDelay__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteDelay__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__0"


    // $ANTLR start "rule__WriteDelay__Group__0__Impl"
    // InternalSpinCAD.g:10541:1: rule__WriteDelay__Group__0__Impl : ( 'wra' ) ;
    public final void rule__WriteDelay__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10545:1: ( ( 'wra' ) )
            // InternalSpinCAD.g:10546:1: ( 'wra' )
            {
            // InternalSpinCAD.g:10546:1: ( 'wra' )
            // InternalSpinCAD.g:10547:1: 'wra'
            {
             before(grammarAccess.getWriteDelayAccess().getWraKeyword_0()); 
            match(input,73,FOLLOW_2); 
             after(grammarAccess.getWriteDelayAccess().getWraKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__0__Impl"


    // $ANTLR start "rule__WriteDelay__Group__1"
    // InternalSpinCAD.g:10560:1: rule__WriteDelay__Group__1 : rule__WriteDelay__Group__1__Impl rule__WriteDelay__Group__2 ;
    public final void rule__WriteDelay__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10564:1: ( rule__WriteDelay__Group__1__Impl rule__WriteDelay__Group__2 )
            // InternalSpinCAD.g:10565:2: rule__WriteDelay__Group__1__Impl rule__WriteDelay__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__WriteDelay__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteDelay__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__1"


    // $ANTLR start "rule__WriteDelay__Group__1__Impl"
    // InternalSpinCAD.g:10572:1: rule__WriteDelay__Group__1__Impl : ( ( rule__WriteDelay__Arg1Assignment_1 ) ) ;
    public final void rule__WriteDelay__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10576:1: ( ( ( rule__WriteDelay__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10577:1: ( ( rule__WriteDelay__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10577:1: ( ( rule__WriteDelay__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10578:1: ( rule__WriteDelay__Arg1Assignment_1 )
            {
             before(grammarAccess.getWriteDelayAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10579:1: ( rule__WriteDelay__Arg1Assignment_1 )
            // InternalSpinCAD.g:10579:2: rule__WriteDelay__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__WriteDelay__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getWriteDelayAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__1__Impl"


    // $ANTLR start "rule__WriteDelay__Group__2"
    // InternalSpinCAD.g:10589:1: rule__WriteDelay__Group__2 : rule__WriteDelay__Group__2__Impl rule__WriteDelay__Group__3 ;
    public final void rule__WriteDelay__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10593:1: ( rule__WriteDelay__Group__2__Impl rule__WriteDelay__Group__3 )
            // InternalSpinCAD.g:10594:2: rule__WriteDelay__Group__2__Impl rule__WriteDelay__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__WriteDelay__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteDelay__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__2"


    // $ANTLR start "rule__WriteDelay__Group__2__Impl"
    // InternalSpinCAD.g:10601:1: rule__WriteDelay__Group__2__Impl : ( ',' ) ;
    public final void rule__WriteDelay__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10605:1: ( ( ',' ) )
            // InternalSpinCAD.g:10606:1: ( ',' )
            {
            // InternalSpinCAD.g:10606:1: ( ',' )
            // InternalSpinCAD.g:10607:1: ','
            {
             before(grammarAccess.getWriteDelayAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getWriteDelayAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__2__Impl"


    // $ANTLR start "rule__WriteDelay__Group__3"
    // InternalSpinCAD.g:10620:1: rule__WriteDelay__Group__3 : rule__WriteDelay__Group__3__Impl ;
    public final void rule__WriteDelay__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10624:1: ( rule__WriteDelay__Group__3__Impl )
            // InternalSpinCAD.g:10625:2: rule__WriteDelay__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__WriteDelay__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__3"


    // $ANTLR start "rule__WriteDelay__Group__3__Impl"
    // InternalSpinCAD.g:10631:1: rule__WriteDelay__Group__3__Impl : ( ( rule__WriteDelay__Arg2Assignment_3 ) ) ;
    public final void rule__WriteDelay__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10635:1: ( ( ( rule__WriteDelay__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10636:1: ( ( rule__WriteDelay__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10636:1: ( ( rule__WriteDelay__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10637:1: ( rule__WriteDelay__Arg2Assignment_3 )
            {
             before(grammarAccess.getWriteDelayAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10638:1: ( rule__WriteDelay__Arg2Assignment_3 )
            // InternalSpinCAD.g:10638:2: rule__WriteDelay__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__WriteDelay__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getWriteDelayAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Group__3__Impl"


    // $ANTLR start "rule__WriteAllpass__Group__0"
    // InternalSpinCAD.g:10656:1: rule__WriteAllpass__Group__0 : rule__WriteAllpass__Group__0__Impl rule__WriteAllpass__Group__1 ;
    public final void rule__WriteAllpass__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10660:1: ( rule__WriteAllpass__Group__0__Impl rule__WriteAllpass__Group__1 )
            // InternalSpinCAD.g:10661:2: rule__WriteAllpass__Group__0__Impl rule__WriteAllpass__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__WriteAllpass__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__0"


    // $ANTLR start "rule__WriteAllpass__Group__0__Impl"
    // InternalSpinCAD.g:10668:1: rule__WriteAllpass__Group__0__Impl : ( 'wrap' ) ;
    public final void rule__WriteAllpass__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10672:1: ( ( 'wrap' ) )
            // InternalSpinCAD.g:10673:1: ( 'wrap' )
            {
            // InternalSpinCAD.g:10673:1: ( 'wrap' )
            // InternalSpinCAD.g:10674:1: 'wrap'
            {
             before(grammarAccess.getWriteAllpassAccess().getWrapKeyword_0()); 
            match(input,74,FOLLOW_2); 
             after(grammarAccess.getWriteAllpassAccess().getWrapKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__0__Impl"


    // $ANTLR start "rule__WriteAllpass__Group__1"
    // InternalSpinCAD.g:10687:1: rule__WriteAllpass__Group__1 : rule__WriteAllpass__Group__1__Impl rule__WriteAllpass__Group__2 ;
    public final void rule__WriteAllpass__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10691:1: ( rule__WriteAllpass__Group__1__Impl rule__WriteAllpass__Group__2 )
            // InternalSpinCAD.g:10692:2: rule__WriteAllpass__Group__1__Impl rule__WriteAllpass__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__WriteAllpass__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__1"


    // $ANTLR start "rule__WriteAllpass__Group__1__Impl"
    // InternalSpinCAD.g:10699:1: rule__WriteAllpass__Group__1__Impl : ( ( rule__WriteAllpass__Arg1Assignment_1 ) ) ;
    public final void rule__WriteAllpass__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10703:1: ( ( ( rule__WriteAllpass__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10704:1: ( ( rule__WriteAllpass__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10704:1: ( ( rule__WriteAllpass__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10705:1: ( rule__WriteAllpass__Arg1Assignment_1 )
            {
             before(grammarAccess.getWriteAllpassAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10706:1: ( rule__WriteAllpass__Arg1Assignment_1 )
            // InternalSpinCAD.g:10706:2: rule__WriteAllpass__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getWriteAllpassAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__1__Impl"


    // $ANTLR start "rule__WriteAllpass__Group__2"
    // InternalSpinCAD.g:10716:1: rule__WriteAllpass__Group__2 : rule__WriteAllpass__Group__2__Impl rule__WriteAllpass__Group__3 ;
    public final void rule__WriteAllpass__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10720:1: ( rule__WriteAllpass__Group__2__Impl rule__WriteAllpass__Group__3 )
            // InternalSpinCAD.g:10721:2: rule__WriteAllpass__Group__2__Impl rule__WriteAllpass__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__WriteAllpass__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__2"


    // $ANTLR start "rule__WriteAllpass__Group__2__Impl"
    // InternalSpinCAD.g:10728:1: rule__WriteAllpass__Group__2__Impl : ( ',' ) ;
    public final void rule__WriteAllpass__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10732:1: ( ( ',' ) )
            // InternalSpinCAD.g:10733:1: ( ',' )
            {
            // InternalSpinCAD.g:10733:1: ( ',' )
            // InternalSpinCAD.g:10734:1: ','
            {
             before(grammarAccess.getWriteAllpassAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getWriteAllpassAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__2__Impl"


    // $ANTLR start "rule__WriteAllpass__Group__3"
    // InternalSpinCAD.g:10747:1: rule__WriteAllpass__Group__3 : rule__WriteAllpass__Group__3__Impl ;
    public final void rule__WriteAllpass__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10751:1: ( rule__WriteAllpass__Group__3__Impl )
            // InternalSpinCAD.g:10752:2: rule__WriteAllpass__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__3"


    // $ANTLR start "rule__WriteAllpass__Group__3__Impl"
    // InternalSpinCAD.g:10758:1: rule__WriteAllpass__Group__3__Impl : ( ( rule__WriteAllpass__Arg2Assignment_3 ) ) ;
    public final void rule__WriteAllpass__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10762:1: ( ( ( rule__WriteAllpass__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10763:1: ( ( rule__WriteAllpass__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10763:1: ( ( rule__WriteAllpass__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10764:1: ( rule__WriteAllpass__Arg2Assignment_3 )
            {
             before(grammarAccess.getWriteAllpassAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10765:1: ( rule__WriteAllpass__Arg2Assignment_3 )
            // InternalSpinCAD.g:10765:2: rule__WriteAllpass__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__WriteAllpass__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getWriteAllpassAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Group__3__Impl"


    // $ANTLR start "rule__ReadDelay__Group__0"
    // InternalSpinCAD.g:10783:1: rule__ReadDelay__Group__0 : rule__ReadDelay__Group__0__Impl rule__ReadDelay__Group__1 ;
    public final void rule__ReadDelay__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10787:1: ( rule__ReadDelay__Group__0__Impl rule__ReadDelay__Group__1 )
            // InternalSpinCAD.g:10788:2: rule__ReadDelay__Group__0__Impl rule__ReadDelay__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ReadDelay__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadDelay__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__0"


    // $ANTLR start "rule__ReadDelay__Group__0__Impl"
    // InternalSpinCAD.g:10795:1: rule__ReadDelay__Group__0__Impl : ( 'rda' ) ;
    public final void rule__ReadDelay__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10799:1: ( ( 'rda' ) )
            // InternalSpinCAD.g:10800:1: ( 'rda' )
            {
            // InternalSpinCAD.g:10800:1: ( 'rda' )
            // InternalSpinCAD.g:10801:1: 'rda'
            {
             before(grammarAccess.getReadDelayAccess().getRdaKeyword_0()); 
            match(input,75,FOLLOW_2); 
             after(grammarAccess.getReadDelayAccess().getRdaKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__0__Impl"


    // $ANTLR start "rule__ReadDelay__Group__1"
    // InternalSpinCAD.g:10814:1: rule__ReadDelay__Group__1 : rule__ReadDelay__Group__1__Impl rule__ReadDelay__Group__2 ;
    public final void rule__ReadDelay__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10818:1: ( rule__ReadDelay__Group__1__Impl rule__ReadDelay__Group__2 )
            // InternalSpinCAD.g:10819:2: rule__ReadDelay__Group__1__Impl rule__ReadDelay__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__ReadDelay__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadDelay__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__1"


    // $ANTLR start "rule__ReadDelay__Group__1__Impl"
    // InternalSpinCAD.g:10826:1: rule__ReadDelay__Group__1__Impl : ( ( rule__ReadDelay__Arg1Assignment_1 ) ) ;
    public final void rule__ReadDelay__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10830:1: ( ( ( rule__ReadDelay__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10831:1: ( ( rule__ReadDelay__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10831:1: ( ( rule__ReadDelay__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10832:1: ( rule__ReadDelay__Arg1Assignment_1 )
            {
             before(grammarAccess.getReadDelayAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10833:1: ( rule__ReadDelay__Arg1Assignment_1 )
            // InternalSpinCAD.g:10833:2: rule__ReadDelay__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelay__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getReadDelayAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__1__Impl"


    // $ANTLR start "rule__ReadDelay__Group__2"
    // InternalSpinCAD.g:10843:1: rule__ReadDelay__Group__2 : rule__ReadDelay__Group__2__Impl rule__ReadDelay__Group__3 ;
    public final void rule__ReadDelay__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10847:1: ( rule__ReadDelay__Group__2__Impl rule__ReadDelay__Group__3 )
            // InternalSpinCAD.g:10848:2: rule__ReadDelay__Group__2__Impl rule__ReadDelay__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__ReadDelay__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadDelay__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__2"


    // $ANTLR start "rule__ReadDelay__Group__2__Impl"
    // InternalSpinCAD.g:10855:1: rule__ReadDelay__Group__2__Impl : ( ',' ) ;
    public final void rule__ReadDelay__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10859:1: ( ( ',' ) )
            // InternalSpinCAD.g:10860:1: ( ',' )
            {
            // InternalSpinCAD.g:10860:1: ( ',' )
            // InternalSpinCAD.g:10861:1: ','
            {
             before(grammarAccess.getReadDelayAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getReadDelayAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__2__Impl"


    // $ANTLR start "rule__ReadDelay__Group__3"
    // InternalSpinCAD.g:10874:1: rule__ReadDelay__Group__3 : rule__ReadDelay__Group__3__Impl ;
    public final void rule__ReadDelay__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10878:1: ( rule__ReadDelay__Group__3__Impl )
            // InternalSpinCAD.g:10879:2: rule__ReadDelay__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelay__Group__3__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__3"


    // $ANTLR start "rule__ReadDelay__Group__3__Impl"
    // InternalSpinCAD.g:10885:1: rule__ReadDelay__Group__3__Impl : ( ( rule__ReadDelay__Arg2Assignment_3 ) ) ;
    public final void rule__ReadDelay__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10889:1: ( ( ( rule__ReadDelay__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:10890:1: ( ( rule__ReadDelay__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:10890:1: ( ( rule__ReadDelay__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:10891:1: ( rule__ReadDelay__Arg2Assignment_3 )
            {
             before(grammarAccess.getReadDelayAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:10892:1: ( rule__ReadDelay__Arg2Assignment_3 )
            // InternalSpinCAD.g:10892:2: rule__ReadDelay__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelay__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getReadDelayAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Group__3__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__0"
    // InternalSpinCAD.g:10910:1: rule__LoadSinLFO__Group__0 : rule__LoadSinLFO__Group__0__Impl rule__LoadSinLFO__Group__1 ;
    public final void rule__LoadSinLFO__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10914:1: ( rule__LoadSinLFO__Group__0__Impl rule__LoadSinLFO__Group__1 )
            // InternalSpinCAD.g:10915:2: rule__LoadSinLFO__Group__0__Impl rule__LoadSinLFO__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__LoadSinLFO__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__0"


    // $ANTLR start "rule__LoadSinLFO__Group__0__Impl"
    // InternalSpinCAD.g:10922:1: rule__LoadSinLFO__Group__0__Impl : ( 'wlds' ) ;
    public final void rule__LoadSinLFO__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10926:1: ( ( 'wlds' ) )
            // InternalSpinCAD.g:10927:1: ( 'wlds' )
            {
            // InternalSpinCAD.g:10927:1: ( 'wlds' )
            // InternalSpinCAD.g:10928:1: 'wlds'
            {
             before(grammarAccess.getLoadSinLFOAccess().getWldsKeyword_0()); 
            match(input,76,FOLLOW_2); 
             after(grammarAccess.getLoadSinLFOAccess().getWldsKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__0__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__1"
    // InternalSpinCAD.g:10941:1: rule__LoadSinLFO__Group__1 : rule__LoadSinLFO__Group__1__Impl rule__LoadSinLFO__Group__2 ;
    public final void rule__LoadSinLFO__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10945:1: ( rule__LoadSinLFO__Group__1__Impl rule__LoadSinLFO__Group__2 )
            // InternalSpinCAD.g:10946:2: rule__LoadSinLFO__Group__1__Impl rule__LoadSinLFO__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__LoadSinLFO__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__1"


    // $ANTLR start "rule__LoadSinLFO__Group__1__Impl"
    // InternalSpinCAD.g:10953:1: rule__LoadSinLFO__Group__1__Impl : ( ( rule__LoadSinLFO__Arg1Assignment_1 ) ) ;
    public final void rule__LoadSinLFO__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10957:1: ( ( ( rule__LoadSinLFO__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:10958:1: ( ( rule__LoadSinLFO__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:10958:1: ( ( rule__LoadSinLFO__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:10959:1: ( rule__LoadSinLFO__Arg1Assignment_1 )
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:10960:1: ( rule__LoadSinLFO__Arg1Assignment_1 )
            // InternalSpinCAD.g:10960:2: rule__LoadSinLFO__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLoadSinLFOAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__1__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__2"
    // InternalSpinCAD.g:10970:1: rule__LoadSinLFO__Group__2 : rule__LoadSinLFO__Group__2__Impl rule__LoadSinLFO__Group__3 ;
    public final void rule__LoadSinLFO__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10974:1: ( rule__LoadSinLFO__Group__2__Impl rule__LoadSinLFO__Group__3 )
            // InternalSpinCAD.g:10975:2: rule__LoadSinLFO__Group__2__Impl rule__LoadSinLFO__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__LoadSinLFO__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__2"


    // $ANTLR start "rule__LoadSinLFO__Group__2__Impl"
    // InternalSpinCAD.g:10982:1: rule__LoadSinLFO__Group__2__Impl : ( ',' ) ;
    public final void rule__LoadSinLFO__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:10986:1: ( ( ',' ) )
            // InternalSpinCAD.g:10987:1: ( ',' )
            {
            // InternalSpinCAD.g:10987:1: ( ',' )
            // InternalSpinCAD.g:10988:1: ','
            {
             before(grammarAccess.getLoadSinLFOAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getLoadSinLFOAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__2__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__3"
    // InternalSpinCAD.g:11001:1: rule__LoadSinLFO__Group__3 : rule__LoadSinLFO__Group__3__Impl rule__LoadSinLFO__Group__4 ;
    public final void rule__LoadSinLFO__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11005:1: ( rule__LoadSinLFO__Group__3__Impl rule__LoadSinLFO__Group__4 )
            // InternalSpinCAD.g:11006:2: rule__LoadSinLFO__Group__3__Impl rule__LoadSinLFO__Group__4
            {
            pushFollow(FOLLOW_17);
            rule__LoadSinLFO__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__3"


    // $ANTLR start "rule__LoadSinLFO__Group__3__Impl"
    // InternalSpinCAD.g:11013:1: rule__LoadSinLFO__Group__3__Impl : ( ( rule__LoadSinLFO__Arg2Assignment_3 ) ) ;
    public final void rule__LoadSinLFO__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11017:1: ( ( ( rule__LoadSinLFO__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:11018:1: ( ( rule__LoadSinLFO__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:11018:1: ( ( rule__LoadSinLFO__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:11019:1: ( rule__LoadSinLFO__Arg2Assignment_3 )
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:11020:1: ( rule__LoadSinLFO__Arg2Assignment_3 )
            // InternalSpinCAD.g:11020:2: rule__LoadSinLFO__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getLoadSinLFOAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__3__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__4"
    // InternalSpinCAD.g:11030:1: rule__LoadSinLFO__Group__4 : rule__LoadSinLFO__Group__4__Impl rule__LoadSinLFO__Group__5 ;
    public final void rule__LoadSinLFO__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11034:1: ( rule__LoadSinLFO__Group__4__Impl rule__LoadSinLFO__Group__5 )
            // InternalSpinCAD.g:11035:2: rule__LoadSinLFO__Group__4__Impl rule__LoadSinLFO__Group__5
            {
            pushFollow(FOLLOW_10);
            rule__LoadSinLFO__Group__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__4"


    // $ANTLR start "rule__LoadSinLFO__Group__4__Impl"
    // InternalSpinCAD.g:11042:1: rule__LoadSinLFO__Group__4__Impl : ( ',' ) ;
    public final void rule__LoadSinLFO__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11046:1: ( ( ',' ) )
            // InternalSpinCAD.g:11047:1: ( ',' )
            {
            // InternalSpinCAD.g:11047:1: ( ',' )
            // InternalSpinCAD.g:11048:1: ','
            {
             before(grammarAccess.getLoadSinLFOAccess().getCommaKeyword_4()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getLoadSinLFOAccess().getCommaKeyword_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__4__Impl"


    // $ANTLR start "rule__LoadSinLFO__Group__5"
    // InternalSpinCAD.g:11061:1: rule__LoadSinLFO__Group__5 : rule__LoadSinLFO__Group__5__Impl ;
    public final void rule__LoadSinLFO__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11065:1: ( rule__LoadSinLFO__Group__5__Impl )
            // InternalSpinCAD.g:11066:2: rule__LoadSinLFO__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Group__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__5"


    // $ANTLR start "rule__LoadSinLFO__Group__5__Impl"
    // InternalSpinCAD.g:11072:1: rule__LoadSinLFO__Group__5__Impl : ( ( rule__LoadSinLFO__Arg3Assignment_5 ) ) ;
    public final void rule__LoadSinLFO__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11076:1: ( ( ( rule__LoadSinLFO__Arg3Assignment_5 ) ) )
            // InternalSpinCAD.g:11077:1: ( ( rule__LoadSinLFO__Arg3Assignment_5 ) )
            {
            // InternalSpinCAD.g:11077:1: ( ( rule__LoadSinLFO__Arg3Assignment_5 ) )
            // InternalSpinCAD.g:11078:1: ( rule__LoadSinLFO__Arg3Assignment_5 )
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg3Assignment_5()); 
            // InternalSpinCAD.g:11079:1: ( rule__LoadSinLFO__Arg3Assignment_5 )
            // InternalSpinCAD.g:11079:2: rule__LoadSinLFO__Arg3Assignment_5
            {
            pushFollow(FOLLOW_2);
            rule__LoadSinLFO__Arg3Assignment_5();

            state._fsp--;


            }

             after(grammarAccess.getLoadSinLFOAccess().getArg3Assignment_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Group__5__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__0"
    // InternalSpinCAD.g:11101:1: rule__LoadRampLFO__Group__0 : rule__LoadRampLFO__Group__0__Impl rule__LoadRampLFO__Group__1 ;
    public final void rule__LoadRampLFO__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11105:1: ( rule__LoadRampLFO__Group__0__Impl rule__LoadRampLFO__Group__1 )
            // InternalSpinCAD.g:11106:2: rule__LoadRampLFO__Group__0__Impl rule__LoadRampLFO__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__LoadRampLFO__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__0"


    // $ANTLR start "rule__LoadRampLFO__Group__0__Impl"
    // InternalSpinCAD.g:11113:1: rule__LoadRampLFO__Group__0__Impl : ( 'wldr' ) ;
    public final void rule__LoadRampLFO__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11117:1: ( ( 'wldr' ) )
            // InternalSpinCAD.g:11118:1: ( 'wldr' )
            {
            // InternalSpinCAD.g:11118:1: ( 'wldr' )
            // InternalSpinCAD.g:11119:1: 'wldr'
            {
             before(grammarAccess.getLoadRampLFOAccess().getWldrKeyword_0()); 
            match(input,77,FOLLOW_2); 
             after(grammarAccess.getLoadRampLFOAccess().getWldrKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__0__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__1"
    // InternalSpinCAD.g:11132:1: rule__LoadRampLFO__Group__1 : rule__LoadRampLFO__Group__1__Impl rule__LoadRampLFO__Group__2 ;
    public final void rule__LoadRampLFO__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11136:1: ( rule__LoadRampLFO__Group__1__Impl rule__LoadRampLFO__Group__2 )
            // InternalSpinCAD.g:11137:2: rule__LoadRampLFO__Group__1__Impl rule__LoadRampLFO__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__LoadRampLFO__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__1"


    // $ANTLR start "rule__LoadRampLFO__Group__1__Impl"
    // InternalSpinCAD.g:11144:1: rule__LoadRampLFO__Group__1__Impl : ( ( rule__LoadRampLFO__Arg1Assignment_1 ) ) ;
    public final void rule__LoadRampLFO__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11148:1: ( ( ( rule__LoadRampLFO__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:11149:1: ( ( rule__LoadRampLFO__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:11149:1: ( ( rule__LoadRampLFO__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:11150:1: ( rule__LoadRampLFO__Arg1Assignment_1 )
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:11151:1: ( rule__LoadRampLFO__Arg1Assignment_1 )
            // InternalSpinCAD.g:11151:2: rule__LoadRampLFO__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getLoadRampLFOAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__1__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__2"
    // InternalSpinCAD.g:11161:1: rule__LoadRampLFO__Group__2 : rule__LoadRampLFO__Group__2__Impl rule__LoadRampLFO__Group__3 ;
    public final void rule__LoadRampLFO__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11165:1: ( rule__LoadRampLFO__Group__2__Impl rule__LoadRampLFO__Group__3 )
            // InternalSpinCAD.g:11166:2: rule__LoadRampLFO__Group__2__Impl rule__LoadRampLFO__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__LoadRampLFO__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__2"


    // $ANTLR start "rule__LoadRampLFO__Group__2__Impl"
    // InternalSpinCAD.g:11173:1: rule__LoadRampLFO__Group__2__Impl : ( ',' ) ;
    public final void rule__LoadRampLFO__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11177:1: ( ( ',' ) )
            // InternalSpinCAD.g:11178:1: ( ',' )
            {
            // InternalSpinCAD.g:11178:1: ( ',' )
            // InternalSpinCAD.g:11179:1: ','
            {
             before(grammarAccess.getLoadRampLFOAccess().getCommaKeyword_2()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getLoadRampLFOAccess().getCommaKeyword_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__2__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__3"
    // InternalSpinCAD.g:11192:1: rule__LoadRampLFO__Group__3 : rule__LoadRampLFO__Group__3__Impl rule__LoadRampLFO__Group__4 ;
    public final void rule__LoadRampLFO__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11196:1: ( rule__LoadRampLFO__Group__3__Impl rule__LoadRampLFO__Group__4 )
            // InternalSpinCAD.g:11197:2: rule__LoadRampLFO__Group__3__Impl rule__LoadRampLFO__Group__4
            {
            pushFollow(FOLLOW_17);
            rule__LoadRampLFO__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__3"


    // $ANTLR start "rule__LoadRampLFO__Group__3__Impl"
    // InternalSpinCAD.g:11204:1: rule__LoadRampLFO__Group__3__Impl : ( ( rule__LoadRampLFO__Arg2Assignment_3 ) ) ;
    public final void rule__LoadRampLFO__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11208:1: ( ( ( rule__LoadRampLFO__Arg2Assignment_3 ) ) )
            // InternalSpinCAD.g:11209:1: ( ( rule__LoadRampLFO__Arg2Assignment_3 ) )
            {
            // InternalSpinCAD.g:11209:1: ( ( rule__LoadRampLFO__Arg2Assignment_3 ) )
            // InternalSpinCAD.g:11210:1: ( rule__LoadRampLFO__Arg2Assignment_3 )
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg2Assignment_3()); 
            // InternalSpinCAD.g:11211:1: ( rule__LoadRampLFO__Arg2Assignment_3 )
            // InternalSpinCAD.g:11211:2: rule__LoadRampLFO__Arg2Assignment_3
            {
            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Arg2Assignment_3();

            state._fsp--;


            }

             after(grammarAccess.getLoadRampLFOAccess().getArg2Assignment_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__3__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__4"
    // InternalSpinCAD.g:11221:1: rule__LoadRampLFO__Group__4 : rule__LoadRampLFO__Group__4__Impl rule__LoadRampLFO__Group__5 ;
    public final void rule__LoadRampLFO__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11225:1: ( rule__LoadRampLFO__Group__4__Impl rule__LoadRampLFO__Group__5 )
            // InternalSpinCAD.g:11226:2: rule__LoadRampLFO__Group__4__Impl rule__LoadRampLFO__Group__5
            {
            pushFollow(FOLLOW_10);
            rule__LoadRampLFO__Group__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__4"


    // $ANTLR start "rule__LoadRampLFO__Group__4__Impl"
    // InternalSpinCAD.g:11233:1: rule__LoadRampLFO__Group__4__Impl : ( ',' ) ;
    public final void rule__LoadRampLFO__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11237:1: ( ( ',' ) )
            // InternalSpinCAD.g:11238:1: ( ',' )
            {
            // InternalSpinCAD.g:11238:1: ( ',' )
            // InternalSpinCAD.g:11239:1: ','
            {
             before(grammarAccess.getLoadRampLFOAccess().getCommaKeyword_4()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getLoadRampLFOAccess().getCommaKeyword_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__4__Impl"


    // $ANTLR start "rule__LoadRampLFO__Group__5"
    // InternalSpinCAD.g:11252:1: rule__LoadRampLFO__Group__5 : rule__LoadRampLFO__Group__5__Impl ;
    public final void rule__LoadRampLFO__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11256:1: ( rule__LoadRampLFO__Group__5__Impl )
            // InternalSpinCAD.g:11257:2: rule__LoadRampLFO__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Group__5__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__5"


    // $ANTLR start "rule__LoadRampLFO__Group__5__Impl"
    // InternalSpinCAD.g:11263:1: rule__LoadRampLFO__Group__5__Impl : ( ( rule__LoadRampLFO__Arg3Assignment_5 ) ) ;
    public final void rule__LoadRampLFO__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11267:1: ( ( ( rule__LoadRampLFO__Arg3Assignment_5 ) ) )
            // InternalSpinCAD.g:11268:1: ( ( rule__LoadRampLFO__Arg3Assignment_5 ) )
            {
            // InternalSpinCAD.g:11268:1: ( ( rule__LoadRampLFO__Arg3Assignment_5 ) )
            // InternalSpinCAD.g:11269:1: ( rule__LoadRampLFO__Arg3Assignment_5 )
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg3Assignment_5()); 
            // InternalSpinCAD.g:11270:1: ( rule__LoadRampLFO__Arg3Assignment_5 )
            // InternalSpinCAD.g:11270:2: rule__LoadRampLFO__Arg3Assignment_5
            {
            pushFollow(FOLLOW_2);
            rule__LoadRampLFO__Arg3Assignment_5();

            state._fsp--;


            }

             after(grammarAccess.getLoadRampLFOAccess().getArg3Assignment_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Group__5__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__0"
    // InternalSpinCAD.g:11292:1: rule__ChorusReadDelay__Group__0 : rule__ChorusReadDelay__Group__0__Impl rule__ChorusReadDelay__Group__1 ;
    public final void rule__ChorusReadDelay__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11296:1: ( rule__ChorusReadDelay__Group__0__Impl rule__ChorusReadDelay__Group__1 )
            // InternalSpinCAD.g:11297:2: rule__ChorusReadDelay__Group__0__Impl rule__ChorusReadDelay__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__ChorusReadDelay__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__0"


    // $ANTLR start "rule__ChorusReadDelay__Group__0__Impl"
    // InternalSpinCAD.g:11304:1: rule__ChorusReadDelay__Group__0__Impl : ( 'cho rda' ) ;
    public final void rule__ChorusReadDelay__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11308:1: ( ( 'cho rda' ) )
            // InternalSpinCAD.g:11309:1: ( 'cho rda' )
            {
            // InternalSpinCAD.g:11309:1: ( 'cho rda' )
            // InternalSpinCAD.g:11310:1: 'cho rda'
            {
             before(grammarAccess.getChorusReadDelayAccess().getChoRdaKeyword_0()); 
            match(input,78,FOLLOW_2); 
             after(grammarAccess.getChorusReadDelayAccess().getChoRdaKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__0__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__1"
    // InternalSpinCAD.g:11323:1: rule__ChorusReadDelay__Group__1 : rule__ChorusReadDelay__Group__1__Impl rule__ChorusReadDelay__Group__2 ;
    public final void rule__ChorusReadDelay__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11327:1: ( rule__ChorusReadDelay__Group__1__Impl rule__ChorusReadDelay__Group__2 )
            // InternalSpinCAD.g:11328:2: rule__ChorusReadDelay__Group__1__Impl rule__ChorusReadDelay__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__ChorusReadDelay__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__1"


    // $ANTLR start "rule__ChorusReadDelay__Group__1__Impl"
    // InternalSpinCAD.g:11335:1: rule__ChorusReadDelay__Group__1__Impl : ( ',' ) ;
    public final void rule__ChorusReadDelay__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11339:1: ( ( ',' ) )
            // InternalSpinCAD.g:11340:1: ( ',' )
            {
            // InternalSpinCAD.g:11340:1: ( ',' )
            // InternalSpinCAD.g:11341:1: ','
            {
             before(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_1()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__1__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__2"
    // InternalSpinCAD.g:11354:1: rule__ChorusReadDelay__Group__2 : rule__ChorusReadDelay__Group__2__Impl rule__ChorusReadDelay__Group__3 ;
    public final void rule__ChorusReadDelay__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11358:1: ( rule__ChorusReadDelay__Group__2__Impl rule__ChorusReadDelay__Group__3 )
            // InternalSpinCAD.g:11359:2: rule__ChorusReadDelay__Group__2__Impl rule__ChorusReadDelay__Group__3
            {
            pushFollow(FOLLOW_17);
            rule__ChorusReadDelay__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__2"


    // $ANTLR start "rule__ChorusReadDelay__Group__2__Impl"
    // InternalSpinCAD.g:11366:1: rule__ChorusReadDelay__Group__2__Impl : ( ( rule__ChorusReadDelay__Arg1Assignment_2 ) ) ;
    public final void rule__ChorusReadDelay__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11370:1: ( ( ( rule__ChorusReadDelay__Arg1Assignment_2 ) ) )
            // InternalSpinCAD.g:11371:1: ( ( rule__ChorusReadDelay__Arg1Assignment_2 ) )
            {
            // InternalSpinCAD.g:11371:1: ( ( rule__ChorusReadDelay__Arg1Assignment_2 ) )
            // InternalSpinCAD.g:11372:1: ( rule__ChorusReadDelay__Arg1Assignment_2 )
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg1Assignment_2()); 
            // InternalSpinCAD.g:11373:1: ( rule__ChorusReadDelay__Arg1Assignment_2 )
            // InternalSpinCAD.g:11373:2: rule__ChorusReadDelay__Arg1Assignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Arg1Assignment_2();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadDelayAccess().getArg1Assignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__2__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__3"
    // InternalSpinCAD.g:11383:1: rule__ChorusReadDelay__Group__3 : rule__ChorusReadDelay__Group__3__Impl rule__ChorusReadDelay__Group__4 ;
    public final void rule__ChorusReadDelay__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11387:1: ( rule__ChorusReadDelay__Group__3__Impl rule__ChorusReadDelay__Group__4 )
            // InternalSpinCAD.g:11388:2: rule__ChorusReadDelay__Group__3__Impl rule__ChorusReadDelay__Group__4
            {
            pushFollow(FOLLOW_18);
            rule__ChorusReadDelay__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__3"


    // $ANTLR start "rule__ChorusReadDelay__Group__3__Impl"
    // InternalSpinCAD.g:11395:1: rule__ChorusReadDelay__Group__3__Impl : ( ',' ) ;
    public final void rule__ChorusReadDelay__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11399:1: ( ( ',' ) )
            // InternalSpinCAD.g:11400:1: ( ',' )
            {
            // InternalSpinCAD.g:11400:1: ( ',' )
            // InternalSpinCAD.g:11401:1: ','
            {
             before(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_3()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__3__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__4"
    // InternalSpinCAD.g:11414:1: rule__ChorusReadDelay__Group__4 : rule__ChorusReadDelay__Group__4__Impl rule__ChorusReadDelay__Group__5 ;
    public final void rule__ChorusReadDelay__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11418:1: ( rule__ChorusReadDelay__Group__4__Impl rule__ChorusReadDelay__Group__5 )
            // InternalSpinCAD.g:11419:2: rule__ChorusReadDelay__Group__4__Impl rule__ChorusReadDelay__Group__5
            {
            pushFollow(FOLLOW_17);
            rule__ChorusReadDelay__Group__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__4"


    // $ANTLR start "rule__ChorusReadDelay__Group__4__Impl"
    // InternalSpinCAD.g:11426:1: rule__ChorusReadDelay__Group__4__Impl : ( ( rule__ChorusReadDelay__Arg2Assignment_4 ) ) ;
    public final void rule__ChorusReadDelay__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11430:1: ( ( ( rule__ChorusReadDelay__Arg2Assignment_4 ) ) )
            // InternalSpinCAD.g:11431:1: ( ( rule__ChorusReadDelay__Arg2Assignment_4 ) )
            {
            // InternalSpinCAD.g:11431:1: ( ( rule__ChorusReadDelay__Arg2Assignment_4 ) )
            // InternalSpinCAD.g:11432:1: ( rule__ChorusReadDelay__Arg2Assignment_4 )
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg2Assignment_4()); 
            // InternalSpinCAD.g:11433:1: ( rule__ChorusReadDelay__Arg2Assignment_4 )
            // InternalSpinCAD.g:11433:2: rule__ChorusReadDelay__Arg2Assignment_4
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Arg2Assignment_4();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadDelayAccess().getArg2Assignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__4__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__5"
    // InternalSpinCAD.g:11443:1: rule__ChorusReadDelay__Group__5 : rule__ChorusReadDelay__Group__5__Impl rule__ChorusReadDelay__Group__6 ;
    public final void rule__ChorusReadDelay__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11447:1: ( rule__ChorusReadDelay__Group__5__Impl rule__ChorusReadDelay__Group__6 )
            // InternalSpinCAD.g:11448:2: rule__ChorusReadDelay__Group__5__Impl rule__ChorusReadDelay__Group__6
            {
            pushFollow(FOLLOW_9);
            rule__ChorusReadDelay__Group__5__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__6();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__5"


    // $ANTLR start "rule__ChorusReadDelay__Group__5__Impl"
    // InternalSpinCAD.g:11455:1: rule__ChorusReadDelay__Group__5__Impl : ( ',' ) ;
    public final void rule__ChorusReadDelay__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11459:1: ( ( ',' ) )
            // InternalSpinCAD.g:11460:1: ( ',' )
            {
            // InternalSpinCAD.g:11460:1: ( ',' )
            // InternalSpinCAD.g:11461:1: ','
            {
             before(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_5()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusReadDelayAccess().getCommaKeyword_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__5__Impl"


    // $ANTLR start "rule__ChorusReadDelay__Group__6"
    // InternalSpinCAD.g:11474:1: rule__ChorusReadDelay__Group__6 : rule__ChorusReadDelay__Group__6__Impl ;
    public final void rule__ChorusReadDelay__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11478:1: ( rule__ChorusReadDelay__Group__6__Impl )
            // InternalSpinCAD.g:11479:2: rule__ChorusReadDelay__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Group__6__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__6"


    // $ANTLR start "rule__ChorusReadDelay__Group__6__Impl"
    // InternalSpinCAD.g:11485:1: rule__ChorusReadDelay__Group__6__Impl : ( ( rule__ChorusReadDelay__Arg3Assignment_6 ) ) ;
    public final void rule__ChorusReadDelay__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11489:1: ( ( ( rule__ChorusReadDelay__Arg3Assignment_6 ) ) )
            // InternalSpinCAD.g:11490:1: ( ( rule__ChorusReadDelay__Arg3Assignment_6 ) )
            {
            // InternalSpinCAD.g:11490:1: ( ( rule__ChorusReadDelay__Arg3Assignment_6 ) )
            // InternalSpinCAD.g:11491:1: ( rule__ChorusReadDelay__Arg3Assignment_6 )
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg3Assignment_6()); 
            // InternalSpinCAD.g:11492:1: ( rule__ChorusReadDelay__Arg3Assignment_6 )
            // InternalSpinCAD.g:11492:2: rule__ChorusReadDelay__Arg3Assignment_6
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadDelay__Arg3Assignment_6();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadDelayAccess().getArg3Assignment_6()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Group__6__Impl"


    // $ANTLR start "rule__ChorusReadValue__Group__0"
    // InternalSpinCAD.g:11516:1: rule__ChorusReadValue__Group__0 : rule__ChorusReadValue__Group__0__Impl rule__ChorusReadValue__Group__1 ;
    public final void rule__ChorusReadValue__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11520:1: ( rule__ChorusReadValue__Group__0__Impl rule__ChorusReadValue__Group__1 )
            // InternalSpinCAD.g:11521:2: rule__ChorusReadValue__Group__0__Impl rule__ChorusReadValue__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__ChorusReadValue__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadValue__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__0"


    // $ANTLR start "rule__ChorusReadValue__Group__0__Impl"
    // InternalSpinCAD.g:11528:1: rule__ChorusReadValue__Group__0__Impl : ( 'cho rdal' ) ;
    public final void rule__ChorusReadValue__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11532:1: ( ( 'cho rdal' ) )
            // InternalSpinCAD.g:11533:1: ( 'cho rdal' )
            {
            // InternalSpinCAD.g:11533:1: ( 'cho rdal' )
            // InternalSpinCAD.g:11534:1: 'cho rdal'
            {
             before(grammarAccess.getChorusReadValueAccess().getChoRdalKeyword_0()); 
            match(input,79,FOLLOW_2); 
             after(grammarAccess.getChorusReadValueAccess().getChoRdalKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__0__Impl"


    // $ANTLR start "rule__ChorusReadValue__Group__1"
    // InternalSpinCAD.g:11547:1: rule__ChorusReadValue__Group__1 : rule__ChorusReadValue__Group__1__Impl rule__ChorusReadValue__Group__2 ;
    public final void rule__ChorusReadValue__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11551:1: ( rule__ChorusReadValue__Group__1__Impl rule__ChorusReadValue__Group__2 )
            // InternalSpinCAD.g:11552:2: rule__ChorusReadValue__Group__1__Impl rule__ChorusReadValue__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__ChorusReadValue__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusReadValue__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__1"


    // $ANTLR start "rule__ChorusReadValue__Group__1__Impl"
    // InternalSpinCAD.g:11559:1: rule__ChorusReadValue__Group__1__Impl : ( ',' ) ;
    public final void rule__ChorusReadValue__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11563:1: ( ( ',' ) )
            // InternalSpinCAD.g:11564:1: ( ',' )
            {
            // InternalSpinCAD.g:11564:1: ( ',' )
            // InternalSpinCAD.g:11565:1: ','
            {
             before(grammarAccess.getChorusReadValueAccess().getCommaKeyword_1()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusReadValueAccess().getCommaKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__1__Impl"


    // $ANTLR start "rule__ChorusReadValue__Group__2"
    // InternalSpinCAD.g:11578:1: rule__ChorusReadValue__Group__2 : rule__ChorusReadValue__Group__2__Impl ;
    public final void rule__ChorusReadValue__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11582:1: ( rule__ChorusReadValue__Group__2__Impl )
            // InternalSpinCAD.g:11583:2: rule__ChorusReadValue__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadValue__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__2"


    // $ANTLR start "rule__ChorusReadValue__Group__2__Impl"
    // InternalSpinCAD.g:11589:1: rule__ChorusReadValue__Group__2__Impl : ( ( rule__ChorusReadValue__Arg1Assignment_2 ) ) ;
    public final void rule__ChorusReadValue__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11593:1: ( ( ( rule__ChorusReadValue__Arg1Assignment_2 ) ) )
            // InternalSpinCAD.g:11594:1: ( ( rule__ChorusReadValue__Arg1Assignment_2 ) )
            {
            // InternalSpinCAD.g:11594:1: ( ( rule__ChorusReadValue__Arg1Assignment_2 ) )
            // InternalSpinCAD.g:11595:1: ( rule__ChorusReadValue__Arg1Assignment_2 )
            {
             before(grammarAccess.getChorusReadValueAccess().getArg1Assignment_2()); 
            // InternalSpinCAD.g:11596:1: ( rule__ChorusReadValue__Arg1Assignment_2 )
            // InternalSpinCAD.g:11596:2: rule__ChorusReadValue__Arg1Assignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ChorusReadValue__Arg1Assignment_2();

            state._fsp--;


            }

             after(grammarAccess.getChorusReadValueAccess().getArg1Assignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Group__2__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__0"
    // InternalSpinCAD.g:11612:1: rule__ChorusScaleOffset__Group__0 : rule__ChorusScaleOffset__Group__0__Impl rule__ChorusScaleOffset__Group__1 ;
    public final void rule__ChorusScaleOffset__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11616:1: ( rule__ChorusScaleOffset__Group__0__Impl rule__ChorusScaleOffset__Group__1 )
            // InternalSpinCAD.g:11617:2: rule__ChorusScaleOffset__Group__0__Impl rule__ChorusScaleOffset__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__ChorusScaleOffset__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__0"


    // $ANTLR start "rule__ChorusScaleOffset__Group__0__Impl"
    // InternalSpinCAD.g:11624:1: rule__ChorusScaleOffset__Group__0__Impl : ( 'cho sof' ) ;
    public final void rule__ChorusScaleOffset__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11628:1: ( ( 'cho sof' ) )
            // InternalSpinCAD.g:11629:1: ( 'cho sof' )
            {
            // InternalSpinCAD.g:11629:1: ( 'cho sof' )
            // InternalSpinCAD.g:11630:1: 'cho sof'
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getChoSofKeyword_0()); 
            match(input,80,FOLLOW_2); 
             after(grammarAccess.getChorusScaleOffsetAccess().getChoSofKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__0__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__1"
    // InternalSpinCAD.g:11643:1: rule__ChorusScaleOffset__Group__1 : rule__ChorusScaleOffset__Group__1__Impl rule__ChorusScaleOffset__Group__2 ;
    public final void rule__ChorusScaleOffset__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11647:1: ( rule__ChorusScaleOffset__Group__1__Impl rule__ChorusScaleOffset__Group__2 )
            // InternalSpinCAD.g:11648:2: rule__ChorusScaleOffset__Group__1__Impl rule__ChorusScaleOffset__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__ChorusScaleOffset__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__1"


    // $ANTLR start "rule__ChorusScaleOffset__Group__1__Impl"
    // InternalSpinCAD.g:11655:1: rule__ChorusScaleOffset__Group__1__Impl : ( ',' ) ;
    public final void rule__ChorusScaleOffset__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11659:1: ( ( ',' ) )
            // InternalSpinCAD.g:11660:1: ( ',' )
            {
            // InternalSpinCAD.g:11660:1: ( ',' )
            // InternalSpinCAD.g:11661:1: ','
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_1()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__1__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__2"
    // InternalSpinCAD.g:11674:1: rule__ChorusScaleOffset__Group__2 : rule__ChorusScaleOffset__Group__2__Impl rule__ChorusScaleOffset__Group__3 ;
    public final void rule__ChorusScaleOffset__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11678:1: ( rule__ChorusScaleOffset__Group__2__Impl rule__ChorusScaleOffset__Group__3 )
            // InternalSpinCAD.g:11679:2: rule__ChorusScaleOffset__Group__2__Impl rule__ChorusScaleOffset__Group__3
            {
            pushFollow(FOLLOW_17);
            rule__ChorusScaleOffset__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__2"


    // $ANTLR start "rule__ChorusScaleOffset__Group__2__Impl"
    // InternalSpinCAD.g:11686:1: rule__ChorusScaleOffset__Group__2__Impl : ( ( rule__ChorusScaleOffset__Arg1Assignment_2 ) ) ;
    public final void rule__ChorusScaleOffset__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11690:1: ( ( ( rule__ChorusScaleOffset__Arg1Assignment_2 ) ) )
            // InternalSpinCAD.g:11691:1: ( ( rule__ChorusScaleOffset__Arg1Assignment_2 ) )
            {
            // InternalSpinCAD.g:11691:1: ( ( rule__ChorusScaleOffset__Arg1Assignment_2 ) )
            // InternalSpinCAD.g:11692:1: ( rule__ChorusScaleOffset__Arg1Assignment_2 )
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg1Assignment_2()); 
            // InternalSpinCAD.g:11693:1: ( rule__ChorusScaleOffset__Arg1Assignment_2 )
            // InternalSpinCAD.g:11693:2: rule__ChorusScaleOffset__Arg1Assignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Arg1Assignment_2();

            state._fsp--;


            }

             after(grammarAccess.getChorusScaleOffsetAccess().getArg1Assignment_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__2__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__3"
    // InternalSpinCAD.g:11703:1: rule__ChorusScaleOffset__Group__3 : rule__ChorusScaleOffset__Group__3__Impl rule__ChorusScaleOffset__Group__4 ;
    public final void rule__ChorusScaleOffset__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11707:1: ( rule__ChorusScaleOffset__Group__3__Impl rule__ChorusScaleOffset__Group__4 )
            // InternalSpinCAD.g:11708:2: rule__ChorusScaleOffset__Group__3__Impl rule__ChorusScaleOffset__Group__4
            {
            pushFollow(FOLLOW_18);
            rule__ChorusScaleOffset__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__3"


    // $ANTLR start "rule__ChorusScaleOffset__Group__3__Impl"
    // InternalSpinCAD.g:11715:1: rule__ChorusScaleOffset__Group__3__Impl : ( ',' ) ;
    public final void rule__ChorusScaleOffset__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11719:1: ( ( ',' ) )
            // InternalSpinCAD.g:11720:1: ( ',' )
            {
            // InternalSpinCAD.g:11720:1: ( ',' )
            // InternalSpinCAD.g:11721:1: ','
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_3()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__3__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__4"
    // InternalSpinCAD.g:11734:1: rule__ChorusScaleOffset__Group__4 : rule__ChorusScaleOffset__Group__4__Impl rule__ChorusScaleOffset__Group__5 ;
    public final void rule__ChorusScaleOffset__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11738:1: ( rule__ChorusScaleOffset__Group__4__Impl rule__ChorusScaleOffset__Group__5 )
            // InternalSpinCAD.g:11739:2: rule__ChorusScaleOffset__Group__4__Impl rule__ChorusScaleOffset__Group__5
            {
            pushFollow(FOLLOW_17);
            rule__ChorusScaleOffset__Group__4__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__5();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__4"


    // $ANTLR start "rule__ChorusScaleOffset__Group__4__Impl"
    // InternalSpinCAD.g:11746:1: rule__ChorusScaleOffset__Group__4__Impl : ( ( rule__ChorusScaleOffset__Arg2Assignment_4 ) ) ;
    public final void rule__ChorusScaleOffset__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11750:1: ( ( ( rule__ChorusScaleOffset__Arg2Assignment_4 ) ) )
            // InternalSpinCAD.g:11751:1: ( ( rule__ChorusScaleOffset__Arg2Assignment_4 ) )
            {
            // InternalSpinCAD.g:11751:1: ( ( rule__ChorusScaleOffset__Arg2Assignment_4 ) )
            // InternalSpinCAD.g:11752:1: ( rule__ChorusScaleOffset__Arg2Assignment_4 )
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg2Assignment_4()); 
            // InternalSpinCAD.g:11753:1: ( rule__ChorusScaleOffset__Arg2Assignment_4 )
            // InternalSpinCAD.g:11753:2: rule__ChorusScaleOffset__Arg2Assignment_4
            {
            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Arg2Assignment_4();

            state._fsp--;


            }

             after(grammarAccess.getChorusScaleOffsetAccess().getArg2Assignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__4__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__5"
    // InternalSpinCAD.g:11763:1: rule__ChorusScaleOffset__Group__5 : rule__ChorusScaleOffset__Group__5__Impl rule__ChorusScaleOffset__Group__6 ;
    public final void rule__ChorusScaleOffset__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11767:1: ( rule__ChorusScaleOffset__Group__5__Impl rule__ChorusScaleOffset__Group__6 )
            // InternalSpinCAD.g:11768:2: rule__ChorusScaleOffset__Group__5__Impl rule__ChorusScaleOffset__Group__6
            {
            pushFollow(FOLLOW_10);
            rule__ChorusScaleOffset__Group__5__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__6();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__5"


    // $ANTLR start "rule__ChorusScaleOffset__Group__5__Impl"
    // InternalSpinCAD.g:11775:1: rule__ChorusScaleOffset__Group__5__Impl : ( ',' ) ;
    public final void rule__ChorusScaleOffset__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11779:1: ( ( ',' ) )
            // InternalSpinCAD.g:11780:1: ( ',' )
            {
            // InternalSpinCAD.g:11780:1: ( ',' )
            // InternalSpinCAD.g:11781:1: ','
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_5()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_5()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__5__Impl"


    // $ANTLR start "rule__ChorusScaleOffset__Group__6"
    // InternalSpinCAD.g:11794:1: rule__ChorusScaleOffset__Group__6 : rule__ChorusScaleOffset__Group__6__Impl ;
    public final void rule__ChorusScaleOffset__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11798:1: ( rule__ChorusScaleOffset__Group__6__Impl )
            // InternalSpinCAD.g:11799:2: rule__ChorusScaleOffset__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Group__6__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__6"


    // $ANTLR start "rule__ChorusScaleOffset__Group__6__Impl"
    // InternalSpinCAD.g:11805:1: rule__ChorusScaleOffset__Group__6__Impl : ( ( rule__ChorusScaleOffset__Arg3Assignment_6 ) ) ;
    public final void rule__ChorusScaleOffset__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11809:1: ( ( ( rule__ChorusScaleOffset__Arg3Assignment_6 ) ) )
            // InternalSpinCAD.g:11810:1: ( ( rule__ChorusScaleOffset__Arg3Assignment_6 ) )
            {
            // InternalSpinCAD.g:11810:1: ( ( rule__ChorusScaleOffset__Arg3Assignment_6 ) )
            // InternalSpinCAD.g:11811:1: ( rule__ChorusScaleOffset__Arg3Assignment_6 )
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg3Assignment_6()); 
            // InternalSpinCAD.g:11812:1: ( rule__ChorusScaleOffset__Arg3Assignment_6 )
            // InternalSpinCAD.g:11812:2: rule__ChorusScaleOffset__Arg3Assignment_6
            {
            pushFollow(FOLLOW_2);
            rule__ChorusScaleOffset__Arg3Assignment_6();

            state._fsp--;


            }

             after(grammarAccess.getChorusScaleOffsetAccess().getArg3Assignment_6()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Group__6__Impl"


    // $ANTLR start "rule__ReadDelayPointer__Group__0"
    // InternalSpinCAD.g:11836:1: rule__ReadDelayPointer__Group__0 : rule__ReadDelayPointer__Group__0__Impl rule__ReadDelayPointer__Group__1 ;
    public final void rule__ReadDelayPointer__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11840:1: ( rule__ReadDelayPointer__Group__0__Impl rule__ReadDelayPointer__Group__1 )
            // InternalSpinCAD.g:11841:2: rule__ReadDelayPointer__Group__0__Impl rule__ReadDelayPointer__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ReadDelayPointer__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__ReadDelayPointer__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelayPointer__Group__0"


    // $ANTLR start "rule__ReadDelayPointer__Group__0__Impl"
    // InternalSpinCAD.g:11848:1: rule__ReadDelayPointer__Group__0__Impl : ( 'rmpa' ) ;
    public final void rule__ReadDelayPointer__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11852:1: ( ( 'rmpa' ) )
            // InternalSpinCAD.g:11853:1: ( 'rmpa' )
            {
            // InternalSpinCAD.g:11853:1: ( 'rmpa' )
            // InternalSpinCAD.g:11854:1: 'rmpa'
            {
             before(grammarAccess.getReadDelayPointerAccess().getRmpaKeyword_0()); 
            match(input,81,FOLLOW_2); 
             after(grammarAccess.getReadDelayPointerAccess().getRmpaKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelayPointer__Group__0__Impl"


    // $ANTLR start "rule__ReadDelayPointer__Group__1"
    // InternalSpinCAD.g:11867:1: rule__ReadDelayPointer__Group__1 : rule__ReadDelayPointer__Group__1__Impl ;
    public final void rule__ReadDelayPointer__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11871:1: ( rule__ReadDelayPointer__Group__1__Impl )
            // InternalSpinCAD.g:11872:2: rule__ReadDelayPointer__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelayPointer__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelayPointer__Group__1"


    // $ANTLR start "rule__ReadDelayPointer__Group__1__Impl"
    // InternalSpinCAD.g:11878:1: rule__ReadDelayPointer__Group__1__Impl : ( ( rule__ReadDelayPointer__Arg1Assignment_1 ) ) ;
    public final void rule__ReadDelayPointer__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11882:1: ( ( ( rule__ReadDelayPointer__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:11883:1: ( ( rule__ReadDelayPointer__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:11883:1: ( ( rule__ReadDelayPointer__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:11884:1: ( rule__ReadDelayPointer__Arg1Assignment_1 )
            {
             before(grammarAccess.getReadDelayPointerAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:11885:1: ( rule__ReadDelayPointer__Arg1Assignment_1 )
            // InternalSpinCAD.g:11885:2: rule__ReadDelayPointer__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReadDelayPointer__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getReadDelayPointerAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelayPointer__Group__1__Impl"


    // $ANTLR start "rule__And__Group__0"
    // InternalSpinCAD.g:11899:1: rule__And__Group__0 : rule__And__Group__0__Impl rule__And__Group__1 ;
    public final void rule__And__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11903:1: ( rule__And__Group__0__Impl rule__And__Group__1 )
            // InternalSpinCAD.g:11904:2: rule__And__Group__0__Impl rule__And__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__And__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__And__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__And__Group__0"


    // $ANTLR start "rule__And__Group__0__Impl"
    // InternalSpinCAD.g:11911:1: rule__And__Group__0__Impl : ( 'and' ) ;
    public final void rule__And__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11915:1: ( ( 'and' ) )
            // InternalSpinCAD.g:11916:1: ( 'and' )
            {
            // InternalSpinCAD.g:11916:1: ( 'and' )
            // InternalSpinCAD.g:11917:1: 'and'
            {
             before(grammarAccess.getAndAccess().getAndKeyword_0()); 
            match(input,82,FOLLOW_2); 
             after(grammarAccess.getAndAccess().getAndKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__And__Group__0__Impl"


    // $ANTLR start "rule__And__Group__1"
    // InternalSpinCAD.g:11930:1: rule__And__Group__1 : rule__And__Group__1__Impl ;
    public final void rule__And__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11934:1: ( rule__And__Group__1__Impl )
            // InternalSpinCAD.g:11935:2: rule__And__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__And__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__And__Group__1"


    // $ANTLR start "rule__And__Group__1__Impl"
    // InternalSpinCAD.g:11941:1: rule__And__Group__1__Impl : ( ( rule__And__Arg1Assignment_1 ) ) ;
    public final void rule__And__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11945:1: ( ( ( rule__And__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:11946:1: ( ( rule__And__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:11946:1: ( ( rule__And__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:11947:1: ( rule__And__Arg1Assignment_1 )
            {
             before(grammarAccess.getAndAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:11948:1: ( rule__And__Arg1Assignment_1 )
            // InternalSpinCAD.g:11948:2: rule__And__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__And__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getAndAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__And__Group__1__Impl"


    // $ANTLR start "rule__Or__Group__0"
    // InternalSpinCAD.g:11962:1: rule__Or__Group__0 : rule__Or__Group__0__Impl rule__Or__Group__1 ;
    public final void rule__Or__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11966:1: ( rule__Or__Group__0__Impl rule__Or__Group__1 )
            // InternalSpinCAD.g:11967:2: rule__Or__Group__0__Impl rule__Or__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__Or__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Or__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Or__Group__0"


    // $ANTLR start "rule__Or__Group__0__Impl"
    // InternalSpinCAD.g:11974:1: rule__Or__Group__0__Impl : ( 'or' ) ;
    public final void rule__Or__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11978:1: ( ( 'or' ) )
            // InternalSpinCAD.g:11979:1: ( 'or' )
            {
            // InternalSpinCAD.g:11979:1: ( 'or' )
            // InternalSpinCAD.g:11980:1: 'or'
            {
             before(grammarAccess.getOrAccess().getOrKeyword_0()); 
            match(input,83,FOLLOW_2); 
             after(grammarAccess.getOrAccess().getOrKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Or__Group__0__Impl"


    // $ANTLR start "rule__Or__Group__1"
    // InternalSpinCAD.g:11993:1: rule__Or__Group__1 : rule__Or__Group__1__Impl ;
    public final void rule__Or__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:11997:1: ( rule__Or__Group__1__Impl )
            // InternalSpinCAD.g:11998:2: rule__Or__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Or__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Or__Group__1"


    // $ANTLR start "rule__Or__Group__1__Impl"
    // InternalSpinCAD.g:12004:1: rule__Or__Group__1__Impl : ( ( rule__Or__Arg1Assignment_1 ) ) ;
    public final void rule__Or__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12008:1: ( ( ( rule__Or__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:12009:1: ( ( rule__Or__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:12009:1: ( ( rule__Or__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:12010:1: ( rule__Or__Arg1Assignment_1 )
            {
             before(grammarAccess.getOrAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:12011:1: ( rule__Or__Arg1Assignment_1 )
            // InternalSpinCAD.g:12011:2: rule__Or__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Or__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getOrAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Or__Group__1__Impl"


    // $ANTLR start "rule__Xor__Group__0"
    // InternalSpinCAD.g:12025:1: rule__Xor__Group__0 : rule__Xor__Group__0__Impl rule__Xor__Group__1 ;
    public final void rule__Xor__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12029:1: ( rule__Xor__Group__0__Impl rule__Xor__Group__1 )
            // InternalSpinCAD.g:12030:2: rule__Xor__Group__0__Impl rule__Xor__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__Xor__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Xor__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Xor__Group__0"


    // $ANTLR start "rule__Xor__Group__0__Impl"
    // InternalSpinCAD.g:12037:1: rule__Xor__Group__0__Impl : ( 'xor' ) ;
    public final void rule__Xor__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12041:1: ( ( 'xor' ) )
            // InternalSpinCAD.g:12042:1: ( 'xor' )
            {
            // InternalSpinCAD.g:12042:1: ( 'xor' )
            // InternalSpinCAD.g:12043:1: 'xor'
            {
             before(grammarAccess.getXorAccess().getXorKeyword_0()); 
            match(input,84,FOLLOW_2); 
             after(grammarAccess.getXorAccess().getXorKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Xor__Group__0__Impl"


    // $ANTLR start "rule__Xor__Group__1"
    // InternalSpinCAD.g:12056:1: rule__Xor__Group__1 : rule__Xor__Group__1__Impl ;
    public final void rule__Xor__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12060:1: ( rule__Xor__Group__1__Impl )
            // InternalSpinCAD.g:12061:2: rule__Xor__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Xor__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Xor__Group__1"


    // $ANTLR start "rule__Xor__Group__1__Impl"
    // InternalSpinCAD.g:12067:1: rule__Xor__Group__1__Impl : ( ( rule__Xor__Arg1Assignment_1 ) ) ;
    public final void rule__Xor__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12071:1: ( ( ( rule__Xor__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:12072:1: ( ( rule__Xor__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:12072:1: ( ( rule__Xor__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:12073:1: ( rule__Xor__Arg1Assignment_1 )
            {
             before(grammarAccess.getXorAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:12074:1: ( rule__Xor__Arg1Assignment_1 )
            // InternalSpinCAD.g:12074:2: rule__Xor__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Xor__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getXorAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Xor__Group__1__Impl"


    // $ANTLR start "rule__Jam__Group__0"
    // InternalSpinCAD.g:12088:1: rule__Jam__Group__0 : rule__Jam__Group__0__Impl rule__Jam__Group__1 ;
    public final void rule__Jam__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12092:1: ( rule__Jam__Group__0__Impl rule__Jam__Group__1 )
            // InternalSpinCAD.g:12093:2: rule__Jam__Group__0__Impl rule__Jam__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Jam__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Jam__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Jam__Group__0"


    // $ANTLR start "rule__Jam__Group__0__Impl"
    // InternalSpinCAD.g:12100:1: rule__Jam__Group__0__Impl : ( 'jam' ) ;
    public final void rule__Jam__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12104:1: ( ( 'jam' ) )
            // InternalSpinCAD.g:12105:1: ( 'jam' )
            {
            // InternalSpinCAD.g:12105:1: ( 'jam' )
            // InternalSpinCAD.g:12106:1: 'jam'
            {
             before(grammarAccess.getJamAccess().getJamKeyword_0()); 
            match(input,85,FOLLOW_2); 
             after(grammarAccess.getJamAccess().getJamKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Jam__Group__0__Impl"


    // $ANTLR start "rule__Jam__Group__1"
    // InternalSpinCAD.g:12119:1: rule__Jam__Group__1 : rule__Jam__Group__1__Impl ;
    public final void rule__Jam__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12123:1: ( rule__Jam__Group__1__Impl )
            // InternalSpinCAD.g:12124:2: rule__Jam__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Jam__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Jam__Group__1"


    // $ANTLR start "rule__Jam__Group__1__Impl"
    // InternalSpinCAD.g:12130:1: rule__Jam__Group__1__Impl : ( ( rule__Jam__Arg1Assignment_1 ) ) ;
    public final void rule__Jam__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12134:1: ( ( ( rule__Jam__Arg1Assignment_1 ) ) )
            // InternalSpinCAD.g:12135:1: ( ( rule__Jam__Arg1Assignment_1 ) )
            {
            // InternalSpinCAD.g:12135:1: ( ( rule__Jam__Arg1Assignment_1 ) )
            // InternalSpinCAD.g:12136:1: ( rule__Jam__Arg1Assignment_1 )
            {
             before(grammarAccess.getJamAccess().getArg1Assignment_1()); 
            // InternalSpinCAD.g:12137:1: ( rule__Jam__Arg1Assignment_1 )
            // InternalSpinCAD.g:12137:2: rule__Jam__Arg1Assignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Jam__Arg1Assignment_1();

            state._fsp--;


            }

             after(grammarAccess.getJamAccess().getArg1Assignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Jam__Group__1__Impl"


    // $ANTLR start "rule__Clr__Group__0"
    // InternalSpinCAD.g:12151:1: rule__Clr__Group__0 : rule__Clr__Group__0__Impl rule__Clr__Group__1 ;
    public final void rule__Clr__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12155:1: ( rule__Clr__Group__0__Impl rule__Clr__Group__1 )
            // InternalSpinCAD.g:12156:2: rule__Clr__Group__0__Impl rule__Clr__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__Clr__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Clr__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Clr__Group__0"


    // $ANTLR start "rule__Clr__Group__0__Impl"
    // InternalSpinCAD.g:12163:1: rule__Clr__Group__0__Impl : ( () ) ;
    public final void rule__Clr__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12167:1: ( ( () ) )
            // InternalSpinCAD.g:12168:1: ( () )
            {
            // InternalSpinCAD.g:12168:1: ( () )
            // InternalSpinCAD.g:12169:1: ()
            {
             before(grammarAccess.getClrAccess().getClrAction_0()); 
            // InternalSpinCAD.g:12170:1: ()
            // InternalSpinCAD.g:12172:1: 
            {
            }

             after(grammarAccess.getClrAccess().getClrAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Clr__Group__0__Impl"


    // $ANTLR start "rule__Clr__Group__1"
    // InternalSpinCAD.g:12182:1: rule__Clr__Group__1 : rule__Clr__Group__1__Impl ;
    public final void rule__Clr__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12186:1: ( rule__Clr__Group__1__Impl )
            // InternalSpinCAD.g:12187:2: rule__Clr__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Clr__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Clr__Group__1"


    // $ANTLR start "rule__Clr__Group__1__Impl"
    // InternalSpinCAD.g:12193:1: rule__Clr__Group__1__Impl : ( 'clr' ) ;
    public final void rule__Clr__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12197:1: ( ( 'clr' ) )
            // InternalSpinCAD.g:12198:1: ( 'clr' )
            {
            // InternalSpinCAD.g:12198:1: ( 'clr' )
            // InternalSpinCAD.g:12199:1: 'clr'
            {
             before(grammarAccess.getClrAccess().getClrKeyword_1()); 
            match(input,86,FOLLOW_2); 
             after(grammarAccess.getClrAccess().getClrKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Clr__Group__1__Impl"


    // $ANTLR start "rule__Not__Group__0"
    // InternalSpinCAD.g:12216:1: rule__Not__Group__0 : rule__Not__Group__0__Impl rule__Not__Group__1 ;
    public final void rule__Not__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12220:1: ( rule__Not__Group__0__Impl rule__Not__Group__1 )
            // InternalSpinCAD.g:12221:2: rule__Not__Group__0__Impl rule__Not__Group__1
            {
            pushFollow(FOLLOW_21);
            rule__Not__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Not__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Not__Group__0"


    // $ANTLR start "rule__Not__Group__0__Impl"
    // InternalSpinCAD.g:12228:1: rule__Not__Group__0__Impl : ( () ) ;
    public final void rule__Not__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12232:1: ( ( () ) )
            // InternalSpinCAD.g:12233:1: ( () )
            {
            // InternalSpinCAD.g:12233:1: ( () )
            // InternalSpinCAD.g:12234:1: ()
            {
             before(grammarAccess.getNotAccess().getNotAction_0()); 
            // InternalSpinCAD.g:12235:1: ()
            // InternalSpinCAD.g:12237:1: 
            {
            }

             after(grammarAccess.getNotAccess().getNotAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Not__Group__0__Impl"


    // $ANTLR start "rule__Not__Group__1"
    // InternalSpinCAD.g:12247:1: rule__Not__Group__1 : rule__Not__Group__1__Impl ;
    public final void rule__Not__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12251:1: ( rule__Not__Group__1__Impl )
            // InternalSpinCAD.g:12252:2: rule__Not__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Not__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Not__Group__1"


    // $ANTLR start "rule__Not__Group__1__Impl"
    // InternalSpinCAD.g:12258:1: rule__Not__Group__1__Impl : ( 'not' ) ;
    public final void rule__Not__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12262:1: ( ( 'not' ) )
            // InternalSpinCAD.g:12263:1: ( 'not' )
            {
            // InternalSpinCAD.g:12263:1: ( 'not' )
            // InternalSpinCAD.g:12264:1: 'not'
            {
             before(grammarAccess.getNotAccess().getNotKeyword_1()); 
            match(input,87,FOLLOW_2); 
             after(grammarAccess.getNotAccess().getNotKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Not__Group__1__Impl"


    // $ANTLR start "rule__Absa__Group__0"
    // InternalSpinCAD.g:12281:1: rule__Absa__Group__0 : rule__Absa__Group__0__Impl rule__Absa__Group__1 ;
    public final void rule__Absa__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12285:1: ( rule__Absa__Group__0__Impl rule__Absa__Group__1 )
            // InternalSpinCAD.g:12286:2: rule__Absa__Group__0__Impl rule__Absa__Group__1
            {
            pushFollow(FOLLOW_22);
            rule__Absa__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Absa__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Absa__Group__0"


    // $ANTLR start "rule__Absa__Group__0__Impl"
    // InternalSpinCAD.g:12293:1: rule__Absa__Group__0__Impl : ( () ) ;
    public final void rule__Absa__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12297:1: ( ( () ) )
            // InternalSpinCAD.g:12298:1: ( () )
            {
            // InternalSpinCAD.g:12298:1: ( () )
            // InternalSpinCAD.g:12299:1: ()
            {
             before(grammarAccess.getAbsaAccess().getAbsaAction_0()); 
            // InternalSpinCAD.g:12300:1: ()
            // InternalSpinCAD.g:12302:1: 
            {
            }

             after(grammarAccess.getAbsaAccess().getAbsaAction_0()); 

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Absa__Group__0__Impl"


    // $ANTLR start "rule__Absa__Group__1"
    // InternalSpinCAD.g:12312:1: rule__Absa__Group__1 : rule__Absa__Group__1__Impl ;
    public final void rule__Absa__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12316:1: ( rule__Absa__Group__1__Impl )
            // InternalSpinCAD.g:12317:2: rule__Absa__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Absa__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Absa__Group__1"


    // $ANTLR start "rule__Absa__Group__1__Impl"
    // InternalSpinCAD.g:12323:1: rule__Absa__Group__1__Impl : ( 'absa' ) ;
    public final void rule__Absa__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12327:1: ( ( 'absa' ) )
            // InternalSpinCAD.g:12328:1: ( 'absa' )
            {
            // InternalSpinCAD.g:12328:1: ( 'absa' )
            // InternalSpinCAD.g:12329:1: 'absa'
            {
             before(grammarAccess.getAbsaAccess().getAbsaKeyword_1()); 
            match(input,88,FOLLOW_2); 
             after(grammarAccess.getAbsaAccess().getAbsaKeyword_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Absa__Group__1__Impl"


    // $ANTLR start "rule__Skip__Group__0"
    // InternalSpinCAD.g:12346:1: rule__Skip__Group__0 : rule__Skip__Group__0__Impl rule__Skip__Group__1 ;
    public final void rule__Skip__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12350:1: ( rule__Skip__Group__0__Impl rule__Skip__Group__1 )
            // InternalSpinCAD.g:12351:2: rule__Skip__Group__0__Impl rule__Skip__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Skip__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Skip__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0"


    // $ANTLR start "rule__Skip__Group__0__Impl"
    // InternalSpinCAD.g:12358:1: rule__Skip__Group__0__Impl : ( 'skp' ) ;
    public final void rule__Skip__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12362:1: ( ( 'skp' ) )
            // InternalSpinCAD.g:12363:1: ( 'skp' )
            {
            // InternalSpinCAD.g:12363:1: ( 'skp' )
            // InternalSpinCAD.g:12364:1: 'skp'
            {
             before(grammarAccess.getSkipAccess().getSkpKeyword_0()); 
            match(input,89,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getSkpKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0__Impl"


    // $ANTLR start "rule__Skip__Group__1"
    // InternalSpinCAD.g:12377:1: rule__Skip__Group__1 : rule__Skip__Group__1__Impl rule__Skip__Group__2 ;
    public final void rule__Skip__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12381:1: ( rule__Skip__Group__1__Impl rule__Skip__Group__2 )
            // InternalSpinCAD.g:12382:2: rule__Skip__Group__1__Impl rule__Skip__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__Skip__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Skip__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1"


    // $ANTLR start "rule__Skip__Group__1__Impl"
    // InternalSpinCAD.g:12389:1: rule__Skip__Group__1__Impl : ( ( rule__Skip__FlagsAssignment_1 ) ) ;
    public final void rule__Skip__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12393:1: ( ( ( rule__Skip__FlagsAssignment_1 ) ) )
            // InternalSpinCAD.g:12394:1: ( ( rule__Skip__FlagsAssignment_1 ) )
            {
            // InternalSpinCAD.g:12394:1: ( ( rule__Skip__FlagsAssignment_1 ) )
            // InternalSpinCAD.g:12395:1: ( rule__Skip__FlagsAssignment_1 )
            {
             before(grammarAccess.getSkipAccess().getFlagsAssignment_1()); 
            // InternalSpinCAD.g:12396:1: ( rule__Skip__FlagsAssignment_1 )
            // InternalSpinCAD.g:12396:2: rule__Skip__FlagsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Skip__FlagsAssignment_1();

            state._fsp--;


            }

             after(grammarAccess.getSkipAccess().getFlagsAssignment_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1__Impl"


    // $ANTLR start "rule__Skip__Group__2"
    // InternalSpinCAD.g:12406:1: rule__Skip__Group__2 : rule__Skip__Group__2__Impl rule__Skip__Group__3 ;
    public final void rule__Skip__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12410:1: ( rule__Skip__Group__2__Impl rule__Skip__Group__3 )
            // InternalSpinCAD.g:12411:2: rule__Skip__Group__2__Impl rule__Skip__Group__3
            {
            pushFollow(FOLLOW_23);
            rule__Skip__Group__2__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Skip__Group__3();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__2"


    // $ANTLR start "rule__Skip__Group__2__Impl"
    // InternalSpinCAD.g:12418:1: rule__Skip__Group__2__Impl : ( ( rule__Skip__Group_2__0 )* ) ;
    public final void rule__Skip__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12422:1: ( ( ( rule__Skip__Group_2__0 )* ) )
            // InternalSpinCAD.g:12423:1: ( ( rule__Skip__Group_2__0 )* )
            {
            // InternalSpinCAD.g:12423:1: ( ( rule__Skip__Group_2__0 )* )
            // InternalSpinCAD.g:12424:1: ( rule__Skip__Group_2__0 )*
            {
             before(grammarAccess.getSkipAccess().getGroup_2()); 
            // InternalSpinCAD.g:12425:1: ( rule__Skip__Group_2__0 )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==90) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // InternalSpinCAD.g:12425:2: rule__Skip__Group_2__0
            	    {
            	    pushFollow(FOLLOW_24);
            	    rule__Skip__Group_2__0();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

             after(grammarAccess.getSkipAccess().getGroup_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__2__Impl"


    // $ANTLR start "rule__Skip__Group__3"
    // InternalSpinCAD.g:12435:1: rule__Skip__Group__3 : rule__Skip__Group__3__Impl rule__Skip__Group__4 ;
    public final void rule__Skip__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12439:1: ( rule__Skip__Group__3__Impl rule__Skip__Group__4 )
            // InternalSpinCAD.g:12440:2: rule__Skip__Group__3__Impl rule__Skip__Group__4
            {
            pushFollow(FOLLOW_9);
            rule__Skip__Group__3__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Skip__Group__4();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__3"


    // $ANTLR start "rule__Skip__Group__3__Impl"
    // InternalSpinCAD.g:12447:1: rule__Skip__Group__3__Impl : ( ',' ) ;
    public final void rule__Skip__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12451:1: ( ( ',' ) )
            // InternalSpinCAD.g:12452:1: ( ',' )
            {
            // InternalSpinCAD.g:12452:1: ( ',' )
            // InternalSpinCAD.g:12453:1: ','
            {
             before(grammarAccess.getSkipAccess().getCommaKeyword_3()); 
            match(input,62,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getCommaKeyword_3()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__3__Impl"


    // $ANTLR start "rule__Skip__Group__4"
    // InternalSpinCAD.g:12466:1: rule__Skip__Group__4 : rule__Skip__Group__4__Impl ;
    public final void rule__Skip__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12470:1: ( rule__Skip__Group__4__Impl )
            // InternalSpinCAD.g:12471:2: rule__Skip__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__4__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__4"


    // $ANTLR start "rule__Skip__Group__4__Impl"
    // InternalSpinCAD.g:12477:1: rule__Skip__Group__4__Impl : ( ( rule__Skip__LabelAssignment_4 ) ) ;
    public final void rule__Skip__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12481:1: ( ( ( rule__Skip__LabelAssignment_4 ) ) )
            // InternalSpinCAD.g:12482:1: ( ( rule__Skip__LabelAssignment_4 ) )
            {
            // InternalSpinCAD.g:12482:1: ( ( rule__Skip__LabelAssignment_4 ) )
            // InternalSpinCAD.g:12483:1: ( rule__Skip__LabelAssignment_4 )
            {
             before(grammarAccess.getSkipAccess().getLabelAssignment_4()); 
            // InternalSpinCAD.g:12484:1: ( rule__Skip__LabelAssignment_4 )
            // InternalSpinCAD.g:12484:2: rule__Skip__LabelAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Skip__LabelAssignment_4();

            state._fsp--;


            }

             after(grammarAccess.getSkipAccess().getLabelAssignment_4()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__4__Impl"


    // $ANTLR start "rule__Skip__Group_2__0"
    // InternalSpinCAD.g:12504:1: rule__Skip__Group_2__0 : rule__Skip__Group_2__0__Impl rule__Skip__Group_2__1 ;
    public final void rule__Skip__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12508:1: ( rule__Skip__Group_2__0__Impl rule__Skip__Group_2__1 )
            // InternalSpinCAD.g:12509:2: rule__Skip__Group_2__0__Impl rule__Skip__Group_2__1
            {
            pushFollow(FOLLOW_9);
            rule__Skip__Group_2__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__Skip__Group_2__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group_2__0"


    // $ANTLR start "rule__Skip__Group_2__0__Impl"
    // InternalSpinCAD.g:12516:1: rule__Skip__Group_2__0__Impl : ( '|' ) ;
    public final void rule__Skip__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12520:1: ( ( '|' ) )
            // InternalSpinCAD.g:12521:1: ( '|' )
            {
            // InternalSpinCAD.g:12521:1: ( '|' )
            // InternalSpinCAD.g:12522:1: '|'
            {
             before(grammarAccess.getSkipAccess().getVerticalLineKeyword_2_0()); 
            match(input,90,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getVerticalLineKeyword_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group_2__0__Impl"


    // $ANTLR start "rule__Skip__Group_2__1"
    // InternalSpinCAD.g:12535:1: rule__Skip__Group_2__1 : rule__Skip__Group_2__1__Impl ;
    public final void rule__Skip__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12539:1: ( rule__Skip__Group_2__1__Impl )
            // InternalSpinCAD.g:12540:2: rule__Skip__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group_2__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group_2__1"


    // $ANTLR start "rule__Skip__Group_2__1__Impl"
    // InternalSpinCAD.g:12546:1: rule__Skip__Group_2__1__Impl : ( RULE_ID ) ;
    public final void rule__Skip__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12550:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:12551:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:12551:1: ( RULE_ID )
            // InternalSpinCAD.g:12552:1: RULE_ID
            {
             before(grammarAccess.getSkipAccess().getIDTerminalRuleCall_2_1()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getIDTerminalRuleCall_2_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group_2__1__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group__0"
    // InternalSpinCAD.g:12567:1: rule__SPINDOUBLE__Group__0 : rule__SPINDOUBLE__Group__0__Impl rule__SPINDOUBLE__Group__1 ;
    public final void rule__SPINDOUBLE__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12571:1: ( rule__SPINDOUBLE__Group__0__Impl rule__SPINDOUBLE__Group__1 )
            // InternalSpinCAD.g:12572:2: rule__SPINDOUBLE__Group__0__Impl rule__SPINDOUBLE__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__SPINDOUBLE__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group__0"


    // $ANTLR start "rule__SPINDOUBLE__Group__0__Impl"
    // InternalSpinCAD.g:12579:1: rule__SPINDOUBLE__Group__0__Impl : ( ( '-' )? ) ;
    public final void rule__SPINDOUBLE__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12583:1: ( ( ( '-' )? ) )
            // InternalSpinCAD.g:12584:1: ( ( '-' )? )
            {
            // InternalSpinCAD.g:12584:1: ( ( '-' )? )
            // InternalSpinCAD.g:12585:1: ( '-' )?
            {
             before(grammarAccess.getSPINDOUBLEAccess().getHyphenMinusKeyword_0()); 
            // InternalSpinCAD.g:12586:1: ( '-' )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==16) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalSpinCAD.g:12587:2: '-'
                    {
                    match(input,16,FOLLOW_2); 

                    }
                    break;

            }

             after(grammarAccess.getSPINDOUBLEAccess().getHyphenMinusKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group__0__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group__1"
    // InternalSpinCAD.g:12598:1: rule__SPINDOUBLE__Group__1 : rule__SPINDOUBLE__Group__1__Impl ;
    public final void rule__SPINDOUBLE__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12602:1: ( rule__SPINDOUBLE__Group__1__Impl )
            // InternalSpinCAD.g:12603:2: rule__SPINDOUBLE__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group__1"


    // $ANTLR start "rule__SPINDOUBLE__Group__1__Impl"
    // InternalSpinCAD.g:12609:1: rule__SPINDOUBLE__Group__1__Impl : ( ( rule__SPINDOUBLE__Alternatives_1 ) ) ;
    public final void rule__SPINDOUBLE__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12613:1: ( ( ( rule__SPINDOUBLE__Alternatives_1 ) ) )
            // InternalSpinCAD.g:12614:1: ( ( rule__SPINDOUBLE__Alternatives_1 ) )
            {
            // InternalSpinCAD.g:12614:1: ( ( rule__SPINDOUBLE__Alternatives_1 ) )
            // InternalSpinCAD.g:12615:1: ( rule__SPINDOUBLE__Alternatives_1 )
            {
             before(grammarAccess.getSPINDOUBLEAccess().getAlternatives_1()); 
            // InternalSpinCAD.g:12616:1: ( rule__SPINDOUBLE__Alternatives_1 )
            // InternalSpinCAD.g:12616:2: rule__SPINDOUBLE__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Alternatives_1();

            state._fsp--;


            }

             after(grammarAccess.getSPINDOUBLEAccess().getAlternatives_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group__1__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1__0"
    // InternalSpinCAD.g:12630:1: rule__SPINDOUBLE__Group_1_1__0 : rule__SPINDOUBLE__Group_1_1__0__Impl rule__SPINDOUBLE__Group_1_1__1 ;
    public final void rule__SPINDOUBLE__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12634:1: ( rule__SPINDOUBLE__Group_1_1__0__Impl rule__SPINDOUBLE__Group_1_1__1 )
            // InternalSpinCAD.g:12635:2: rule__SPINDOUBLE__Group_1_1__0__Impl rule__SPINDOUBLE__Group_1_1__1
            {
            pushFollow(FOLLOW_25);
            rule__SPINDOUBLE__Group_1_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group_1_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1__0"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1__0__Impl"
    // InternalSpinCAD.g:12642:1: rule__SPINDOUBLE__Group_1_1__0__Impl : ( RULE_INT ) ;
    public final void rule__SPINDOUBLE__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12646:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:12647:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:12647:1: ( RULE_INT )
            // InternalSpinCAD.g:12648:1: RULE_INT
            {
             before(grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1__0__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1__1"
    // InternalSpinCAD.g:12659:1: rule__SPINDOUBLE__Group_1_1__1 : rule__SPINDOUBLE__Group_1_1__1__Impl ;
    public final void rule__SPINDOUBLE__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12663:1: ( rule__SPINDOUBLE__Group_1_1__1__Impl )
            // InternalSpinCAD.g:12664:2: rule__SPINDOUBLE__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group_1_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1__1"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1__1__Impl"
    // InternalSpinCAD.g:12670:1: rule__SPINDOUBLE__Group_1_1__1__Impl : ( ( rule__SPINDOUBLE__Group_1_1_1__0 )? ) ;
    public final void rule__SPINDOUBLE__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12674:1: ( ( ( rule__SPINDOUBLE__Group_1_1_1__0 )? ) )
            // InternalSpinCAD.g:12675:1: ( ( rule__SPINDOUBLE__Group_1_1_1__0 )? )
            {
            // InternalSpinCAD.g:12675:1: ( ( rule__SPINDOUBLE__Group_1_1_1__0 )? )
            // InternalSpinCAD.g:12676:1: ( rule__SPINDOUBLE__Group_1_1_1__0 )?
            {
             before(grammarAccess.getSPINDOUBLEAccess().getGroup_1_1_1()); 
            // InternalSpinCAD.g:12677:1: ( rule__SPINDOUBLE__Group_1_1_1__0 )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==91) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // InternalSpinCAD.g:12677:2: rule__SPINDOUBLE__Group_1_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINDOUBLE__Group_1_1_1__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSPINDOUBLEAccess().getGroup_1_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1__1__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1_1__0"
    // InternalSpinCAD.g:12691:1: rule__SPINDOUBLE__Group_1_1_1__0 : rule__SPINDOUBLE__Group_1_1_1__0__Impl rule__SPINDOUBLE__Group_1_1_1__1 ;
    public final void rule__SPINDOUBLE__Group_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12695:1: ( rule__SPINDOUBLE__Group_1_1_1__0__Impl rule__SPINDOUBLE__Group_1_1_1__1 )
            // InternalSpinCAD.g:12696:2: rule__SPINDOUBLE__Group_1_1_1__0__Impl rule__SPINDOUBLE__Group_1_1_1__1
            {
            pushFollow(FOLLOW_11);
            rule__SPINDOUBLE__Group_1_1_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group_1_1_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1_1__0"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1_1__0__Impl"
    // InternalSpinCAD.g:12703:1: rule__SPINDOUBLE__Group_1_1_1__0__Impl : ( '.' ) ;
    public final void rule__SPINDOUBLE__Group_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12707:1: ( ( '.' ) )
            // InternalSpinCAD.g:12708:1: ( '.' )
            {
            // InternalSpinCAD.g:12708:1: ( '.' )
            // InternalSpinCAD.g:12709:1: '.'
            {
             before(grammarAccess.getSPINDOUBLEAccess().getFullStopKeyword_1_1_1_0()); 
            match(input,91,FOLLOW_2); 
             after(grammarAccess.getSPINDOUBLEAccess().getFullStopKeyword_1_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1_1__0__Impl"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1_1__1"
    // InternalSpinCAD.g:12722:1: rule__SPINDOUBLE__Group_1_1_1__1 : rule__SPINDOUBLE__Group_1_1_1__1__Impl ;
    public final void rule__SPINDOUBLE__Group_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12726:1: ( rule__SPINDOUBLE__Group_1_1_1__1__Impl )
            // InternalSpinCAD.g:12727:2: rule__SPINDOUBLE__Group_1_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINDOUBLE__Group_1_1_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1_1__1"


    // $ANTLR start "rule__SPINDOUBLE__Group_1_1_1__1__Impl"
    // InternalSpinCAD.g:12733:1: rule__SPINDOUBLE__Group_1_1_1__1__Impl : ( RULE_INT ) ;
    public final void rule__SPINDOUBLE__Group_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12737:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:12738:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:12738:1: ( RULE_INT )
            // InternalSpinCAD.g:12739:1: RULE_INT
            {
             before(grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_1_1()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINDOUBLE__Group_1_1_1__1__Impl"


    // $ANTLR start "rule__SPINREGISTER__Group__0"
    // InternalSpinCAD.g:12754:1: rule__SPINREGISTER__Group__0 : rule__SPINREGISTER__Group__0__Impl rule__SPINREGISTER__Group__1 ;
    public final void rule__SPINREGISTER__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12758:1: ( rule__SPINREGISTER__Group__0__Impl rule__SPINREGISTER__Group__1 )
            // InternalSpinCAD.g:12759:2: rule__SPINREGISTER__Group__0__Impl rule__SPINREGISTER__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__SPINREGISTER__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINREGISTER__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINREGISTER__Group__0"


    // $ANTLR start "rule__SPINREGISTER__Group__0__Impl"
    // InternalSpinCAD.g:12766:1: rule__SPINREGISTER__Group__0__Impl : ( ( '-' )? ) ;
    public final void rule__SPINREGISTER__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12770:1: ( ( ( '-' )? ) )
            // InternalSpinCAD.g:12771:1: ( ( '-' )? )
            {
            // InternalSpinCAD.g:12771:1: ( ( '-' )? )
            // InternalSpinCAD.g:12772:1: ( '-' )?
            {
             before(grammarAccess.getSPINREGISTERAccess().getHyphenMinusKeyword_0()); 
            // InternalSpinCAD.g:12773:1: ( '-' )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==16) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // InternalSpinCAD.g:12774:2: '-'
                    {
                    match(input,16,FOLLOW_2); 

                    }
                    break;

            }

             after(grammarAccess.getSPINREGISTERAccess().getHyphenMinusKeyword_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINREGISTER__Group__0__Impl"


    // $ANTLR start "rule__SPINREGISTER__Group__1"
    // InternalSpinCAD.g:12785:1: rule__SPINREGISTER__Group__1 : rule__SPINREGISTER__Group__1__Impl ;
    public final void rule__SPINREGISTER__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12789:1: ( rule__SPINREGISTER__Group__1__Impl )
            // InternalSpinCAD.g:12790:2: rule__SPINREGISTER__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINREGISTER__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINREGISTER__Group__1"


    // $ANTLR start "rule__SPINREGISTER__Group__1__Impl"
    // InternalSpinCAD.g:12796:1: rule__SPINREGISTER__Group__1__Impl : ( ( rule__SPINREGISTER__Alternatives_1 ) ) ;
    public final void rule__SPINREGISTER__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12800:1: ( ( ( rule__SPINREGISTER__Alternatives_1 ) ) )
            // InternalSpinCAD.g:12801:1: ( ( rule__SPINREGISTER__Alternatives_1 ) )
            {
            // InternalSpinCAD.g:12801:1: ( ( rule__SPINREGISTER__Alternatives_1 ) )
            // InternalSpinCAD.g:12802:1: ( rule__SPINREGISTER__Alternatives_1 )
            {
             before(grammarAccess.getSPINREGISTERAccess().getAlternatives_1()); 
            // InternalSpinCAD.g:12803:1: ( rule__SPINREGISTER__Alternatives_1 )
            // InternalSpinCAD.g:12803:2: rule__SPINREGISTER__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__SPINREGISTER__Alternatives_1();

            state._fsp--;


            }

             after(grammarAccess.getSPINREGISTERAccess().getAlternatives_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINREGISTER__Group__1__Impl"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1__0"
    // InternalSpinCAD.g:12817:1: rule__SPINCHOREGFLAGS__Group_1__0 : rule__SPINCHOREGFLAGS__Group_1__0__Impl rule__SPINCHOREGFLAGS__Group_1__1 ;
    public final void rule__SPINCHOREGFLAGS__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12821:1: ( rule__SPINCHOREGFLAGS__Group_1__0__Impl rule__SPINCHOREGFLAGS__Group_1__1 )
            // InternalSpinCAD.g:12822:2: rule__SPINCHOREGFLAGS__Group_1__0__Impl rule__SPINCHOREGFLAGS__Group_1__1
            {
            pushFollow(FOLLOW_26);
            rule__SPINCHOREGFLAGS__Group_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINCHOREGFLAGS__Group_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1__0"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1__0__Impl"
    // InternalSpinCAD.g:12829:1: rule__SPINCHOREGFLAGS__Group_1__0__Impl : ( RULE_ID ) ;
    public final void rule__SPINCHOREGFLAGS__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12833:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:12834:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:12834:1: ( RULE_ID )
            // InternalSpinCAD.g:12835:1: RULE_ID
            {
             before(grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1__0__Impl"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1__1"
    // InternalSpinCAD.g:12846:1: rule__SPINCHOREGFLAGS__Group_1__1 : rule__SPINCHOREGFLAGS__Group_1__1__Impl ;
    public final void rule__SPINCHOREGFLAGS__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12850:1: ( rule__SPINCHOREGFLAGS__Group_1__1__Impl )
            // InternalSpinCAD.g:12851:2: rule__SPINCHOREGFLAGS__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINCHOREGFLAGS__Group_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1__1"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1__1__Impl"
    // InternalSpinCAD.g:12857:1: rule__SPINCHOREGFLAGS__Group_1__1__Impl : ( ( rule__SPINCHOREGFLAGS__Group_1_1__0 )* ) ;
    public final void rule__SPINCHOREGFLAGS__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12861:1: ( ( ( rule__SPINCHOREGFLAGS__Group_1_1__0 )* ) )
            // InternalSpinCAD.g:12862:1: ( ( rule__SPINCHOREGFLAGS__Group_1_1__0 )* )
            {
            // InternalSpinCAD.g:12862:1: ( ( rule__SPINCHOREGFLAGS__Group_1_1__0 )* )
            // InternalSpinCAD.g:12863:1: ( rule__SPINCHOREGFLAGS__Group_1_1__0 )*
            {
             before(grammarAccess.getSPINCHOREGFLAGSAccess().getGroup_1_1()); 
            // InternalSpinCAD.g:12864:1: ( rule__SPINCHOREGFLAGS__Group_1_1__0 )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==90) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // InternalSpinCAD.g:12864:2: rule__SPINCHOREGFLAGS__Group_1_1__0
            	    {
            	    pushFollow(FOLLOW_24);
            	    rule__SPINCHOREGFLAGS__Group_1_1__0();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

             after(grammarAccess.getSPINCHOREGFLAGSAccess().getGroup_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1__1__Impl"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1_1__0"
    // InternalSpinCAD.g:12878:1: rule__SPINCHOREGFLAGS__Group_1_1__0 : rule__SPINCHOREGFLAGS__Group_1_1__0__Impl rule__SPINCHOREGFLAGS__Group_1_1__1 ;
    public final void rule__SPINCHOREGFLAGS__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12882:1: ( rule__SPINCHOREGFLAGS__Group_1_1__0__Impl rule__SPINCHOREGFLAGS__Group_1_1__1 )
            // InternalSpinCAD.g:12883:2: rule__SPINCHOREGFLAGS__Group_1_1__0__Impl rule__SPINCHOREGFLAGS__Group_1_1__1
            {
            pushFollow(FOLLOW_9);
            rule__SPINCHOREGFLAGS__Group_1_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINCHOREGFLAGS__Group_1_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1_1__0"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1_1__0__Impl"
    // InternalSpinCAD.g:12890:1: rule__SPINCHOREGFLAGS__Group_1_1__0__Impl : ( '|' ) ;
    public final void rule__SPINCHOREGFLAGS__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12894:1: ( ( '|' ) )
            // InternalSpinCAD.g:12895:1: ( '|' )
            {
            // InternalSpinCAD.g:12895:1: ( '|' )
            // InternalSpinCAD.g:12896:1: '|'
            {
             before(grammarAccess.getSPINCHOREGFLAGSAccess().getVerticalLineKeyword_1_1_0()); 
            match(input,90,FOLLOW_2); 
             after(grammarAccess.getSPINCHOREGFLAGSAccess().getVerticalLineKeyword_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1_1__0__Impl"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1_1__1"
    // InternalSpinCAD.g:12909:1: rule__SPINCHOREGFLAGS__Group_1_1__1 : rule__SPINCHOREGFLAGS__Group_1_1__1__Impl ;
    public final void rule__SPINCHOREGFLAGS__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12913:1: ( rule__SPINCHOREGFLAGS__Group_1_1__1__Impl )
            // InternalSpinCAD.g:12914:2: rule__SPINCHOREGFLAGS__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINCHOREGFLAGS__Group_1_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1_1__1"


    // $ANTLR start "rule__SPINCHOREGFLAGS__Group_1_1__1__Impl"
    // InternalSpinCAD.g:12920:1: rule__SPINCHOREGFLAGS__Group_1_1__1__Impl : ( RULE_ID ) ;
    public final void rule__SPINCHOREGFLAGS__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12924:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:12925:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:12925:1: ( RULE_ID )
            // InternalSpinCAD.g:12926:1: RULE_ID
            {
             before(grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_1_1()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINCHOREGFLAGS__Group_1_1__1__Impl"


    // $ANTLR start "rule__SPINMEM__Group__0"
    // InternalSpinCAD.g:12941:1: rule__SPINMEM__Group__0 : rule__SPINMEM__Group__0__Impl rule__SPINMEM__Group__1 ;
    public final void rule__SPINMEM__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12945:1: ( rule__SPINMEM__Group__0__Impl rule__SPINMEM__Group__1 )
            // InternalSpinCAD.g:12946:2: rule__SPINMEM__Group__0__Impl rule__SPINMEM__Group__1
            {
            pushFollow(FOLLOW_18);
            rule__SPINMEM__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group__0"


    // $ANTLR start "rule__SPINMEM__Group__0__Impl"
    // InternalSpinCAD.g:12953:1: rule__SPINMEM__Group__0__Impl : ( ( rule__SPINMEM__BufferAssignment_0 ) ) ;
    public final void rule__SPINMEM__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12957:1: ( ( ( rule__SPINMEM__BufferAssignment_0 ) ) )
            // InternalSpinCAD.g:12958:1: ( ( rule__SPINMEM__BufferAssignment_0 ) )
            {
            // InternalSpinCAD.g:12958:1: ( ( rule__SPINMEM__BufferAssignment_0 ) )
            // InternalSpinCAD.g:12959:1: ( rule__SPINMEM__BufferAssignment_0 )
            {
             before(grammarAccess.getSPINMEMAccess().getBufferAssignment_0()); 
            // InternalSpinCAD.g:12960:1: ( rule__SPINMEM__BufferAssignment_0 )
            // InternalSpinCAD.g:12960:2: rule__SPINMEM__BufferAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__BufferAssignment_0();

            state._fsp--;


            }

             after(grammarAccess.getSPINMEMAccess().getBufferAssignment_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group__0__Impl"


    // $ANTLR start "rule__SPINMEM__Group__1"
    // InternalSpinCAD.g:12970:1: rule__SPINMEM__Group__1 : rule__SPINMEM__Group__1__Impl ;
    public final void rule__SPINMEM__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12974:1: ( rule__SPINMEM__Group__1__Impl )
            // InternalSpinCAD.g:12975:2: rule__SPINMEM__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group__1"


    // $ANTLR start "rule__SPINMEM__Group__1__Impl"
    // InternalSpinCAD.g:12981:1: rule__SPINMEM__Group__1__Impl : ( ( rule__SPINMEM__Alternatives_1 )? ) ;
    public final void rule__SPINMEM__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:12985:1: ( ( ( rule__SPINMEM__Alternatives_1 )? ) )
            // InternalSpinCAD.g:12986:1: ( ( rule__SPINMEM__Alternatives_1 )? )
            {
            // InternalSpinCAD.g:12986:1: ( ( rule__SPINMEM__Alternatives_1 )? )
            // InternalSpinCAD.g:12987:1: ( rule__SPINMEM__Alternatives_1 )?
            {
             before(grammarAccess.getSPINMEMAccess().getAlternatives_1()); 
            // InternalSpinCAD.g:12988:1: ( rule__SPINMEM__Alternatives_1 )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==RULE_INT) ) {
                alt60=1;
            }
            else if ( (LA60_0==RULE_ID) ) {
                int LA60_2 = input.LA(2);

                if ( (LA60_2==EOF||LA60_2==RULE_ID||LA60_2==RULE_SC_COMMENT||(LA60_2>=25 && LA60_2<=37)||(LA60_2>=39 && LA60_2<=89)) ) {
                    alt60=1;
                }
            }
            switch (alt60) {
                case 1 :
                    // InternalSpinCAD.g:12988:2: rule__SPINMEM__Alternatives_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINMEM__Alternatives_1();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSPINMEMAccess().getAlternatives_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group__1__Impl"


    // $ANTLR start "rule__SPINMEM__Group_1_0__0"
    // InternalSpinCAD.g:13002:1: rule__SPINMEM__Group_1_0__0 : rule__SPINMEM__Group_1_0__0__Impl rule__SPINMEM__Group_1_0__1 ;
    public final void rule__SPINMEM__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13006:1: ( rule__SPINMEM__Group_1_0__0__Impl rule__SPINMEM__Group_1_0__1 )
            // InternalSpinCAD.g:13007:2: rule__SPINMEM__Group_1_0__0__Impl rule__SPINMEM__Group_1_0__1
            {
            pushFollow(FOLLOW_27);
            rule__SPINMEM__Group_1_0__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group_1_0__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0__0"


    // $ANTLR start "rule__SPINMEM__Group_1_0__0__Impl"
    // InternalSpinCAD.g:13014:1: rule__SPINMEM__Group_1_0__0__Impl : ( ( rule__SPINMEM__ValueAssignment_1_0_0 ) ) ;
    public final void rule__SPINMEM__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13018:1: ( ( ( rule__SPINMEM__ValueAssignment_1_0_0 ) ) )
            // InternalSpinCAD.g:13019:1: ( ( rule__SPINMEM__ValueAssignment_1_0_0 ) )
            {
            // InternalSpinCAD.g:13019:1: ( ( rule__SPINMEM__ValueAssignment_1_0_0 ) )
            // InternalSpinCAD.g:13020:1: ( rule__SPINMEM__ValueAssignment_1_0_0 )
            {
             before(grammarAccess.getSPINMEMAccess().getValueAssignment_1_0_0()); 
            // InternalSpinCAD.g:13021:1: ( rule__SPINMEM__ValueAssignment_1_0_0 )
            // InternalSpinCAD.g:13021:2: rule__SPINMEM__ValueAssignment_1_0_0
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__ValueAssignment_1_0_0();

            state._fsp--;


            }

             after(grammarAccess.getSPINMEMAccess().getValueAssignment_1_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0__0__Impl"


    // $ANTLR start "rule__SPINMEM__Group_1_0__1"
    // InternalSpinCAD.g:13031:1: rule__SPINMEM__Group_1_0__1 : rule__SPINMEM__Group_1_0__1__Impl ;
    public final void rule__SPINMEM__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13035:1: ( rule__SPINMEM__Group_1_0__1__Impl )
            // InternalSpinCAD.g:13036:2: rule__SPINMEM__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group_1_0__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0__1"


    // $ANTLR start "rule__SPINMEM__Group_1_0__1__Impl"
    // InternalSpinCAD.g:13042:1: rule__SPINMEM__Group_1_0__1__Impl : ( ( rule__SPINMEM__Group_1_0_1__0 )? ) ;
    public final void rule__SPINMEM__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13046:1: ( ( ( rule__SPINMEM__Group_1_0_1__0 )? ) )
            // InternalSpinCAD.g:13047:1: ( ( rule__SPINMEM__Group_1_0_1__0 )? )
            {
            // InternalSpinCAD.g:13047:1: ( ( rule__SPINMEM__Group_1_0_1__0 )? )
            // InternalSpinCAD.g:13048:1: ( rule__SPINMEM__Group_1_0_1__0 )?
            {
             before(grammarAccess.getSPINMEMAccess().getGroup_1_0_1()); 
            // InternalSpinCAD.g:13049:1: ( rule__SPINMEM__Group_1_0_1__0 )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==92) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // InternalSpinCAD.g:13049:2: rule__SPINMEM__Group_1_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINMEM__Group_1_0_1__0();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSPINMEMAccess().getGroup_1_0_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0__1__Impl"


    // $ANTLR start "rule__SPINMEM__Group_1_0_1__0"
    // InternalSpinCAD.g:13063:1: rule__SPINMEM__Group_1_0_1__0 : rule__SPINMEM__Group_1_0_1__0__Impl rule__SPINMEM__Group_1_0_1__1 ;
    public final void rule__SPINMEM__Group_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13067:1: ( rule__SPINMEM__Group_1_0_1__0__Impl rule__SPINMEM__Group_1_0_1__1 )
            // InternalSpinCAD.g:13068:2: rule__SPINMEM__Group_1_0_1__0__Impl rule__SPINMEM__Group_1_0_1__1
            {
            pushFollow(FOLLOW_9);
            rule__SPINMEM__Group_1_0_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group_1_0_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0_1__0"


    // $ANTLR start "rule__SPINMEM__Group_1_0_1__0__Impl"
    // InternalSpinCAD.g:13075:1: rule__SPINMEM__Group_1_0_1__0__Impl : ( '*' ) ;
    public final void rule__SPINMEM__Group_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13079:1: ( ( '*' ) )
            // InternalSpinCAD.g:13080:1: ( '*' )
            {
            // InternalSpinCAD.g:13080:1: ( '*' )
            // InternalSpinCAD.g:13081:1: '*'
            {
             before(grammarAccess.getSPINMEMAccess().getAsteriskKeyword_1_0_1_0()); 
            match(input,92,FOLLOW_2); 
             after(grammarAccess.getSPINMEMAccess().getAsteriskKeyword_1_0_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0_1__0__Impl"


    // $ANTLR start "rule__SPINMEM__Group_1_0_1__1"
    // InternalSpinCAD.g:13094:1: rule__SPINMEM__Group_1_0_1__1 : rule__SPINMEM__Group_1_0_1__1__Impl ;
    public final void rule__SPINMEM__Group_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13098:1: ( rule__SPINMEM__Group_1_0_1__1__Impl )
            // InternalSpinCAD.g:13099:2: rule__SPINMEM__Group_1_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__Group_1_0_1__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0_1__1"


    // $ANTLR start "rule__SPINMEM__Group_1_0_1__1__Impl"
    // InternalSpinCAD.g:13105:1: rule__SPINMEM__Group_1_0_1__1__Impl : ( ( rule__SPINMEM__ScaleAssignment_1_0_1_1 ) ) ;
    public final void rule__SPINMEM__Group_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13109:1: ( ( ( rule__SPINMEM__ScaleAssignment_1_0_1_1 ) ) )
            // InternalSpinCAD.g:13110:1: ( ( rule__SPINMEM__ScaleAssignment_1_0_1_1 ) )
            {
            // InternalSpinCAD.g:13110:1: ( ( rule__SPINMEM__ScaleAssignment_1_0_1_1 ) )
            // InternalSpinCAD.g:13111:1: ( rule__SPINMEM__ScaleAssignment_1_0_1_1 )
            {
             before(grammarAccess.getSPINMEMAccess().getScaleAssignment_1_0_1_1()); 
            // InternalSpinCAD.g:13112:1: ( rule__SPINMEM__ScaleAssignment_1_0_1_1 )
            // InternalSpinCAD.g:13112:2: rule__SPINMEM__ScaleAssignment_1_0_1_1
            {
            pushFollow(FOLLOW_2);
            rule__SPINMEM__ScaleAssignment_1_0_1_1();

            state._fsp--;


            }

             after(grammarAccess.getSPINMEMAccess().getScaleAssignment_1_0_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__Group_1_0_1__1__Impl"


    // $ANTLR start "rule__SPINBUF__Group__0"
    // InternalSpinCAD.g:13126:1: rule__SPINBUF__Group__0 : rule__SPINBUF__Group__0__Impl rule__SPINBUF__Group__1 ;
    public final void rule__SPINBUF__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13130:1: ( rule__SPINBUF__Group__0__Impl rule__SPINBUF__Group__1 )
            // InternalSpinCAD.g:13131:2: rule__SPINBUF__Group__0__Impl rule__SPINBUF__Group__1
            {
            pushFollow(FOLLOW_28);
            rule__SPINBUF__Group__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINBUF__Group__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__0"


    // $ANTLR start "rule__SPINBUF__Group__0__Impl"
    // InternalSpinCAD.g:13138:1: rule__SPINBUF__Group__0__Impl : ( RULE_ID ) ;
    public final void rule__SPINBUF__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13142:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13143:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13143:1: ( RULE_ID )
            // InternalSpinCAD.g:13144:1: RULE_ID
            {
             before(grammarAccess.getSPINBUFAccess().getIDTerminalRuleCall_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSPINBUFAccess().getIDTerminalRuleCall_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__0__Impl"


    // $ANTLR start "rule__SPINBUF__Group__1"
    // InternalSpinCAD.g:13155:1: rule__SPINBUF__Group__1 : rule__SPINBUF__Group__1__Impl rule__SPINBUF__Group__2 ;
    public final void rule__SPINBUF__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13159:1: ( rule__SPINBUF__Group__1__Impl rule__SPINBUF__Group__2 )
            // InternalSpinCAD.g:13160:2: rule__SPINBUF__Group__1__Impl rule__SPINBUF__Group__2
            {
            pushFollow(FOLLOW_28);
            rule__SPINBUF__Group__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__SPINBUF__Group__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__1"


    // $ANTLR start "rule__SPINBUF__Group__1__Impl"
    // InternalSpinCAD.g:13167:1: rule__SPINBUF__Group__1__Impl : ( ( rule__SPINBUF__Alternatives_1 )? ) ;
    public final void rule__SPINBUF__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13171:1: ( ( ( rule__SPINBUF__Alternatives_1 )? ) )
            // InternalSpinCAD.g:13172:1: ( ( rule__SPINBUF__Alternatives_1 )? )
            {
            // InternalSpinCAD.g:13172:1: ( ( rule__SPINBUF__Alternatives_1 )? )
            // InternalSpinCAD.g:13173:1: ( rule__SPINBUF__Alternatives_1 )?
            {
             before(grammarAccess.getSPINBUFAccess().getAlternatives_1()); 
            // InternalSpinCAD.g:13174:1: ( rule__SPINBUF__Alternatives_1 )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=13 && LA62_0<=14)) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalSpinCAD.g:13174:2: rule__SPINBUF__Alternatives_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINBUF__Alternatives_1();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSPINBUFAccess().getAlternatives_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__1__Impl"


    // $ANTLR start "rule__SPINBUF__Group__2"
    // InternalSpinCAD.g:13184:1: rule__SPINBUF__Group__2 : rule__SPINBUF__Group__2__Impl ;
    public final void rule__SPINBUF__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13188:1: ( rule__SPINBUF__Group__2__Impl )
            // InternalSpinCAD.g:13189:2: rule__SPINBUF__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SPINBUF__Group__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__2"


    // $ANTLR start "rule__SPINBUF__Group__2__Impl"
    // InternalSpinCAD.g:13195:1: rule__SPINBUF__Group__2__Impl : ( ( rule__SPINBUF__Alternatives_2 )? ) ;
    public final void rule__SPINBUF__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13199:1: ( ( ( rule__SPINBUF__Alternatives_2 )? ) )
            // InternalSpinCAD.g:13200:1: ( ( rule__SPINBUF__Alternatives_2 )? )
            {
            // InternalSpinCAD.g:13200:1: ( ( rule__SPINBUF__Alternatives_2 )? )
            // InternalSpinCAD.g:13201:1: ( rule__SPINBUF__Alternatives_2 )?
            {
             before(grammarAccess.getSPINBUFAccess().getAlternatives_2()); 
            // InternalSpinCAD.g:13202:1: ( rule__SPINBUF__Alternatives_2 )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=15 && LA63_0<=16)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalSpinCAD.g:13202:2: rule__SPINBUF__Alternatives_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__SPINBUF__Alternatives_2();

                    state._fsp--;


                    }
                    break;

            }

             after(grammarAccess.getSPINBUFAccess().getAlternatives_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINBUF__Group__2__Impl"


    // $ANTLR start "rule__BINARY24__Group_0__0"
    // InternalSpinCAD.g:13218:1: rule__BINARY24__Group_0__0 : rule__BINARY24__Group_0__0__Impl rule__BINARY24__Group_0__1 ;
    public final void rule__BINARY24__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13222:1: ( rule__BINARY24__Group_0__0__Impl rule__BINARY24__Group_0__1 )
            // InternalSpinCAD.g:13223:2: rule__BINARY24__Group_0__0__Impl rule__BINARY24__Group_0__1
            {
            pushFollow(FOLLOW_9);
            rule__BINARY24__Group_0__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_0__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0__0"


    // $ANTLR start "rule__BINARY24__Group_0__0__Impl"
    // InternalSpinCAD.g:13230:1: rule__BINARY24__Group_0__0__Impl : ( ( rule__BINARY24__Group_0_0__0 ) ) ;
    public final void rule__BINARY24__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13234:1: ( ( ( rule__BINARY24__Group_0_0__0 ) ) )
            // InternalSpinCAD.g:13235:1: ( ( rule__BINARY24__Group_0_0__0 ) )
            {
            // InternalSpinCAD.g:13235:1: ( ( rule__BINARY24__Group_0_0__0 ) )
            // InternalSpinCAD.g:13236:1: ( rule__BINARY24__Group_0_0__0 )
            {
             before(grammarAccess.getBINARY24Access().getGroup_0_0()); 
            // InternalSpinCAD.g:13237:1: ( rule__BINARY24__Group_0_0__0 )
            // InternalSpinCAD.g:13237:2: rule__BINARY24__Group_0_0__0
            {
            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_0_0__0();

            state._fsp--;


            }

             after(grammarAccess.getBINARY24Access().getGroup_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0__0__Impl"


    // $ANTLR start "rule__BINARY24__Group_0__1"
    // InternalSpinCAD.g:13247:1: rule__BINARY24__Group_0__1 : rule__BINARY24__Group_0__1__Impl ;
    public final void rule__BINARY24__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13251:1: ( rule__BINARY24__Group_0__1__Impl )
            // InternalSpinCAD.g:13252:2: rule__BINARY24__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_0__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0__1"


    // $ANTLR start "rule__BINARY24__Group_0__1__Impl"
    // InternalSpinCAD.g:13258:1: rule__BINARY24__Group_0__1__Impl : ( ( RULE_ID )* ) ;
    public final void rule__BINARY24__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13262:1: ( ( ( RULE_ID )* ) )
            // InternalSpinCAD.g:13263:1: ( ( RULE_ID )* )
            {
            // InternalSpinCAD.g:13263:1: ( ( RULE_ID )* )
            // InternalSpinCAD.g:13264:1: ( RULE_ID )*
            {
             before(grammarAccess.getBINARY24Access().getIDTerminalRuleCall_0_1()); 
            // InternalSpinCAD.g:13265:1: ( RULE_ID )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==RULE_ID) ) {
                    int LA64_2 = input.LA(2);

                    if ( (LA64_2==EOF||LA64_2==RULE_ID||LA64_2==RULE_SC_COMMENT||(LA64_2>=25 && LA64_2<=37)||(LA64_2>=39 && LA64_2<=61)||(LA64_2>=63 && LA64_2<=89)) ) {
                        alt64=1;
                    }


                }


                switch (alt64) {
            	case 1 :
            	    // InternalSpinCAD.g:13265:3: RULE_ID
            	    {
            	    match(input,RULE_ID,FOLLOW_29); 

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

             after(grammarAccess.getBINARY24Access().getIDTerminalRuleCall_0_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0__1__Impl"


    // $ANTLR start "rule__BINARY24__Group_0_0__0"
    // InternalSpinCAD.g:13279:1: rule__BINARY24__Group_0_0__0 : rule__BINARY24__Group_0_0__0__Impl rule__BINARY24__Group_0_0__1 ;
    public final void rule__BINARY24__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13283:1: ( rule__BINARY24__Group_0_0__0__Impl rule__BINARY24__Group_0_0__1 )
            // InternalSpinCAD.g:13284:2: rule__BINARY24__Group_0_0__0__Impl rule__BINARY24__Group_0_0__1
            {
            pushFollow(FOLLOW_11);
            rule__BINARY24__Group_0_0__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_0_0__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0_0__0"


    // $ANTLR start "rule__BINARY24__Group_0_0__0__Impl"
    // InternalSpinCAD.g:13291:1: rule__BINARY24__Group_0_0__0__Impl : ( '%' ) ;
    public final void rule__BINARY24__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13295:1: ( ( '%' ) )
            // InternalSpinCAD.g:13296:1: ( '%' )
            {
            // InternalSpinCAD.g:13296:1: ( '%' )
            // InternalSpinCAD.g:13297:1: '%'
            {
             before(grammarAccess.getBINARY24Access().getPercentSignKeyword_0_0_0()); 
            match(input,93,FOLLOW_2); 
             after(grammarAccess.getBINARY24Access().getPercentSignKeyword_0_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0_0__0__Impl"


    // $ANTLR start "rule__BINARY24__Group_0_0__1"
    // InternalSpinCAD.g:13310:1: rule__BINARY24__Group_0_0__1 : rule__BINARY24__Group_0_0__1__Impl ;
    public final void rule__BINARY24__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13314:1: ( rule__BINARY24__Group_0_0__1__Impl )
            // InternalSpinCAD.g:13315:2: rule__BINARY24__Group_0_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_0_0__1__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0_0__1"


    // $ANTLR start "rule__BINARY24__Group_0_0__1__Impl"
    // InternalSpinCAD.g:13321:1: rule__BINARY24__Group_0_0__1__Impl : ( RULE_INT ) ;
    public final void rule__BINARY24__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13325:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:13326:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:13326:1: ( RULE_INT )
            // InternalSpinCAD.g:13327:1: RULE_INT
            {
             before(grammarAccess.getBINARY24Access().getINTTerminalRuleCall_0_0_1()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getBINARY24Access().getINTTerminalRuleCall_0_0_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_0_0__1__Impl"


    // $ANTLR start "rule__BINARY24__Group_1__0"
    // InternalSpinCAD.g:13342:1: rule__BINARY24__Group_1__0 : rule__BINARY24__Group_1__0__Impl rule__BINARY24__Group_1__1 ;
    public final void rule__BINARY24__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13346:1: ( rule__BINARY24__Group_1__0__Impl rule__BINARY24__Group_1__1 )
            // InternalSpinCAD.g:13347:2: rule__BINARY24__Group_1__0__Impl rule__BINARY24__Group_1__1
            {
            pushFollow(FOLLOW_18);
            rule__BINARY24__Group_1__0__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__0"


    // $ANTLR start "rule__BINARY24__Group_1__0__Impl"
    // InternalSpinCAD.g:13354:1: rule__BINARY24__Group_1__0__Impl : ( '$' ) ;
    public final void rule__BINARY24__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13358:1: ( ( '$' ) )
            // InternalSpinCAD.g:13359:1: ( '$' )
            {
            // InternalSpinCAD.g:13359:1: ( '$' )
            // InternalSpinCAD.g:13360:1: '$'
            {
             before(grammarAccess.getBINARY24Access().getDollarSignKeyword_1_0()); 
            match(input,94,FOLLOW_2); 
             after(grammarAccess.getBINARY24Access().getDollarSignKeyword_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__0__Impl"


    // $ANTLR start "rule__BINARY24__Group_1__1"
    // InternalSpinCAD.g:13373:1: rule__BINARY24__Group_1__1 : rule__BINARY24__Group_1__1__Impl rule__BINARY24__Group_1__2 ;
    public final void rule__BINARY24__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13377:1: ( rule__BINARY24__Group_1__1__Impl rule__BINARY24__Group_1__2 )
            // InternalSpinCAD.g:13378:2: rule__BINARY24__Group_1__1__Impl rule__BINARY24__Group_1__2
            {
            pushFollow(FOLLOW_18);
            rule__BINARY24__Group_1__1__Impl();

            state._fsp--;

            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_1__2();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__1"


    // $ANTLR start "rule__BINARY24__Group_1__1__Impl"
    // InternalSpinCAD.g:13385:1: rule__BINARY24__Group_1__1__Impl : ( ( RULE_INT )* ) ;
    public final void rule__BINARY24__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13389:1: ( ( ( RULE_INT )* ) )
            // InternalSpinCAD.g:13390:1: ( ( RULE_INT )* )
            {
            // InternalSpinCAD.g:13390:1: ( ( RULE_INT )* )
            // InternalSpinCAD.g:13391:1: ( RULE_INT )*
            {
             before(grammarAccess.getBINARY24Access().getINTTerminalRuleCall_1_1()); 
            // InternalSpinCAD.g:13392:1: ( RULE_INT )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==RULE_INT) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // InternalSpinCAD.g:13392:3: RULE_INT
            	    {
            	    match(input,RULE_INT,FOLLOW_30); 

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

             after(grammarAccess.getBINARY24Access().getINTTerminalRuleCall_1_1()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__1__Impl"


    // $ANTLR start "rule__BINARY24__Group_1__2"
    // InternalSpinCAD.g:13402:1: rule__BINARY24__Group_1__2 : rule__BINARY24__Group_1__2__Impl ;
    public final void rule__BINARY24__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13406:1: ( rule__BINARY24__Group_1__2__Impl )
            // InternalSpinCAD.g:13407:2: rule__BINARY24__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BINARY24__Group_1__2__Impl();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__2"


    // $ANTLR start "rule__BINARY24__Group_1__2__Impl"
    // InternalSpinCAD.g:13413:1: rule__BINARY24__Group_1__2__Impl : ( ( RULE_ID )* ) ;
    public final void rule__BINARY24__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13417:1: ( ( ( RULE_ID )* ) )
            // InternalSpinCAD.g:13418:1: ( ( RULE_ID )* )
            {
            // InternalSpinCAD.g:13418:1: ( ( RULE_ID )* )
            // InternalSpinCAD.g:13419:1: ( RULE_ID )*
            {
             before(grammarAccess.getBINARY24Access().getIDTerminalRuleCall_1_2()); 
            // InternalSpinCAD.g:13420:1: ( RULE_ID )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==RULE_ID) ) {
                    int LA66_2 = input.LA(2);

                    if ( (LA66_2==EOF||LA66_2==RULE_ID||LA66_2==RULE_SC_COMMENT||(LA66_2>=25 && LA66_2<=37)||(LA66_2>=39 && LA66_2<=61)||(LA66_2>=63 && LA66_2<=89)) ) {
                        alt66=1;
                    }


                }


                switch (alt66) {
            	case 1 :
            	    // InternalSpinCAD.g:13420:3: RULE_ID
            	    {
            	    match(input,RULE_ID,FOLLOW_29); 

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

             after(grammarAccess.getBINARY24Access().getIDTerminalRuleCall_1_2()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BINARY24__Group_1__2__Impl"


    // $ANTLR start "rule__Program__NameAssignment_1"
    // InternalSpinCAD.g:13437:1: rule__Program__NameAssignment_1 : ( ( rule__Program__NameAlternatives_1_0 ) ) ;
    public final void rule__Program__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13441:1: ( ( ( rule__Program__NameAlternatives_1_0 ) ) )
            // InternalSpinCAD.g:13442:1: ( ( rule__Program__NameAlternatives_1_0 ) )
            {
            // InternalSpinCAD.g:13442:1: ( ( rule__Program__NameAlternatives_1_0 ) )
            // InternalSpinCAD.g:13443:1: ( rule__Program__NameAlternatives_1_0 )
            {
             before(grammarAccess.getProgramAccess().getNameAlternatives_1_0()); 
            // InternalSpinCAD.g:13444:1: ( rule__Program__NameAlternatives_1_0 )
            // InternalSpinCAD.g:13444:2: rule__Program__NameAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Program__NameAlternatives_1_0();

            state._fsp--;


            }

             after(grammarAccess.getProgramAccess().getNameAlternatives_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__NameAssignment_1"


    // $ANTLR start "rule__Program__ColorAssignment_2_1"
    // InternalSpinCAD.g:13453:1: rule__Program__ColorAssignment_2_1 : ( RULE_STRING ) ;
    public final void rule__Program__ColorAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13457:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:13458:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:13458:1: ( RULE_STRING )
            // InternalSpinCAD.g:13459:1: RULE_STRING
            {
             before(grammarAccess.getProgramAccess().getColorSTRINGTerminalRuleCall_2_1_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getProgramAccess().getColorSTRINGTerminalRuleCall_2_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__ColorAssignment_2_1"


    // $ANTLR start "rule__Program__PinsAssignment_3"
    // InternalSpinCAD.g:13468:1: rule__Program__PinsAssignment_3 : ( rulePin ) ;
    public final void rule__Program__PinsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13472:1: ( ( rulePin ) )
            // InternalSpinCAD.g:13473:1: ( rulePin )
            {
            // InternalSpinCAD.g:13473:1: ( rulePin )
            // InternalSpinCAD.g:13474:1: rulePin
            {
             before(grammarAccess.getProgramAccess().getPinsPinParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            rulePin();

            state._fsp--;

             after(grammarAccess.getProgramAccess().getPinsPinParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__PinsAssignment_3"


    // $ANTLR start "rule__Program__ElementsAssignment_4"
    // InternalSpinCAD.g:13483:1: rule__Program__ElementsAssignment_4 : ( ruleSpinElement ) ;
    public final void rule__Program__ElementsAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13487:1: ( ( ruleSpinElement ) )
            // InternalSpinCAD.g:13488:1: ( ruleSpinElement )
            {
            // InternalSpinCAD.g:13488:1: ( ruleSpinElement )
            // InternalSpinCAD.g:13489:1: ruleSpinElement
            {
             before(grammarAccess.getProgramAccess().getElementsSpinElementParserRuleCall_4_0()); 
            pushFollow(FOLLOW_2);
            ruleSpinElement();

            state._fsp--;

             after(grammarAccess.getProgramAccess().getElementsSpinElementParserRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Program__ElementsAssignment_4"


    // $ANTLR start "rule__AudioInput__VarNameAssignment_1"
    // InternalSpinCAD.g:13498:1: rule__AudioInput__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__AudioInput__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13502:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13503:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13503:1: ( RULE_ID )
            // InternalSpinCAD.g:13504:1: RULE_ID
            {
             before(grammarAccess.getAudioInputAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getAudioInputAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__VarNameAssignment_1"


    // $ANTLR start "rule__AudioInput__LabelAssignment_2"
    // InternalSpinCAD.g:13513:1: rule__AudioInput__LabelAssignment_2 : ( ( rule__AudioInput__LabelAlternatives_2_0 ) ) ;
    public final void rule__AudioInput__LabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13517:1: ( ( ( rule__AudioInput__LabelAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13518:1: ( ( rule__AudioInput__LabelAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13518:1: ( ( rule__AudioInput__LabelAlternatives_2_0 ) )
            // InternalSpinCAD.g:13519:1: ( rule__AudioInput__LabelAlternatives_2_0 )
            {
             before(grammarAccess.getAudioInputAccess().getLabelAlternatives_2_0()); 
            // InternalSpinCAD.g:13520:1: ( rule__AudioInput__LabelAlternatives_2_0 )
            // InternalSpinCAD.g:13520:2: rule__AudioInput__LabelAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__AudioInput__LabelAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getAudioInputAccess().getLabelAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioInput__LabelAssignment_2"


    // $ANTLR start "rule__AudioOutput__VarNameAssignment_1"
    // InternalSpinCAD.g:13529:1: rule__AudioOutput__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__AudioOutput__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13533:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13534:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13534:1: ( RULE_ID )
            // InternalSpinCAD.g:13535:1: RULE_ID
            {
             before(grammarAccess.getAudioOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getAudioOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__VarNameAssignment_1"


    // $ANTLR start "rule__AudioOutput__LabelAssignment_2"
    // InternalSpinCAD.g:13544:1: rule__AudioOutput__LabelAssignment_2 : ( ( rule__AudioOutput__LabelAlternatives_2_0 ) ) ;
    public final void rule__AudioOutput__LabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13548:1: ( ( ( rule__AudioOutput__LabelAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13549:1: ( ( rule__AudioOutput__LabelAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13549:1: ( ( rule__AudioOutput__LabelAlternatives_2_0 ) )
            // InternalSpinCAD.g:13550:1: ( rule__AudioOutput__LabelAlternatives_2_0 )
            {
             before(grammarAccess.getAudioOutputAccess().getLabelAlternatives_2_0()); 
            // InternalSpinCAD.g:13551:1: ( rule__AudioOutput__LabelAlternatives_2_0 )
            // InternalSpinCAD.g:13551:2: rule__AudioOutput__LabelAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__AudioOutput__LabelAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getAudioOutputAccess().getLabelAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AudioOutput__LabelAssignment_2"


    // $ANTLR start "rule__ControlInput__VarNameAssignment_1"
    // InternalSpinCAD.g:13560:1: rule__ControlInput__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__ControlInput__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13564:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13565:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13565:1: ( RULE_ID )
            // InternalSpinCAD.g:13566:1: RULE_ID
            {
             before(grammarAccess.getControlInputAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getControlInputAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__VarNameAssignment_1"


    // $ANTLR start "rule__ControlInput__LabelAssignment_2"
    // InternalSpinCAD.g:13575:1: rule__ControlInput__LabelAssignment_2 : ( ( rule__ControlInput__LabelAlternatives_2_0 ) ) ;
    public final void rule__ControlInput__LabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13579:1: ( ( ( rule__ControlInput__LabelAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13580:1: ( ( rule__ControlInput__LabelAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13580:1: ( ( rule__ControlInput__LabelAlternatives_2_0 ) )
            // InternalSpinCAD.g:13581:1: ( rule__ControlInput__LabelAlternatives_2_0 )
            {
             before(grammarAccess.getControlInputAccess().getLabelAlternatives_2_0()); 
            // InternalSpinCAD.g:13582:1: ( rule__ControlInput__LabelAlternatives_2_0 )
            // InternalSpinCAD.g:13582:2: rule__ControlInput__LabelAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__ControlInput__LabelAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getControlInputAccess().getLabelAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlInput__LabelAssignment_2"


    // $ANTLR start "rule__ControlOutput__VarNameAssignment_1"
    // InternalSpinCAD.g:13591:1: rule__ControlOutput__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__ControlOutput__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13595:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13596:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13596:1: ( RULE_ID )
            // InternalSpinCAD.g:13597:1: RULE_ID
            {
             before(grammarAccess.getControlOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getControlOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__VarNameAssignment_1"


    // $ANTLR start "rule__ControlOutput__LabelAssignment_2"
    // InternalSpinCAD.g:13606:1: rule__ControlOutput__LabelAssignment_2 : ( ( rule__ControlOutput__LabelAlternatives_2_0 ) ) ;
    public final void rule__ControlOutput__LabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13610:1: ( ( ( rule__ControlOutput__LabelAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13611:1: ( ( rule__ControlOutput__LabelAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13611:1: ( ( rule__ControlOutput__LabelAlternatives_2_0 ) )
            // InternalSpinCAD.g:13612:1: ( rule__ControlOutput__LabelAlternatives_2_0 )
            {
             before(grammarAccess.getControlOutputAccess().getLabelAlternatives_2_0()); 
            // InternalSpinCAD.g:13613:1: ( rule__ControlOutput__LabelAlternatives_2_0 )
            // InternalSpinCAD.g:13613:2: rule__ControlOutput__LabelAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__ControlOutput__LabelAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getControlOutputAccess().getLabelAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ControlOutput__LabelAssignment_2"


    // $ANTLR start "rule__SpinEquate__EnameAssignment_1"
    // InternalSpinCAD.g:13622:1: rule__SpinEquate__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinEquate__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13626:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13627:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13627:1: ( RULE_ID )
            // InternalSpinCAD.g:13628:1: RULE_ID
            {
             before(grammarAccess.getSpinEquateAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinEquateAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__EnameAssignment_1"


    // $ANTLR start "rule__SpinEquate__ValueAssignment_2"
    // InternalSpinCAD.g:13637:1: rule__SpinEquate__ValueAssignment_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__SpinEquate__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13641:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13642:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13642:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13643:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSpinEquateAccess().getValueSPINDOUBLEParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSpinEquateAccess().getValueSPINDOUBLEParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinEquate__ValueAssignment_2"


    // $ANTLR start "rule__SpinInt__EnameAssignment_1"
    // InternalSpinCAD.g:13652:1: rule__SpinInt__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinInt__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13656:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13657:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13657:1: ( RULE_ID )
            // InternalSpinCAD.g:13658:1: RULE_ID
            {
             before(grammarAccess.getSpinIntAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinIntAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__EnameAssignment_1"


    // $ANTLR start "rule__SpinInt__ValueAssignment_2"
    // InternalSpinCAD.g:13667:1: rule__SpinInt__ValueAssignment_2 : ( RULE_INT ) ;
    public final void rule__SpinInt__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13671:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:13672:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:13672:1: ( RULE_INT )
            // InternalSpinCAD.g:13673:1: RULE_INT
            {
             before(grammarAccess.getSpinIntAccess().getValueINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSpinIntAccess().getValueINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinInt__ValueAssignment_2"


    // $ANTLR start "rule__Mem__BufferAssignment_1"
    // InternalSpinCAD.g:13682:1: rule__Mem__BufferAssignment_1 : ( RULE_ID ) ;
    public final void rule__Mem__BufferAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13686:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13687:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13687:1: ( RULE_ID )
            // InternalSpinCAD.g:13688:1: RULE_ID
            {
             before(grammarAccess.getMemAccess().getBufferIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMemAccess().getBufferIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__BufferAssignment_1"


    // $ANTLR start "rule__Mem__LengthAssignment_2"
    // InternalSpinCAD.g:13697:1: rule__Mem__LengthAssignment_2 : ( ruleSPINREGISTER ) ;
    public final void rule__Mem__LengthAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13701:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:13702:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:13702:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:13703:1: ruleSPINREGISTER
            {
             before(grammarAccess.getMemAccess().getLengthSPINREGISTERParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getMemAccess().getLengthSPINREGISTERParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mem__LengthAssignment_2"


    // $ANTLR start "rule__Offset__NameAssignment_1"
    // InternalSpinCAD.g:13712:1: rule__Offset__NameAssignment_1 : ( RULE_ID ) ;
    public final void rule__Offset__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13716:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13717:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13717:1: ( RULE_ID )
            // InternalSpinCAD.g:13718:1: RULE_ID
            {
             before(grammarAccess.getOffsetAccess().getNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getOffsetAccess().getNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__NameAssignment_1"


    // $ANTLR start "rule__Offset__LengthAssignment_2"
    // InternalSpinCAD.g:13727:1: rule__Offset__LengthAssignment_2 : ( RULE_INT ) ;
    public final void rule__Offset__LengthAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13731:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:13732:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:13732:1: ( RULE_INT )
            // InternalSpinCAD.g:13733:1: RULE_INT
            {
             before(grammarAccess.getOffsetAccess().getLengthINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getOffsetAccess().getLengthINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Offset__LengthAssignment_2"


    // $ANTLR start "rule__SpinBool__LabelAssignment_1"
    // InternalSpinCAD.g:13742:1: rule__SpinBool__LabelAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinBool__LabelAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13746:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13747:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13747:1: ( RULE_ID )
            // InternalSpinCAD.g:13748:1: RULE_ID
            {
             before(grammarAccess.getSpinBoolAccess().getLabelIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinBoolAccess().getLabelIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__LabelAssignment_1"


    // $ANTLR start "rule__SpinBool__ValueAssignment_2"
    // InternalSpinCAD.g:13757:1: rule__SpinBool__ValueAssignment_2 : ( ruleBOOLEAN ) ;
    public final void rule__SpinBool__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13761:1: ( ( ruleBOOLEAN ) )
            // InternalSpinCAD.g:13762:1: ( ruleBOOLEAN )
            {
            // InternalSpinCAD.g:13762:1: ( ruleBOOLEAN )
            // InternalSpinCAD.g:13763:1: ruleBOOLEAN
            {
             before(grammarAccess.getSpinBoolAccess().getValueBOOLEANParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleBOOLEAN();

            state._fsp--;

             after(grammarAccess.getSpinBoolAccess().getValueBOOLEANParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinBool__ValueAssignment_2"


    // $ANTLR start "rule__SpinSliderLabel__EnameAssignment_1"
    // InternalSpinCAD.g:13772:1: rule__SpinSliderLabel__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinSliderLabel__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13776:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13777:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13777:1: ( RULE_ID )
            // InternalSpinCAD.g:13778:1: RULE_ID
            {
             before(grammarAccess.getSpinSliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinSliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__EnameAssignment_1"


    // $ANTLR start "rule__SpinSliderLabel__ControlNameAssignment_2"
    // InternalSpinCAD.g:13787:1: rule__SpinSliderLabel__ControlNameAssignment_2 : ( ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__SpinSliderLabel__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13791:1: ( ( ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13792:1: ( ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13792:1: ( ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:13793:1: ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getSpinSliderLabelAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:13794:1: ( rule__SpinSliderLabel__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:13794:2: rule__SpinSliderLabel__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinSliderLabel__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinSliderLabelAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__ControlNameAssignment_2"


    // $ANTLR start "rule__SpinSliderLabel__MinValAssignment_3_0"
    // InternalSpinCAD.g:13803:1: rule__SpinSliderLabel__MinValAssignment_3_0 : ( ruleSPINDOUBLE ) ;
    public final void rule__SpinSliderLabel__MinValAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13807:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13808:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13808:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13809:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSpinSliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__MinValAssignment_3_0"


    // $ANTLR start "rule__SpinSliderLabel__MaxValAssignment_3_1"
    // InternalSpinCAD.g:13818:1: rule__SpinSliderLabel__MaxValAssignment_3_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__SpinSliderLabel__MaxValAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13822:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13823:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13823:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13824:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSpinSliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__MaxValAssignment_3_1"


    // $ANTLR start "rule__SpinSliderLabel__InitValAssignment_3_2"
    // InternalSpinCAD.g:13833:1: rule__SpinSliderLabel__InitValAssignment_3_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__SpinSliderLabel__InitValAssignment_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13837:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13838:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13838:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13839:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSpinSliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSpinSliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__InitValAssignment_3_2"


    // $ANTLR start "rule__SpinSliderLabel__MultiplierAssignment_3_3"
    // InternalSpinCAD.g:13848:1: rule__SpinSliderLabel__MultiplierAssignment_3_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__SpinSliderLabel__MultiplierAssignment_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13852:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13853:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13853:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13854:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSpinSliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSpinSliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__MultiplierAssignment_3_3"


    // $ANTLR start "rule__SpinSliderLabel__PrecisionAssignment_3_4"
    // InternalSpinCAD.g:13863:1: rule__SpinSliderLabel__PrecisionAssignment_3_4 : ( RULE_INT ) ;
    public final void rule__SpinSliderLabel__PrecisionAssignment_3_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13867:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:13868:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:13868:1: ( RULE_INT )
            // InternalSpinCAD.g:13869:1: RULE_INT
            {
             before(grammarAccess.getSpinSliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSpinSliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__PrecisionAssignment_3_4"


    // $ANTLR start "rule__SpinSliderLabel__OptionAssignment_3_5"
    // InternalSpinCAD.g:13878:1: rule__SpinSliderLabel__OptionAssignment_3_5 : ( RULE_ID ) ;
    public final void rule__SpinSliderLabel__OptionAssignment_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13882:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13883:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13883:1: ( RULE_ID )
            // InternalSpinCAD.g:13884:1: RULE_ID
            {
             before(grammarAccess.getSpinSliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinSliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinSliderLabel__OptionAssignment_3_5"


    // $ANTLR start "rule__SliderLabelSpinner__EnameAssignment_1"
    // InternalSpinCAD.g:13893:1: rule__SliderLabelSpinner__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SliderLabelSpinner__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13897:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:13898:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:13898:1: ( RULE_ID )
            // InternalSpinCAD.g:13899:1: RULE_ID
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSliderLabelSpinnerAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__EnameAssignment_1"


    // $ANTLR start "rule__SliderLabelSpinner__ControlNameAssignment_2"
    // InternalSpinCAD.g:13908:1: rule__SliderLabelSpinner__ControlNameAssignment_2 : ( ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__SliderLabelSpinner__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13912:1: ( ( ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:13913:1: ( ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:13913:1: ( ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:13914:1: ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:13915:1: ( rule__SliderLabelSpinner__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:13915:2: rule__SliderLabelSpinner__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelSpinner__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelSpinnerAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__ControlNameAssignment_2"


    // $ANTLR start "rule__SliderLabelSpinner__MinValAssignment_3_0"
    // InternalSpinCAD.g:13924:1: rule__SliderLabelSpinner__MinValAssignment_3_0 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelSpinner__MinValAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13928:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13929:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13929:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13930:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelSpinnerAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__MinValAssignment_3_0"


    // $ANTLR start "rule__SliderLabelSpinner__MaxValAssignment_3_1"
    // InternalSpinCAD.g:13939:1: rule__SliderLabelSpinner__MaxValAssignment_3_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelSpinner__MaxValAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13943:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13944:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13944:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13945:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelSpinnerAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__MaxValAssignment_3_1"


    // $ANTLR start "rule__SliderLabelSpinner__InitValAssignment_3_2"
    // InternalSpinCAD.g:13954:1: rule__SliderLabelSpinner__InitValAssignment_3_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelSpinner__InitValAssignment_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13958:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13959:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13959:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13960:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelSpinnerAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__InitValAssignment_3_2"


    // $ANTLR start "rule__SliderLabelSpinner__MultiplierAssignment_3_3"
    // InternalSpinCAD.g:13969:1: rule__SliderLabelSpinner__MultiplierAssignment_3_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelSpinner__MultiplierAssignment_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13973:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:13974:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:13974:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:13975:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelSpinnerAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__MultiplierAssignment_3_3"


    // $ANTLR start "rule__SliderLabelSpinner__PrecisionAssignment_3_4"
    // InternalSpinCAD.g:13984:1: rule__SliderLabelSpinner__PrecisionAssignment_3_4 : ( RULE_INT ) ;
    public final void rule__SliderLabelSpinner__PrecisionAssignment_3_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:13988:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:13989:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:13989:1: ( RULE_INT )
            // InternalSpinCAD.g:13990:1: RULE_INT
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSliderLabelSpinnerAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__PrecisionAssignment_3_4"


    // $ANTLR start "rule__SliderLabelSpinner__OptionAssignment_3_5"
    // InternalSpinCAD.g:13999:1: rule__SliderLabelSpinner__OptionAssignment_3_5 : ( RULE_ID ) ;
    public final void rule__SliderLabelSpinner__OptionAssignment_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14003:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14004:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14004:1: ( RULE_ID )
            // InternalSpinCAD.g:14005:1: RULE_ID
            {
             before(grammarAccess.getSliderLabelSpinnerAccess().getOptionIDTerminalRuleCall_3_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSliderLabelSpinnerAccess().getOptionIDTerminalRuleCall_3_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelSpinner__OptionAssignment_3_5"


    // $ANTLR start "rule__SliderLabelCheckBox__EnameAssignment_1"
    // InternalSpinCAD.g:14014:1: rule__SliderLabelCheckBox__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SliderLabelCheckBox__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14018:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14019:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14019:1: ( RULE_ID )
            // InternalSpinCAD.g:14020:1: RULE_ID
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSliderLabelCheckBoxAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__EnameAssignment_1"


    // $ANTLR start "rule__SliderLabelCheckBox__ControlNameAssignment_2"
    // InternalSpinCAD.g:14029:1: rule__SliderLabelCheckBox__ControlNameAssignment_2 : ( ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__SliderLabelCheckBox__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14033:1: ( ( ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:14034:1: ( ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:14034:1: ( ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:14035:1: ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:14036:1: ( rule__SliderLabelCheckBox__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:14036:2: rule__SliderLabelCheckBox__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SliderLabelCheckBox__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getSliderLabelCheckBoxAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__ControlNameAssignment_2"


    // $ANTLR start "rule__SliderLabelCheckBox__MinValAssignment_3_0"
    // InternalSpinCAD.g:14045:1: rule__SliderLabelCheckBox__MinValAssignment_3_0 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelCheckBox__MinValAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14049:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14050:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14050:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14051:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__MinValAssignment_3_0"


    // $ANTLR start "rule__SliderLabelCheckBox__MaxValAssignment_3_1"
    // InternalSpinCAD.g:14060:1: rule__SliderLabelCheckBox__MaxValAssignment_3_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelCheckBox__MaxValAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14064:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14065:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14065:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14066:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__MaxValAssignment_3_1"


    // $ANTLR start "rule__SliderLabelCheckBox__InitValAssignment_3_2"
    // InternalSpinCAD.g:14075:1: rule__SliderLabelCheckBox__InitValAssignment_3_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelCheckBox__InitValAssignment_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14079:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14080:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14080:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14081:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelCheckBoxAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__InitValAssignment_3_2"


    // $ANTLR start "rule__SliderLabelCheckBox__MultiplierAssignment_3_3"
    // InternalSpinCAD.g:14090:1: rule__SliderLabelCheckBox__MultiplierAssignment_3_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__SliderLabelCheckBox__MultiplierAssignment_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14094:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14095:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14095:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14096:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSliderLabelCheckBoxAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__MultiplierAssignment_3_3"


    // $ANTLR start "rule__SliderLabelCheckBox__PrecisionAssignment_3_4"
    // InternalSpinCAD.g:14105:1: rule__SliderLabelCheckBox__PrecisionAssignment_3_4 : ( RULE_INT ) ;
    public final void rule__SliderLabelCheckBox__PrecisionAssignment_3_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14109:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14110:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14110:1: ( RULE_INT )
            // InternalSpinCAD.g:14111:1: RULE_INT
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSliderLabelCheckBoxAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__PrecisionAssignment_3_4"


    // $ANTLR start "rule__SliderLabelCheckBox__OptionAssignment_3_5"
    // InternalSpinCAD.g:14120:1: rule__SliderLabelCheckBox__OptionAssignment_3_5 : ( RULE_ID ) ;
    public final void rule__SliderLabelCheckBox__OptionAssignment_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14124:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14125:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14125:1: ( RULE_ID )
            // InternalSpinCAD.g:14126:1: RULE_ID
            {
             before(grammarAccess.getSliderLabelCheckBoxAccess().getOptionIDTerminalRuleCall_3_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSliderLabelCheckBoxAccess().getOptionIDTerminalRuleCall_3_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SliderLabelCheckBox__OptionAssignment_3_5"


    // $ANTLR start "rule__SpinCheckBox__EnameAssignment_1"
    // InternalSpinCAD.g:14135:1: rule__SpinCheckBox__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinCheckBox__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14139:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14140:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14140:1: ( RULE_ID )
            // InternalSpinCAD.g:14141:1: RULE_ID
            {
             before(grammarAccess.getSpinCheckBoxAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinCheckBoxAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__EnameAssignment_1"


    // $ANTLR start "rule__SpinCheckBox__ControlNameAssignment_2"
    // InternalSpinCAD.g:14150:1: rule__SpinCheckBox__ControlNameAssignment_2 : ( ( rule__SpinCheckBox__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__SpinCheckBox__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14154:1: ( ( ( rule__SpinCheckBox__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:14155:1: ( ( rule__SpinCheckBox__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:14155:1: ( ( rule__SpinCheckBox__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:14156:1: ( rule__SpinCheckBox__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getSpinCheckBoxAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:14157:1: ( rule__SpinCheckBox__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:14157:2: rule__SpinCheckBox__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinCheckBox__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinCheckBoxAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinCheckBox__ControlNameAssignment_2"


    // $ANTLR start "rule__LogFreqSliderLabel__EnameAssignment_1"
    // InternalSpinCAD.g:14166:1: rule__LogFreqSliderLabel__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__LogFreqSliderLabel__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14170:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14171:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14171:1: ( RULE_ID )
            // InternalSpinCAD.g:14172:1: RULE_ID
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLogFreqSliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__EnameAssignment_1"


    // $ANTLR start "rule__LogFreqSliderLabel__ControlNameAssignment_2"
    // InternalSpinCAD.g:14181:1: rule__LogFreqSliderLabel__ControlNameAssignment_2 : ( ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__LogFreqSliderLabel__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14185:1: ( ( ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:14186:1: ( ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:14186:1: ( ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:14187:1: ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:14188:1: ( rule__LogFreqSliderLabel__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:14188:2: rule__LogFreqSliderLabel__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreqSliderLabel__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreqSliderLabelAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__ControlNameAssignment_2"


    // $ANTLR start "rule__LogFreqSliderLabel__MinValAssignment_3_0"
    // InternalSpinCAD.g:14197:1: rule__LogFreqSliderLabel__MinValAssignment_3_0 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreqSliderLabel__MinValAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14201:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14202:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14202:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14203:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreqSliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__MinValAssignment_3_0"


    // $ANTLR start "rule__LogFreqSliderLabel__MaxValAssignment_3_1"
    // InternalSpinCAD.g:14212:1: rule__LogFreqSliderLabel__MaxValAssignment_3_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreqSliderLabel__MaxValAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14216:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14217:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14217:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14218:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreqSliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__MaxValAssignment_3_1"


    // $ANTLR start "rule__LogFreqSliderLabel__InitValAssignment_3_2"
    // InternalSpinCAD.g:14227:1: rule__LogFreqSliderLabel__InitValAssignment_3_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreqSliderLabel__InitValAssignment_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14231:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14232:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14232:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14233:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreqSliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__InitValAssignment_3_2"


    // $ANTLR start "rule__LogFreqSliderLabel__MultiplierAssignment_3_3"
    // InternalSpinCAD.g:14242:1: rule__LogFreqSliderLabel__MultiplierAssignment_3_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreqSliderLabel__MultiplierAssignment_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14246:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14247:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14247:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14248:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreqSliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__MultiplierAssignment_3_3"


    // $ANTLR start "rule__LogFreqSliderLabel__PrecisionAssignment_3_4"
    // InternalSpinCAD.g:14257:1: rule__LogFreqSliderLabel__PrecisionAssignment_3_4 : ( RULE_INT ) ;
    public final void rule__LogFreqSliderLabel__PrecisionAssignment_3_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14261:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14262:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14262:1: ( RULE_INT )
            // InternalSpinCAD.g:14263:1: RULE_INT
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getLogFreqSliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__PrecisionAssignment_3_4"


    // $ANTLR start "rule__LogFreqSliderLabel__OptionAssignment_3_5"
    // InternalSpinCAD.g:14272:1: rule__LogFreqSliderLabel__OptionAssignment_3_5 : ( RULE_ID ) ;
    public final void rule__LogFreqSliderLabel__OptionAssignment_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14276:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14277:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14277:1: ( RULE_ID )
            // InternalSpinCAD.g:14278:1: RULE_ID
            {
             before(grammarAccess.getLogFreqSliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLogFreqSliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreqSliderLabel__OptionAssignment_3_5"


    // $ANTLR start "rule__LogFreq2SliderLabel__EnameAssignment_1"
    // InternalSpinCAD.g:14287:1: rule__LogFreq2SliderLabel__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__LogFreq2SliderLabel__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14291:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14292:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14292:1: ( RULE_ID )
            // InternalSpinCAD.g:14293:1: RULE_ID
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLogFreq2SliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__EnameAssignment_1"


    // $ANTLR start "rule__LogFreq2SliderLabel__ControlNameAssignment_2"
    // InternalSpinCAD.g:14302:1: rule__LogFreq2SliderLabel__ControlNameAssignment_2 : ( ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__LogFreq2SliderLabel__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14306:1: ( ( ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:14307:1: ( ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:14307:1: ( ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:14308:1: ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:14309:1: ( rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:14309:2: rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__LogFreq2SliderLabel__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getLogFreq2SliderLabelAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__ControlNameAssignment_2"


    // $ANTLR start "rule__LogFreq2SliderLabel__MinValAssignment_3_0"
    // InternalSpinCAD.g:14318:1: rule__LogFreq2SliderLabel__MinValAssignment_3_0 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreq2SliderLabel__MinValAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14322:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14323:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14323:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14324:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__MinValAssignment_3_0"


    // $ANTLR start "rule__LogFreq2SliderLabel__MaxValAssignment_3_1"
    // InternalSpinCAD.g:14333:1: rule__LogFreq2SliderLabel__MaxValAssignment_3_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreq2SliderLabel__MaxValAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14337:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14338:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14338:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14339:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__MaxValAssignment_3_1"


    // $ANTLR start "rule__LogFreq2SliderLabel__InitValAssignment_3_2"
    // InternalSpinCAD.g:14348:1: rule__LogFreq2SliderLabel__InitValAssignment_3_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreq2SliderLabel__InitValAssignment_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14352:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14353:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14353:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14354:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreq2SliderLabelAccess().getInitValSPINDOUBLEParserRuleCall_3_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__InitValAssignment_3_2"


    // $ANTLR start "rule__LogFreq2SliderLabel__MultiplierAssignment_3_3"
    // InternalSpinCAD.g:14363:1: rule__LogFreq2SliderLabel__MultiplierAssignment_3_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__LogFreq2SliderLabel__MultiplierAssignment_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14367:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14368:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14368:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14369:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogFreq2SliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__MultiplierAssignment_3_3"


    // $ANTLR start "rule__LogFreq2SliderLabel__PrecisionAssignment_3_4"
    // InternalSpinCAD.g:14378:1: rule__LogFreq2SliderLabel__PrecisionAssignment_3_4 : ( RULE_INT ) ;
    public final void rule__LogFreq2SliderLabel__PrecisionAssignment_3_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14382:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14383:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14383:1: ( RULE_INT )
            // InternalSpinCAD.g:14384:1: RULE_INT
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getLogFreq2SliderLabelAccess().getPrecisionINTTerminalRuleCall_3_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__PrecisionAssignment_3_4"


    // $ANTLR start "rule__LogFreq2SliderLabel__OptionAssignment_3_5"
    // InternalSpinCAD.g:14393:1: rule__LogFreq2SliderLabel__OptionAssignment_3_5 : ( RULE_ID ) ;
    public final void rule__LogFreq2SliderLabel__OptionAssignment_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14397:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14398:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14398:1: ( RULE_ID )
            // InternalSpinCAD.g:14399:1: RULE_ID
            {
             before(grammarAccess.getLogFreq2SliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLogFreq2SliderLabelAccess().getOptionIDTerminalRuleCall_3_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LogFreq2SliderLabel__OptionAssignment_3_5"


    // $ANTLR start "rule__SpinRadioButton__EnameAssignment_1"
    // InternalSpinCAD.g:14408:1: rule__SpinRadioButton__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinRadioButton__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14412:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14413:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14413:1: ( RULE_ID )
            // InternalSpinCAD.g:14414:1: RULE_ID
            {
             before(grammarAccess.getSpinRadioButtonAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinRadioButtonAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__EnameAssignment_1"


    // $ANTLR start "rule__SpinRadioButton__ControlNameAssignment_2"
    // InternalSpinCAD.g:14423:1: rule__SpinRadioButton__ControlNameAssignment_2 : ( ( rule__SpinRadioButton__ControlNameAlternatives_2_0 ) ) ;
    public final void rule__SpinRadioButton__ControlNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14427:1: ( ( ( rule__SpinRadioButton__ControlNameAlternatives_2_0 ) ) )
            // InternalSpinCAD.g:14428:1: ( ( rule__SpinRadioButton__ControlNameAlternatives_2_0 ) )
            {
            // InternalSpinCAD.g:14428:1: ( ( rule__SpinRadioButton__ControlNameAlternatives_2_0 ) )
            // InternalSpinCAD.g:14429:1: ( rule__SpinRadioButton__ControlNameAlternatives_2_0 )
            {
             before(grammarAccess.getSpinRadioButtonAccess().getControlNameAlternatives_2_0()); 
            // InternalSpinCAD.g:14430:1: ( rule__SpinRadioButton__ControlNameAlternatives_2_0 )
            // InternalSpinCAD.g:14430:2: rule__SpinRadioButton__ControlNameAlternatives_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SpinRadioButton__ControlNameAlternatives_2_0();

            state._fsp--;


            }

             after(grammarAccess.getSpinRadioButtonAccess().getControlNameAlternatives_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinRadioButton__ControlNameAssignment_2"


    // $ANTLR start "rule__SpinComboBox__EnameAssignment_1"
    // InternalSpinCAD.g:14439:1: rule__SpinComboBox__EnameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SpinComboBox__EnameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14443:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14444:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14444:1: ( RULE_ID )
            // InternalSpinCAD.g:14445:1: RULE_ID
            {
             before(grammarAccess.getSpinComboBoxAccess().getEnameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getEnameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__EnameAssignment_1"


    // $ANTLR start "rule__SpinComboBox__OptionaAssignment_2"
    // InternalSpinCAD.g:14454:1: rule__SpinComboBox__OptionaAssignment_2 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptionaAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14458:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14459:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14459:1: ( RULE_STRING )
            // InternalSpinCAD.g:14460:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionaSTRINGTerminalRuleCall_2_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptionaSTRINGTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptionaAssignment_2"


    // $ANTLR start "rule__SpinComboBox__OptionbAssignment_3"
    // InternalSpinCAD.g:14469:1: rule__SpinComboBox__OptionbAssignment_3 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptionbAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14473:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14474:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14474:1: ( RULE_STRING )
            // InternalSpinCAD.g:14475:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionbSTRINGTerminalRuleCall_3_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptionbSTRINGTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptionbAssignment_3"


    // $ANTLR start "rule__SpinComboBox__OptioncAssignment_4_0"
    // InternalSpinCAD.g:14484:1: rule__SpinComboBox__OptioncAssignment_4_0 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptioncAssignment_4_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14488:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14489:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14489:1: ( RULE_STRING )
            // InternalSpinCAD.g:14490:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptioncSTRINGTerminalRuleCall_4_0_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptioncSTRINGTerminalRuleCall_4_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptioncAssignment_4_0"


    // $ANTLR start "rule__SpinComboBox__OptiondAssignment_4_1_0"
    // InternalSpinCAD.g:14499:1: rule__SpinComboBox__OptiondAssignment_4_1_0 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptiondAssignment_4_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14503:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14504:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14504:1: ( RULE_STRING )
            // InternalSpinCAD.g:14505:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptiondSTRINGTerminalRuleCall_4_1_0_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptiondSTRINGTerminalRuleCall_4_1_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptiondAssignment_4_1_0"


    // $ANTLR start "rule__SpinComboBox__OptioneAssignment_4_1_1_0"
    // InternalSpinCAD.g:14514:1: rule__SpinComboBox__OptioneAssignment_4_1_1_0 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptioneAssignment_4_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14518:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14519:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14519:1: ( RULE_STRING )
            // InternalSpinCAD.g:14520:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptioneSTRINGTerminalRuleCall_4_1_1_0_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptioneSTRINGTerminalRuleCall_4_1_1_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptioneAssignment_4_1_1_0"


    // $ANTLR start "rule__SpinComboBox__OptionfAssignment_4_1_1_1"
    // InternalSpinCAD.g:14529:1: rule__SpinComboBox__OptionfAssignment_4_1_1_1 : ( RULE_STRING ) ;
    public final void rule__SpinComboBox__OptionfAssignment_4_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14533:1: ( ( RULE_STRING ) )
            // InternalSpinCAD.g:14534:1: ( RULE_STRING )
            {
            // InternalSpinCAD.g:14534:1: ( RULE_STRING )
            // InternalSpinCAD.g:14535:1: RULE_STRING
            {
             before(grammarAccess.getSpinComboBoxAccess().getOptionfSTRINGTerminalRuleCall_4_1_1_1_0()); 
            match(input,RULE_STRING,FOLLOW_2); 
             after(grammarAccess.getSpinComboBoxAccess().getOptionfSTRINGTerminalRuleCall_4_1_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SpinComboBox__OptionfAssignment_4_1_1_1"


    // $ANTLR start "rule__Comment__RemarkAssignment"
    // InternalSpinCAD.g:14544:1: rule__Comment__RemarkAssignment : ( RULE_SC_COMMENT ) ;
    public final void rule__Comment__RemarkAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14548:1: ( ( RULE_SC_COMMENT ) )
            // InternalSpinCAD.g:14549:1: ( RULE_SC_COMMENT )
            {
            // InternalSpinCAD.g:14549:1: ( RULE_SC_COMMENT )
            // InternalSpinCAD.g:14550:1: RULE_SC_COMMENT
            {
             before(grammarAccess.getCommentAccess().getRemarkSC_COMMENTTerminalRuleCall_0()); 
            match(input,RULE_SC_COMMENT,FOLLOW_2); 
             after(grammarAccess.getCommentAccess().getRemarkSC_COMMENTTerminalRuleCall_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Comment__RemarkAssignment"


    // $ANTLR start "rule__Label__NameAssignment_0"
    // InternalSpinCAD.g:14559:1: rule__Label__NameAssignment_0 : ( RULE_ID ) ;
    public final void rule__Label__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14563:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14564:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14564:1: ( RULE_ID )
            // InternalSpinCAD.g:14565:1: RULE_ID
            {
             before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Label__NameAssignment_0"


    // $ANTLR start "rule__IsPinConnected__Arg1Assignment_1"
    // InternalSpinCAD.g:14574:1: rule__IsPinConnected__Arg1Assignment_1 : ( ( rule__IsPinConnected__Arg1Alternatives_1_0 ) ) ;
    public final void rule__IsPinConnected__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14578:1: ( ( ( rule__IsPinConnected__Arg1Alternatives_1_0 ) ) )
            // InternalSpinCAD.g:14579:1: ( ( rule__IsPinConnected__Arg1Alternatives_1_0 ) )
            {
            // InternalSpinCAD.g:14579:1: ( ( rule__IsPinConnected__Arg1Alternatives_1_0 ) )
            // InternalSpinCAD.g:14580:1: ( rule__IsPinConnected__Arg1Alternatives_1_0 )
            {
             before(grammarAccess.getIsPinConnectedAccess().getArg1Alternatives_1_0()); 
            // InternalSpinCAD.g:14581:1: ( rule__IsPinConnected__Arg1Alternatives_1_0 )
            // InternalSpinCAD.g:14581:2: rule__IsPinConnected__Arg1Alternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__IsPinConnected__Arg1Alternatives_1_0();

            state._fsp--;


            }

             after(grammarAccess.getIsPinConnectedAccess().getArg1Alternatives_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsPinConnected__Arg1Assignment_1"


    // $ANTLR start "rule__IsGreaterThan__VariableAssignment_1"
    // InternalSpinCAD.g:14590:1: rule__IsGreaterThan__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__IsGreaterThan__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14594:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14595:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14595:1: ( RULE_ID )
            // InternalSpinCAD.g:14596:1: RULE_ID
            {
             before(grammarAccess.getIsGreaterThanAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsGreaterThanAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__VariableAssignment_1"


    // $ANTLR start "rule__IsGreaterThan__ValueAssignment_2"
    // InternalSpinCAD.g:14605:1: rule__IsGreaterThan__ValueAssignment_2 : ( RULE_INT ) ;
    public final void rule__IsGreaterThan__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14609:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14610:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14610:1: ( RULE_INT )
            // InternalSpinCAD.g:14611:1: RULE_INT
            {
             before(grammarAccess.getIsGreaterThanAccess().getValueINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getIsGreaterThanAccess().getValueINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsGreaterThan__ValueAssignment_2"


    // $ANTLR start "rule__IsLessThan__VariableAssignment_1"
    // InternalSpinCAD.g:14620:1: rule__IsLessThan__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__IsLessThan__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14624:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14625:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14625:1: ( RULE_ID )
            // InternalSpinCAD.g:14626:1: RULE_ID
            {
             before(grammarAccess.getIsLessThanAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsLessThanAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__VariableAssignment_1"


    // $ANTLR start "rule__IsLessThan__ValueAssignment_2"
    // InternalSpinCAD.g:14635:1: rule__IsLessThan__ValueAssignment_2 : ( RULE_INT ) ;
    public final void rule__IsLessThan__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14639:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14640:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14640:1: ( RULE_INT )
            // InternalSpinCAD.g:14641:1: RULE_INT
            {
             before(grammarAccess.getIsLessThanAccess().getValueINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getIsLessThanAccess().getValueINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsLessThan__ValueAssignment_2"


    // $ANTLR start "rule__IsEqualTo__VariableAssignment_1"
    // InternalSpinCAD.g:14650:1: rule__IsEqualTo__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__IsEqualTo__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14654:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14655:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14655:1: ( RULE_ID )
            // InternalSpinCAD.g:14656:1: RULE_ID
            {
             before(grammarAccess.getIsEqualToAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsEqualToAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__VariableAssignment_1"


    // $ANTLR start "rule__IsEqualTo__ValueAssignment_2"
    // InternalSpinCAD.g:14665:1: rule__IsEqualTo__ValueAssignment_2 : ( RULE_INT ) ;
    public final void rule__IsEqualTo__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14669:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14670:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14670:1: ( RULE_INT )
            // InternalSpinCAD.g:14671:1: RULE_INT
            {
             before(grammarAccess.getIsEqualToAccess().getValueINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getIsEqualToAccess().getValueINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsEqualTo__ValueAssignment_2"


    // $ANTLR start "rule__IsTrue__VariableAssignment_1"
    // InternalSpinCAD.g:14680:1: rule__IsTrue__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__IsTrue__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14684:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14685:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14685:1: ( RULE_ID )
            // InternalSpinCAD.g:14686:1: RULE_ID
            {
             before(grammarAccess.getIsTrueAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsTrueAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsTrue__VariableAssignment_1"


    // $ANTLR start "rule__IsOr__Var1Assignment_1"
    // InternalSpinCAD.g:14695:1: rule__IsOr__Var1Assignment_1 : ( RULE_ID ) ;
    public final void rule__IsOr__Var1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14699:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14700:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14700:1: ( RULE_ID )
            // InternalSpinCAD.g:14701:1: RULE_ID
            {
             before(grammarAccess.getIsOrAccess().getVar1IDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsOrAccess().getVar1IDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Var1Assignment_1"


    // $ANTLR start "rule__IsOr__Var2Assignment_2"
    // InternalSpinCAD.g:14710:1: rule__IsOr__Var2Assignment_2 : ( RULE_ID ) ;
    public final void rule__IsOr__Var2Assignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14714:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14715:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14715:1: ( RULE_ID )
            // InternalSpinCAD.g:14716:1: RULE_ID
            {
             before(grammarAccess.getIsOrAccess().getVar2IDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getIsOrAccess().getVar2IDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__Var2Assignment_2"


    // $ANTLR start "rule__IsOr__ValueAssignment_3"
    // InternalSpinCAD.g:14725:1: rule__IsOr__ValueAssignment_3 : ( ruleBOOLEAN ) ;
    public final void rule__IsOr__ValueAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14729:1: ( ( ruleBOOLEAN ) )
            // InternalSpinCAD.g:14730:1: ( ruleBOOLEAN )
            {
            // InternalSpinCAD.g:14730:1: ( ruleBOOLEAN )
            // InternalSpinCAD.g:14731:1: ruleBOOLEAN
            {
             before(grammarAccess.getIsOrAccess().getValueBOOLEANParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleBOOLEAN();

            state._fsp--;

             after(grammarAccess.getIsOrAccess().getValueBOOLEANParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IsOr__ValueAssignment_3"


    // $ANTLR start "rule__GetInputDefault__LabelAssignment_1"
    // InternalSpinCAD.g:14740:1: rule__GetInputDefault__LabelAssignment_1 : ( RULE_ID ) ;
    public final void rule__GetInputDefault__LabelAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14744:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14745:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14745:1: ( RULE_ID )
            // InternalSpinCAD.g:14746:1: RULE_ID
            {
             before(grammarAccess.getGetInputDefaultAccess().getLabelIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetInputDefaultAccess().getLabelIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__LabelAssignment_1"


    // $ANTLR start "rule__GetInputDefault__VariableAssignment_2"
    // InternalSpinCAD.g:14755:1: rule__GetInputDefault__VariableAssignment_2 : ( RULE_ID ) ;
    public final void rule__GetInputDefault__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14759:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14760:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14760:1: ( RULE_ID )
            // InternalSpinCAD.g:14761:1: RULE_ID
            {
             before(grammarAccess.getGetInputDefaultAccess().getVariableIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetInputDefaultAccess().getVariableIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__VariableAssignment_2"


    // $ANTLR start "rule__GetInputDefault__ScaleAssignment_3"
    // InternalSpinCAD.g:14770:1: rule__GetInputDefault__ScaleAssignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__GetInputDefault__ScaleAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14774:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14775:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14775:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14776:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getGetInputDefaultAccess().getScaleSPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getGetInputDefaultAccess().getScaleSPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__ScaleAssignment_3"


    // $ANTLR start "rule__GetInputDefault__DefaultValAssignment_4"
    // InternalSpinCAD.g:14785:1: rule__GetInputDefault__DefaultValAssignment_4 : ( ruleSPINDOUBLE ) ;
    public final void rule__GetInputDefault__DefaultValAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14789:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14790:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14790:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14791:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getGetInputDefaultAccess().getDefaultValSPINDOUBLEParserRuleCall_4_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getGetInputDefaultAccess().getDefaultValSPINDOUBLEParserRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetInputDefault__DefaultValAssignment_4"


    // $ANTLR start "rule__GetDelayScaleControl__RatioAssignment_1"
    // InternalSpinCAD.g:14800:1: rule__GetDelayScaleControl__RatioAssignment_1 : ( RULE_ID ) ;
    public final void rule__GetDelayScaleControl__RatioAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14804:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14805:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14805:1: ( RULE_ID )
            // InternalSpinCAD.g:14806:1: RULE_ID
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getRatioIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetDelayScaleControlAccess().getRatioIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__RatioAssignment_1"


    // $ANTLR start "rule__GetDelayScaleControl__LengthAssignment_2"
    // InternalSpinCAD.g:14815:1: rule__GetDelayScaleControl__LengthAssignment_2 : ( RULE_ID ) ;
    public final void rule__GetDelayScaleControl__LengthAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14819:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14820:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14820:1: ( RULE_ID )
            // InternalSpinCAD.g:14821:1: RULE_ID
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getLengthIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetDelayScaleControlAccess().getLengthIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__LengthAssignment_2"


    // $ANTLR start "rule__GetDelayScaleControl__OffsetAssignment_3"
    // InternalSpinCAD.g:14830:1: rule__GetDelayScaleControl__OffsetAssignment_3 : ( RULE_ID ) ;
    public final void rule__GetDelayScaleControl__OffsetAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14834:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14835:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14835:1: ( RULE_ID )
            // InternalSpinCAD.g:14836:1: RULE_ID
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getOffsetIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetDelayScaleControlAccess().getOffsetIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__OffsetAssignment_3"


    // $ANTLR start "rule__GetDelayScaleControl__ControlAssignment_4"
    // InternalSpinCAD.g:14845:1: rule__GetDelayScaleControl__ControlAssignment_4 : ( RULE_ID ) ;
    public final void rule__GetDelayScaleControl__ControlAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14849:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14850:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14850:1: ( RULE_ID )
            // InternalSpinCAD.g:14851:1: RULE_ID
            {
             before(grammarAccess.getGetDelayScaleControlAccess().getControlIDTerminalRuleCall_4_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetDelayScaleControlAccess().getControlIDTerminalRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetDelayScaleControl__ControlAssignment_4"


    // $ANTLR start "rule__ReadChorusTap__LfoAssignment_1"
    // InternalSpinCAD.g:14860:1: rule__ReadChorusTap__LfoAssignment_1 : ( RULE_ID ) ;
    public final void rule__ReadChorusTap__LfoAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14864:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14865:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14865:1: ( RULE_ID )
            // InternalSpinCAD.g:14866:1: RULE_ID
            {
             before(grammarAccess.getReadChorusTapAccess().getLfoIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getLfoIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__LfoAssignment_1"


    // $ANTLR start "rule__ReadChorusTap__PhaseAssignment_2"
    // InternalSpinCAD.g:14875:1: rule__ReadChorusTap__PhaseAssignment_2 : ( RULE_INT ) ;
    public final void rule__ReadChorusTap__PhaseAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14879:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:14880:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:14880:1: ( RULE_INT )
            // InternalSpinCAD.g:14881:1: RULE_INT
            {
             before(grammarAccess.getReadChorusTapAccess().getPhaseINTTerminalRuleCall_2_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getPhaseINTTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__PhaseAssignment_2"


    // $ANTLR start "rule__ReadChorusTap__RatioAssignment_3"
    // InternalSpinCAD.g:14890:1: rule__ReadChorusTap__RatioAssignment_3 : ( RULE_ID ) ;
    public final void rule__ReadChorusTap__RatioAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14894:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14895:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14895:1: ( RULE_ID )
            // InternalSpinCAD.g:14896:1: RULE_ID
            {
             before(grammarAccess.getReadChorusTapAccess().getRatioIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getRatioIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__RatioAssignment_3"


    // $ANTLR start "rule__ReadChorusTap__LengthAssignment_4"
    // InternalSpinCAD.g:14905:1: rule__ReadChorusTap__LengthAssignment_4 : ( RULE_ID ) ;
    public final void rule__ReadChorusTap__LengthAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14909:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14910:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14910:1: ( RULE_ID )
            // InternalSpinCAD.g:14911:1: RULE_ID
            {
             before(grammarAccess.getReadChorusTapAccess().getLengthIDTerminalRuleCall_4_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getLengthIDTerminalRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__LengthAssignment_4"


    // $ANTLR start "rule__ReadChorusTap__OffsetAssignment_5"
    // InternalSpinCAD.g:14920:1: rule__ReadChorusTap__OffsetAssignment_5 : ( RULE_ID ) ;
    public final void rule__ReadChorusTap__OffsetAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14924:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14925:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14925:1: ( RULE_ID )
            // InternalSpinCAD.g:14926:1: RULE_ID
            {
             before(grammarAccess.getReadChorusTapAccess().getOffsetIDTerminalRuleCall_5_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getReadChorusTapAccess().getOffsetIDTerminalRuleCall_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadChorusTap__OffsetAssignment_5"


    // $ANTLR start "rule__GetSamplesFromRatio__VariableAssignment_1"
    // InternalSpinCAD.g:14935:1: rule__GetSamplesFromRatio__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__GetSamplesFromRatio__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14939:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14940:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14940:1: ( RULE_ID )
            // InternalSpinCAD.g:14941:1: RULE_ID
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getGetSamplesFromRatioAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__VariableAssignment_1"


    // $ANTLR start "rule__GetSamplesFromRatio__RatioAssignment_2"
    // InternalSpinCAD.g:14950:1: rule__GetSamplesFromRatio__RatioAssignment_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__GetSamplesFromRatio__RatioAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14954:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14955:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14955:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14956:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getRatioSPINDOUBLEParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getGetSamplesFromRatioAccess().getRatioSPINDOUBLEParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__RatioAssignment_2"


    // $ANTLR start "rule__GetSamplesFromRatio__LengthAssignment_3"
    // InternalSpinCAD.g:14965:1: rule__GetSamplesFromRatio__LengthAssignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__GetSamplesFromRatio__LengthAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14969:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:14970:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:14970:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:14971:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getGetSamplesFromRatioAccess().getLengthSPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getGetSamplesFromRatioAccess().getLengthSPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__GetSamplesFromRatio__LengthAssignment_3"


    // $ANTLR start "rule__SemitonesToRmpRate__VariableAssignment_1"
    // InternalSpinCAD.g:14980:1: rule__SemitonesToRmpRate__VariableAssignment_1 : ( RULE_ID ) ;
    public final void rule__SemitonesToRmpRate__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14984:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:14985:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:14985:1: ( RULE_ID )
            // InternalSpinCAD.g:14986:1: RULE_ID
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getVariableIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSemitonesToRmpRateAccess().getVariableIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__VariableAssignment_1"


    // $ANTLR start "rule__SemitonesToRmpRate__SemitonesAssignment_2"
    // InternalSpinCAD.g:14995:1: rule__SemitonesToRmpRate__SemitonesAssignment_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__SemitonesToRmpRate__SemitonesAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:14999:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15000:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15000:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15001:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesSPINDOUBLEParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getSemitonesToRmpRateAccess().getSemitonesSPINDOUBLEParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SemitonesToRmpRate__SemitonesAssignment_2"


    // $ANTLR start "rule__SetOutputPin__PinNameAssignment_1"
    // InternalSpinCAD.g:15010:1: rule__SetOutputPin__PinNameAssignment_1 : ( ( rule__SetOutputPin__PinNameAlternatives_1_0 ) ) ;
    public final void rule__SetOutputPin__PinNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15014:1: ( ( ( rule__SetOutputPin__PinNameAlternatives_1_0 ) ) )
            // InternalSpinCAD.g:15015:1: ( ( rule__SetOutputPin__PinNameAlternatives_1_0 ) )
            {
            // InternalSpinCAD.g:15015:1: ( ( rule__SetOutputPin__PinNameAlternatives_1_0 ) )
            // InternalSpinCAD.g:15016:1: ( rule__SetOutputPin__PinNameAlternatives_1_0 )
            {
             before(grammarAccess.getSetOutputPinAccess().getPinNameAlternatives_1_0()); 
            // InternalSpinCAD.g:15017:1: ( rule__SetOutputPin__PinNameAlternatives_1_0 )
            // InternalSpinCAD.g:15017:2: rule__SetOutputPin__PinNameAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SetOutputPin__PinNameAlternatives_1_0();

            state._fsp--;


            }

             after(grammarAccess.getSetOutputPinAccess().getPinNameAlternatives_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__PinNameAssignment_1"


    // $ANTLR start "rule__SetOutputPin__VarNameAssignment_2"
    // InternalSpinCAD.g:15026:1: rule__SetOutputPin__VarNameAssignment_2 : ( RULE_ID ) ;
    public final void rule__SetOutputPin__VarNameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15030:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15031:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15031:1: ( RULE_ID )
            // InternalSpinCAD.g:15032:1: RULE_ID
            {
             before(grammarAccess.getSetOutputPinAccess().getVarNameIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSetOutputPinAccess().getVarNameIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetOutputPin__VarNameAssignment_2"


    // $ANTLR start "rule__MinusDouble__VarNameAssignment_1"
    // InternalSpinCAD.g:15041:1: rule__MinusDouble__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__MinusDouble__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15045:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15046:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15046:1: ( RULE_ID )
            // InternalSpinCAD.g:15047:1: RULE_ID
            {
             before(grammarAccess.getMinusDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMinusDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__VarNameAssignment_1"


    // $ANTLR start "rule__MinusDouble__HighAssignment_2"
    // InternalSpinCAD.g:15056:1: rule__MinusDouble__HighAssignment_2 : ( RULE_ID ) ;
    public final void rule__MinusDouble__HighAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15060:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15061:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15061:1: ( RULE_ID )
            // InternalSpinCAD.g:15062:1: RULE_ID
            {
             before(grammarAccess.getMinusDoubleAccess().getHighIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMinusDoubleAccess().getHighIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__HighAssignment_2"


    // $ANTLR start "rule__MinusDouble__LowAssignment_3"
    // InternalSpinCAD.g:15071:1: rule__MinusDouble__LowAssignment_3 : ( RULE_ID ) ;
    public final void rule__MinusDouble__LowAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15075:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15076:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15076:1: ( RULE_ID )
            // InternalSpinCAD.g:15077:1: RULE_ID
            {
             before(grammarAccess.getMinusDoubleAccess().getLowIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMinusDoubleAccess().getLowIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MinusDouble__LowAssignment_3"


    // $ANTLR start "rule__DivideDouble__VarNameAssignment_1"
    // InternalSpinCAD.g:15086:1: rule__DivideDouble__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__DivideDouble__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15090:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15091:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15091:1: ( RULE_ID )
            // InternalSpinCAD.g:15092:1: RULE_ID
            {
             before(grammarAccess.getDivideDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getDivideDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__VarNameAssignment_1"


    // $ANTLR start "rule__DivideDouble__HighAssignment_2"
    // InternalSpinCAD.g:15101:1: rule__DivideDouble__HighAssignment_2 : ( RULE_ID ) ;
    public final void rule__DivideDouble__HighAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15105:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15106:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15106:1: ( RULE_ID )
            // InternalSpinCAD.g:15107:1: RULE_ID
            {
             before(grammarAccess.getDivideDoubleAccess().getHighIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getDivideDoubleAccess().getHighIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__HighAssignment_2"


    // $ANTLR start "rule__DivideDouble__LowAssignment_3"
    // InternalSpinCAD.g:15116:1: rule__DivideDouble__LowAssignment_3 : ( RULE_ID ) ;
    public final void rule__DivideDouble__LowAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15120:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15121:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15121:1: ( RULE_ID )
            // InternalSpinCAD.g:15122:1: RULE_ID
            {
             before(grammarAccess.getDivideDoubleAccess().getLowIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getDivideDoubleAccess().getLowIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideDouble__LowAssignment_3"


    // $ANTLR start "rule__Equals__VarNameAssignment_1"
    // InternalSpinCAD.g:15131:1: rule__Equals__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__Equals__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15135:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15136:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15136:1: ( RULE_ID )
            // InternalSpinCAD.g:15137:1: RULE_ID
            {
             before(grammarAccess.getEqualsAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getEqualsAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__VarNameAssignment_1"


    // $ANTLR start "rule__Equals__ValueAssignment_2"
    // InternalSpinCAD.g:15146:1: rule__Equals__ValueAssignment_2 : ( ruleSPINDOUBLE ) ;
    public final void rule__Equals__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15150:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15151:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15151:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15152:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getEqualsAccess().getValueSPINDOUBLEParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getEqualsAccess().getValueSPINDOUBLEParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Equals__ValueAssignment_2"


    // $ANTLR start "rule__EqualsBool__VarNameAssignment_1"
    // InternalSpinCAD.g:15161:1: rule__EqualsBool__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__EqualsBool__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15165:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15166:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15166:1: ( RULE_ID )
            // InternalSpinCAD.g:15167:1: RULE_ID
            {
             before(grammarAccess.getEqualsBoolAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getEqualsBoolAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__VarNameAssignment_1"


    // $ANTLR start "rule__EqualsBool__ValueAssignment_2"
    // InternalSpinCAD.g:15176:1: rule__EqualsBool__ValueAssignment_2 : ( ruleBOOLEAN ) ;
    public final void rule__EqualsBool__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15180:1: ( ( ruleBOOLEAN ) )
            // InternalSpinCAD.g:15181:1: ( ruleBOOLEAN )
            {
            // InternalSpinCAD.g:15181:1: ( ruleBOOLEAN )
            // InternalSpinCAD.g:15182:1: ruleBOOLEAN
            {
             before(grammarAccess.getEqualsBoolAccess().getValueBOOLEANParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleBOOLEAN();

            state._fsp--;

             after(grammarAccess.getEqualsBoolAccess().getValueBOOLEANParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualsBool__ValueAssignment_2"


    // $ANTLR start "rule__DivideInt__VarNameAssignment_1"
    // InternalSpinCAD.g:15191:1: rule__DivideInt__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__DivideInt__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15195:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15196:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15196:1: ( RULE_ID )
            // InternalSpinCAD.g:15197:1: RULE_ID
            {
             before(grammarAccess.getDivideIntAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getDivideIntAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__VarNameAssignment_1"


    // $ANTLR start "rule__DivideInt__HighAssignment_2"
    // InternalSpinCAD.g:15206:1: rule__DivideInt__HighAssignment_2 : ( RULE_ID ) ;
    public final void rule__DivideInt__HighAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15210:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15211:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15211:1: ( RULE_ID )
            // InternalSpinCAD.g:15212:1: RULE_ID
            {
             before(grammarAccess.getDivideIntAccess().getHighIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getDivideIntAccess().getHighIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__HighAssignment_2"


    // $ANTLR start "rule__DivideInt__LowAssignment_3"
    // InternalSpinCAD.g:15221:1: rule__DivideInt__LowAssignment_3 : ( RULE_INT ) ;
    public final void rule__DivideInt__LowAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15225:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:15226:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:15226:1: ( RULE_INT )
            // InternalSpinCAD.g:15227:1: RULE_INT
            {
             before(grammarAccess.getDivideIntAccess().getLowINTTerminalRuleCall_3_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getDivideIntAccess().getLowINTTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DivideInt__LowAssignment_3"


    // $ANTLR start "rule__MultiplyDouble__VarNameAssignment_1"
    // InternalSpinCAD.g:15236:1: rule__MultiplyDouble__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__MultiplyDouble__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15240:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15241:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15241:1: ( RULE_ID )
            // InternalSpinCAD.g:15242:1: RULE_ID
            {
             before(grammarAccess.getMultiplyDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMultiplyDoubleAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__VarNameAssignment_1"


    // $ANTLR start "rule__MultiplyDouble__HighAssignment_2"
    // InternalSpinCAD.g:15251:1: rule__MultiplyDouble__HighAssignment_2 : ( RULE_ID ) ;
    public final void rule__MultiplyDouble__HighAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15255:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15256:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15256:1: ( RULE_ID )
            // InternalSpinCAD.g:15257:1: RULE_ID
            {
             before(grammarAccess.getMultiplyDoubleAccess().getHighIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMultiplyDoubleAccess().getHighIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__HighAssignment_2"


    // $ANTLR start "rule__MultiplyDouble__LowAssignment_3"
    // InternalSpinCAD.g:15266:1: rule__MultiplyDouble__LowAssignment_3 : ( RULE_ID ) ;
    public final void rule__MultiplyDouble__LowAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15270:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15271:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15271:1: ( RULE_ID )
            // InternalSpinCAD.g:15272:1: RULE_ID
            {
             before(grammarAccess.getMultiplyDoubleAccess().getLowIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMultiplyDoubleAccess().getLowIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDouble__LowAssignment_3"


    // $ANTLR start "rule__SetChorusWidth__VarNameAssignment_1"
    // InternalSpinCAD.g:15281:1: rule__SetChorusWidth__VarNameAssignment_1 : ( RULE_ID ) ;
    public final void rule__SetChorusWidth__VarNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15285:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15286:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15286:1: ( RULE_ID )
            // InternalSpinCAD.g:15287:1: RULE_ID
            {
             before(grammarAccess.getSetChorusWidthAccess().getVarNameIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSetChorusWidthAccess().getVarNameIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__VarNameAssignment_1"


    // $ANTLR start "rule__SetChorusWidth__LengthAssignment_2"
    // InternalSpinCAD.g:15296:1: rule__SetChorusWidth__LengthAssignment_2 : ( RULE_ID ) ;
    public final void rule__SetChorusWidth__LengthAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15300:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15301:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15301:1: ( RULE_ID )
            // InternalSpinCAD.g:15302:1: RULE_ID
            {
             before(grammarAccess.getSetChorusWidthAccess().getLengthIDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSetChorusWidthAccess().getLengthIDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__LengthAssignment_2"


    // $ANTLR start "rule__SetChorusWidth__ScaleAssignment_3"
    // InternalSpinCAD.g:15311:1: rule__SetChorusWidth__ScaleAssignment_3 : ( RULE_ID ) ;
    public final void rule__SetChorusWidth__ScaleAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15315:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15316:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15316:1: ( RULE_ID )
            // InternalSpinCAD.g:15317:1: RULE_ID
            {
             before(grammarAccess.getSetChorusWidthAccess().getScaleIDTerminalRuleCall_3_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSetChorusWidthAccess().getScaleIDTerminalRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetChorusWidth__ScaleAssignment_3"


    // $ANTLR start "rule__ReadRegister__Arg1Assignment_1"
    // InternalSpinCAD.g:15326:1: rule__ReadRegister__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__ReadRegister__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15330:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15331:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15331:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15332:1: ruleSPINREGISTER
            {
             before(grammarAccess.getReadRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getReadRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Arg1Assignment_1"


    // $ANTLR start "rule__ReadRegister__Arg2Assignment_3"
    // InternalSpinCAD.g:15341:1: rule__ReadRegister__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__ReadRegister__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15345:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15346:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15346:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15347:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getReadRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getReadRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegister__Arg2Assignment_3"


    // $ANTLR start "rule__WriteRegisterLowshelf__Arg1Assignment_1"
    // InternalSpinCAD.g:15356:1: rule__WriteRegisterLowshelf__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__WriteRegisterLowshelf__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15360:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15361:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15361:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15362:1: ruleSPINREGISTER
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getWriteRegisterLowshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Arg1Assignment_1"


    // $ANTLR start "rule__WriteRegisterLowshelf__Arg2Assignment_3"
    // InternalSpinCAD.g:15371:1: rule__WriteRegisterLowshelf__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__WriteRegisterLowshelf__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15375:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15376:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15376:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15377:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getWriteRegisterLowshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getWriteRegisterLowshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterLowshelf__Arg2Assignment_3"


    // $ANTLR start "rule__WriteRegisterHighshelf__Arg1Assignment_1"
    // InternalSpinCAD.g:15386:1: rule__WriteRegisterHighshelf__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__WriteRegisterHighshelf__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15390:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15391:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15391:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15392:1: ruleSPINREGISTER
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getWriteRegisterHighshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Arg1Assignment_1"


    // $ANTLR start "rule__WriteRegisterHighshelf__Arg2Assignment_3"
    // InternalSpinCAD.g:15401:1: rule__WriteRegisterHighshelf__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__WriteRegisterHighshelf__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15405:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15406:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15406:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15407:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getWriteRegisterHighshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getWriteRegisterHighshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegisterHighshelf__Arg2Assignment_3"


    // $ANTLR start "rule__WriteRegister__Arg1Assignment_1"
    // InternalSpinCAD.g:15416:1: rule__WriteRegister__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__WriteRegister__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15420:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15421:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15421:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15422:1: ruleSPINREGISTER
            {
             before(grammarAccess.getWriteRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getWriteRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Arg1Assignment_1"


    // $ANTLR start "rule__WriteRegister__Arg2Assignment_3"
    // InternalSpinCAD.g:15431:1: rule__WriteRegister__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__WriteRegister__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15435:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15436:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15436:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15437:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getWriteRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getWriteRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteRegister__Arg2Assignment_3"


    // $ANTLR start "rule__Maxx__Arg1Assignment_1"
    // InternalSpinCAD.g:15446:1: rule__Maxx__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__Maxx__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15450:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15451:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15451:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15452:1: ruleSPINREGISTER
            {
             before(grammarAccess.getMaxxAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getMaxxAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Arg1Assignment_1"


    // $ANTLR start "rule__Maxx__Arg2Assignment_3"
    // InternalSpinCAD.g:15461:1: rule__Maxx__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__Maxx__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15465:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15466:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15466:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15467:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getMaxxAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getMaxxAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Maxx__Arg2Assignment_3"


    // $ANTLR start "rule__ReadRegisterFilter__Arg1Assignment_1"
    // InternalSpinCAD.g:15476:1: rule__ReadRegisterFilter__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__ReadRegisterFilter__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15480:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15481:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15481:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15482:1: ruleSPINREGISTER
            {
             before(grammarAccess.getReadRegisterFilterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getReadRegisterFilterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Arg1Assignment_1"


    // $ANTLR start "rule__ReadRegisterFilter__Arg2Assignment_3"
    // InternalSpinCAD.g:15491:1: rule__ReadRegisterFilter__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__ReadRegisterFilter__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15495:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15496:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15496:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15497:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getReadRegisterFilterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getReadRegisterFilterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadRegisterFilter__Arg2Assignment_3"


    // $ANTLR start "rule__Mulx__Arg1Assignment_1"
    // InternalSpinCAD.g:15506:1: rule__Mulx__Arg1Assignment_1 : ( RULE_ID ) ;
    public final void rule__Mulx__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15510:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15511:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15511:1: ( RULE_ID )
            // InternalSpinCAD.g:15512:1: RULE_ID
            {
             before(grammarAccess.getMulxAccess().getArg1IDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getMulxAccess().getArg1IDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Mulx__Arg1Assignment_1"


    // $ANTLR start "rule__Ldax__Arg1Assignment_1"
    // InternalSpinCAD.g:15521:1: rule__Ldax__Arg1Assignment_1 : ( RULE_ID ) ;
    public final void rule__Ldax__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15525:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15526:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15526:1: ( RULE_ID )
            // InternalSpinCAD.g:15527:1: RULE_ID
            {
             before(grammarAccess.getLdaxAccess().getArg1IDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getLdaxAccess().getArg1IDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Ldax__Arg1Assignment_1"


    // $ANTLR start "rule__Exp__Arg1Assignment_1"
    // InternalSpinCAD.g:15536:1: rule__Exp__Arg1Assignment_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__Exp__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15540:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15541:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15541:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15542:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getExpAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getExpAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Arg1Assignment_1"


    // $ANTLR start "rule__Exp__Arg2Assignment_3"
    // InternalSpinCAD.g:15551:1: rule__Exp__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__Exp__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15555:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15556:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15556:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15557:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getExpAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getExpAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Exp__Arg2Assignment_3"


    // $ANTLR start "rule__Log__Arg1Assignment_1"
    // InternalSpinCAD.g:15566:1: rule__Log__Arg1Assignment_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__Log__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15570:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15571:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15571:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15572:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Arg1Assignment_1"


    // $ANTLR start "rule__Log__Arg2Assignment_3"
    // InternalSpinCAD.g:15581:1: rule__Log__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__Log__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15585:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15586:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15586:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15587:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLogAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLogAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Log__Arg2Assignment_3"


    // $ANTLR start "rule__ScaleOffset__Arg1Assignment_1"
    // InternalSpinCAD.g:15596:1: rule__ScaleOffset__Arg1Assignment_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__ScaleOffset__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15600:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15601:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15601:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15602:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getScaleOffsetAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getScaleOffsetAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Arg1Assignment_1"


    // $ANTLR start "rule__ScaleOffset__Arg2Assignment_3"
    // InternalSpinCAD.g:15611:1: rule__ScaleOffset__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__ScaleOffset__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15615:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15616:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15616:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15617:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getScaleOffsetAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getScaleOffsetAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ScaleOffset__Arg2Assignment_3"


    // $ANTLR start "rule__WriteDelay__Arg1Assignment_1"
    // InternalSpinCAD.g:15626:1: rule__WriteDelay__Arg1Assignment_1 : ( ruleSPINMEM ) ;
    public final void rule__WriteDelay__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15630:1: ( ( ruleSPINMEM ) )
            // InternalSpinCAD.g:15631:1: ( ruleSPINMEM )
            {
            // InternalSpinCAD.g:15631:1: ( ruleSPINMEM )
            // InternalSpinCAD.g:15632:1: ruleSPINMEM
            {
             before(grammarAccess.getWriteDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINMEM();

            state._fsp--;

             after(grammarAccess.getWriteDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Arg1Assignment_1"


    // $ANTLR start "rule__WriteDelay__Arg2Assignment_3"
    // InternalSpinCAD.g:15641:1: rule__WriteDelay__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__WriteDelay__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15645:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15646:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15646:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15647:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getWriteDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getWriteDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteDelay__Arg2Assignment_3"


    // $ANTLR start "rule__WriteAllpass__Arg1Assignment_1"
    // InternalSpinCAD.g:15656:1: rule__WriteAllpass__Arg1Assignment_1 : ( ruleSPINMEM ) ;
    public final void rule__WriteAllpass__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15660:1: ( ( ruleSPINMEM ) )
            // InternalSpinCAD.g:15661:1: ( ruleSPINMEM )
            {
            // InternalSpinCAD.g:15661:1: ( ruleSPINMEM )
            // InternalSpinCAD.g:15662:1: ruleSPINMEM
            {
             before(grammarAccess.getWriteAllpassAccess().getArg1SPINMEMParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINMEM();

            state._fsp--;

             after(grammarAccess.getWriteAllpassAccess().getArg1SPINMEMParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Arg1Assignment_1"


    // $ANTLR start "rule__WriteAllpass__Arg2Assignment_3"
    // InternalSpinCAD.g:15671:1: rule__WriteAllpass__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__WriteAllpass__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15675:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15676:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15676:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15677:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getWriteAllpassAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getWriteAllpassAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__WriteAllpass__Arg2Assignment_3"


    // $ANTLR start "rule__ReadDelay__Arg1Assignment_1"
    // InternalSpinCAD.g:15686:1: rule__ReadDelay__Arg1Assignment_1 : ( ruleSPINMEM ) ;
    public final void rule__ReadDelay__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15690:1: ( ( ruleSPINMEM ) )
            // InternalSpinCAD.g:15691:1: ( ruleSPINMEM )
            {
            // InternalSpinCAD.g:15691:1: ( ruleSPINMEM )
            // InternalSpinCAD.g:15692:1: ruleSPINMEM
            {
             before(grammarAccess.getReadDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINMEM();

            state._fsp--;

             after(grammarAccess.getReadDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Arg1Assignment_1"


    // $ANTLR start "rule__ReadDelay__Arg2Assignment_3"
    // InternalSpinCAD.g:15701:1: rule__ReadDelay__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__ReadDelay__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15705:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15706:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15706:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15707:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getReadDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getReadDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelay__Arg2Assignment_3"


    // $ANTLR start "rule__LoadSinLFO__Arg1Assignment_1"
    // InternalSpinCAD.g:15716:1: rule__LoadSinLFO__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__LoadSinLFO__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15720:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15721:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15721:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15722:1: ruleSPINREGISTER
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getLoadSinLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Arg1Assignment_1"


    // $ANTLR start "rule__LoadSinLFO__Arg2Assignment_3"
    // InternalSpinCAD.g:15731:1: rule__LoadSinLFO__Arg2Assignment_3 : ( ruleSPINDOUBLE ) ;
    public final void rule__LoadSinLFO__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15735:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15736:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15736:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15737:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLoadSinLFOAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Arg2Assignment_3"


    // $ANTLR start "rule__LoadSinLFO__Arg3Assignment_5"
    // InternalSpinCAD.g:15746:1: rule__LoadSinLFO__Arg3Assignment_5 : ( ruleSPINDOUBLE ) ;
    public final void rule__LoadSinLFO__Arg3Assignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15750:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15751:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15751:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15752:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getLoadSinLFOAccess().getArg3SPINDOUBLEParserRuleCall_5_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getLoadSinLFOAccess().getArg3SPINDOUBLEParserRuleCall_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadSinLFO__Arg3Assignment_5"


    // $ANTLR start "rule__LoadRampLFO__Arg1Assignment_1"
    // InternalSpinCAD.g:15761:1: rule__LoadRampLFO__Arg1Assignment_1 : ( ruleSPINREGISTER ) ;
    public final void rule__LoadRampLFO__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15765:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15766:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15766:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15767:1: ruleSPINREGISTER
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getLoadRampLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Arg1Assignment_1"


    // $ANTLR start "rule__LoadRampLFO__Arg2Assignment_3"
    // InternalSpinCAD.g:15776:1: rule__LoadRampLFO__Arg2Assignment_3 : ( ruleSPINREGISTER ) ;
    public final void rule__LoadRampLFO__Arg2Assignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15780:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15781:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15781:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15782:1: ruleSPINREGISTER
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg2SPINREGISTERParserRuleCall_3_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getLoadRampLFOAccess().getArg2SPINREGISTERParserRuleCall_3_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Arg2Assignment_3"


    // $ANTLR start "rule__LoadRampLFO__Arg3Assignment_5"
    // InternalSpinCAD.g:15791:1: rule__LoadRampLFO__Arg3Assignment_5 : ( ruleSPINREGISTER ) ;
    public final void rule__LoadRampLFO__Arg3Assignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15795:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15796:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15796:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15797:1: ruleSPINREGISTER
            {
             before(grammarAccess.getLoadRampLFOAccess().getArg3SPINREGISTERParserRuleCall_5_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getLoadRampLFOAccess().getArg3SPINREGISTERParserRuleCall_5_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadRampLFO__Arg3Assignment_5"


    // $ANTLR start "rule__ChorusReadDelay__Arg1Assignment_2"
    // InternalSpinCAD.g:15806:1: rule__ChorusReadDelay__Arg1Assignment_2 : ( ruleSPINREGISTER ) ;
    public final void rule__ChorusReadDelay__Arg1Assignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15810:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15811:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15811:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15812:1: ruleSPINREGISTER
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getChorusReadDelayAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Arg1Assignment_2"


    // $ANTLR start "rule__ChorusReadDelay__Arg2Assignment_4"
    // InternalSpinCAD.g:15821:1: rule__ChorusReadDelay__Arg2Assignment_4 : ( ruleSPINCHOREGFLAGS ) ;
    public final void rule__ChorusReadDelay__Arg2Assignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15825:1: ( ( ruleSPINCHOREGFLAGS ) )
            // InternalSpinCAD.g:15826:1: ( ruleSPINCHOREGFLAGS )
            {
            // InternalSpinCAD.g:15826:1: ( ruleSPINCHOREGFLAGS )
            // InternalSpinCAD.g:15827:1: ruleSPINCHOREGFLAGS
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINCHOREGFLAGS();

            state._fsp--;

             after(grammarAccess.getChorusReadDelayAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Arg2Assignment_4"


    // $ANTLR start "rule__ChorusReadDelay__Arg3Assignment_6"
    // InternalSpinCAD.g:15836:1: rule__ChorusReadDelay__Arg3Assignment_6 : ( ruleSPINMEM ) ;
    public final void rule__ChorusReadDelay__Arg3Assignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15840:1: ( ( ruleSPINMEM ) )
            // InternalSpinCAD.g:15841:1: ( ruleSPINMEM )
            {
            // InternalSpinCAD.g:15841:1: ( ruleSPINMEM )
            // InternalSpinCAD.g:15842:1: ruleSPINMEM
            {
             before(grammarAccess.getChorusReadDelayAccess().getArg3SPINMEMParserRuleCall_6_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINMEM();

            state._fsp--;

             after(grammarAccess.getChorusReadDelayAccess().getArg3SPINMEMParserRuleCall_6_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadDelay__Arg3Assignment_6"


    // $ANTLR start "rule__ChorusReadValue__Arg1Assignment_2"
    // InternalSpinCAD.g:15851:1: rule__ChorusReadValue__Arg1Assignment_2 : ( ruleSPINREGISTER ) ;
    public final void rule__ChorusReadValue__Arg1Assignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15855:1: ( ( ruleSPINREGISTER ) )
            // InternalSpinCAD.g:15856:1: ( ruleSPINREGISTER )
            {
            // InternalSpinCAD.g:15856:1: ( ruleSPINREGISTER )
            // InternalSpinCAD.g:15857:1: ruleSPINREGISTER
            {
             before(grammarAccess.getChorusReadValueAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINREGISTER();

            state._fsp--;

             after(grammarAccess.getChorusReadValueAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusReadValue__Arg1Assignment_2"


    // $ANTLR start "rule__ChorusScaleOffset__Arg1Assignment_2"
    // InternalSpinCAD.g:15866:1: rule__ChorusScaleOffset__Arg1Assignment_2 : ( RULE_ID ) ;
    public final void rule__ChorusScaleOffset__Arg1Assignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15870:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15871:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15871:1: ( RULE_ID )
            // InternalSpinCAD.g:15872:1: RULE_ID
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg1IDTerminalRuleCall_2_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getChorusScaleOffsetAccess().getArg1IDTerminalRuleCall_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Arg1Assignment_2"


    // $ANTLR start "rule__ChorusScaleOffset__Arg2Assignment_4"
    // InternalSpinCAD.g:15881:1: rule__ChorusScaleOffset__Arg2Assignment_4 : ( ruleSPINCHOREGFLAGS ) ;
    public final void rule__ChorusScaleOffset__Arg2Assignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15885:1: ( ( ruleSPINCHOREGFLAGS ) )
            // InternalSpinCAD.g:15886:1: ( ruleSPINCHOREGFLAGS )
            {
            // InternalSpinCAD.g:15886:1: ( ruleSPINCHOREGFLAGS )
            // InternalSpinCAD.g:15887:1: ruleSPINCHOREGFLAGS
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINCHOREGFLAGS();

            state._fsp--;

             after(grammarAccess.getChorusScaleOffsetAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Arg2Assignment_4"


    // $ANTLR start "rule__ChorusScaleOffset__Arg3Assignment_6"
    // InternalSpinCAD.g:15896:1: rule__ChorusScaleOffset__Arg3Assignment_6 : ( ruleSPINDOUBLE ) ;
    public final void rule__ChorusScaleOffset__Arg3Assignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15900:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15901:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15901:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15902:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getChorusScaleOffsetAccess().getArg3SPINDOUBLEParserRuleCall_6_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getChorusScaleOffsetAccess().getArg3SPINDOUBLEParserRuleCall_6_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChorusScaleOffset__Arg3Assignment_6"


    // $ANTLR start "rule__ReadDelayPointer__Arg1Assignment_1"
    // InternalSpinCAD.g:15911:1: rule__ReadDelayPointer__Arg1Assignment_1 : ( ruleSPINDOUBLE ) ;
    public final void rule__ReadDelayPointer__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15915:1: ( ( ruleSPINDOUBLE ) )
            // InternalSpinCAD.g:15916:1: ( ruleSPINDOUBLE )
            {
            // InternalSpinCAD.g:15916:1: ( ruleSPINDOUBLE )
            // InternalSpinCAD.g:15917:1: ruleSPINDOUBLE
            {
             before(grammarAccess.getReadDelayPointerAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINDOUBLE();

            state._fsp--;

             after(grammarAccess.getReadDelayPointerAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadDelayPointer__Arg1Assignment_1"


    // $ANTLR start "rule__And__Arg1Assignment_1"
    // InternalSpinCAD.g:15926:1: rule__And__Arg1Assignment_1 : ( ruleBINARY24 ) ;
    public final void rule__And__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15930:1: ( ( ruleBINARY24 ) )
            // InternalSpinCAD.g:15931:1: ( ruleBINARY24 )
            {
            // InternalSpinCAD.g:15931:1: ( ruleBINARY24 )
            // InternalSpinCAD.g:15932:1: ruleBINARY24
            {
             before(grammarAccess.getAndAccess().getArg1BINARY24ParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleBINARY24();

            state._fsp--;

             after(grammarAccess.getAndAccess().getArg1BINARY24ParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__And__Arg1Assignment_1"


    // $ANTLR start "rule__Or__Arg1Assignment_1"
    // InternalSpinCAD.g:15941:1: rule__Or__Arg1Assignment_1 : ( ruleBINARY24 ) ;
    public final void rule__Or__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15945:1: ( ( ruleBINARY24 ) )
            // InternalSpinCAD.g:15946:1: ( ruleBINARY24 )
            {
            // InternalSpinCAD.g:15946:1: ( ruleBINARY24 )
            // InternalSpinCAD.g:15947:1: ruleBINARY24
            {
             before(grammarAccess.getOrAccess().getArg1BINARY24ParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleBINARY24();

            state._fsp--;

             after(grammarAccess.getOrAccess().getArg1BINARY24ParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Or__Arg1Assignment_1"


    // $ANTLR start "rule__Xor__Arg1Assignment_1"
    // InternalSpinCAD.g:15956:1: rule__Xor__Arg1Assignment_1 : ( ruleBINARY24 ) ;
    public final void rule__Xor__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15960:1: ( ( ruleBINARY24 ) )
            // InternalSpinCAD.g:15961:1: ( ruleBINARY24 )
            {
            // InternalSpinCAD.g:15961:1: ( ruleBINARY24 )
            // InternalSpinCAD.g:15962:1: ruleBINARY24
            {
             before(grammarAccess.getXorAccess().getArg1BINARY24ParserRuleCall_1_0()); 
            pushFollow(FOLLOW_2);
            ruleBINARY24();

            state._fsp--;

             after(grammarAccess.getXorAccess().getArg1BINARY24ParserRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Xor__Arg1Assignment_1"


    // $ANTLR start "rule__Jam__Arg1Assignment_1"
    // InternalSpinCAD.g:15971:1: rule__Jam__Arg1Assignment_1 : ( RULE_ID ) ;
    public final void rule__Jam__Arg1Assignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15975:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15976:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15976:1: ( RULE_ID )
            // InternalSpinCAD.g:15977:1: RULE_ID
            {
             before(grammarAccess.getJamAccess().getArg1IDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getJamAccess().getArg1IDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Jam__Arg1Assignment_1"


    // $ANTLR start "rule__Skip__FlagsAssignment_1"
    // InternalSpinCAD.g:15986:1: rule__Skip__FlagsAssignment_1 : ( RULE_ID ) ;
    public final void rule__Skip__FlagsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:15990:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:15991:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:15991:1: ( RULE_ID )
            // InternalSpinCAD.g:15992:1: RULE_ID
            {
             before(grammarAccess.getSkipAccess().getFlagsIDTerminalRuleCall_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getFlagsIDTerminalRuleCall_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__FlagsAssignment_1"


    // $ANTLR start "rule__Skip__LabelAssignment_4"
    // InternalSpinCAD.g:16001:1: rule__Skip__LabelAssignment_4 : ( ( RULE_ID ) ) ;
    public final void rule__Skip__LabelAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:16005:1: ( ( ( RULE_ID ) ) )
            // InternalSpinCAD.g:16006:1: ( ( RULE_ID ) )
            {
            // InternalSpinCAD.g:16006:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:16007:1: ( RULE_ID )
            {
             before(grammarAccess.getSkipAccess().getLabelLabelCrossReference_4_0()); 
            // InternalSpinCAD.g:16008:1: ( RULE_ID )
            // InternalSpinCAD.g:16009:1: RULE_ID
            {
             before(grammarAccess.getSkipAccess().getLabelLabelIDTerminalRuleCall_4_0_1()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSkipAccess().getLabelLabelIDTerminalRuleCall_4_0_1()); 

            }

             after(grammarAccess.getSkipAccess().getLabelLabelCrossReference_4_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__LabelAssignment_4"


    // $ANTLR start "rule__SPINMEM__BufferAssignment_0"
    // InternalSpinCAD.g:16020:1: rule__SPINMEM__BufferAssignment_0 : ( ruleSPINBUF ) ;
    public final void rule__SPINMEM__BufferAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:16024:1: ( ( ruleSPINBUF ) )
            // InternalSpinCAD.g:16025:1: ( ruleSPINBUF )
            {
            // InternalSpinCAD.g:16025:1: ( ruleSPINBUF )
            // InternalSpinCAD.g:16026:1: ruleSPINBUF
            {
             before(grammarAccess.getSPINMEMAccess().getBufferSPINBUFParserRuleCall_0_0()); 
            pushFollow(FOLLOW_2);
            ruleSPINBUF();

            state._fsp--;

             after(grammarAccess.getSPINMEMAccess().getBufferSPINBUFParserRuleCall_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__BufferAssignment_0"


    // $ANTLR start "rule__SPINMEM__ValueAssignment_1_0_0"
    // InternalSpinCAD.g:16035:1: rule__SPINMEM__ValueAssignment_1_0_0 : ( RULE_INT ) ;
    public final void rule__SPINMEM__ValueAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:16039:1: ( ( RULE_INT ) )
            // InternalSpinCAD.g:16040:1: ( RULE_INT )
            {
            // InternalSpinCAD.g:16040:1: ( RULE_INT )
            // InternalSpinCAD.g:16041:1: RULE_INT
            {
             before(grammarAccess.getSPINMEMAccess().getValueINTTerminalRuleCall_1_0_0_0()); 
            match(input,RULE_INT,FOLLOW_2); 
             after(grammarAccess.getSPINMEMAccess().getValueINTTerminalRuleCall_1_0_0_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__ValueAssignment_1_0_0"


    // $ANTLR start "rule__SPINMEM__ScaleAssignment_1_0_1_1"
    // InternalSpinCAD.g:16050:1: rule__SPINMEM__ScaleAssignment_1_0_1_1 : ( RULE_ID ) ;
    public final void rule__SPINMEM__ScaleAssignment_1_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:16054:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:16055:1: ( RULE_ID )
            {
            // InternalSpinCAD.g:16055:1: ( RULE_ID )
            // InternalSpinCAD.g:16056:1: RULE_ID
            {
             before(grammarAccess.getSPINMEMAccess().getScaleIDTerminalRuleCall_1_0_1_1_0()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSPINMEMAccess().getScaleIDTerminalRuleCall_1_0_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__ScaleAssignment_1_0_1_1"


    // $ANTLR start "rule__SPINMEM__OffsetAssignment_1_1"
    // InternalSpinCAD.g:16065:1: rule__SPINMEM__OffsetAssignment_1_1 : ( ( RULE_ID ) ) ;
    public final void rule__SPINMEM__OffsetAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
            
        try {
            // InternalSpinCAD.g:16069:1: ( ( ( RULE_ID ) ) )
            // InternalSpinCAD.g:16070:1: ( ( RULE_ID ) )
            {
            // InternalSpinCAD.g:16070:1: ( ( RULE_ID ) )
            // InternalSpinCAD.g:16071:1: ( RULE_ID )
            {
             before(grammarAccess.getSPINMEMAccess().getOffsetOffsetCrossReference_1_1_0()); 
            // InternalSpinCAD.g:16072:1: ( RULE_ID )
            // InternalSpinCAD.g:16073:1: RULE_ID
            {
             before(grammarAccess.getSPINMEMAccess().getOffsetOffsetIDTerminalRuleCall_1_1_0_1()); 
            match(input,RULE_ID,FOLLOW_2); 
             after(grammarAccess.getSPINMEMAccess().getOffsetOffsetIDTerminalRuleCall_1_1_0_1()); 

            }

             after(grammarAccess.getSPINMEMAccess().getOffsetOffsetCrossReference_1_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SPINMEM__OffsetAssignment_1_1"

    // Delegated rules


 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000001F00000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0xBFFFFFBFFE000090L,0x0000000003FFFFFFL});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000001F00002L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0xBFFFFFBFFE000092L,0x0000000003FFFFFFL});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000010050L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000060000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000050L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000001C00000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x000000000001E000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000042L});

}