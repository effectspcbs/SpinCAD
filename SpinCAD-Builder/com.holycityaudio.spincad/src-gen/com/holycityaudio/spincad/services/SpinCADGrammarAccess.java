/*
 * generated by Xtext
 */
package com.holycityaudio.spincad.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpinCADGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColorSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cColorAssignment_2_1.eContents().get(0);
		private final Assignment cPinsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinsPinParserRuleCall_3_0 = (RuleCall)cPinsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpinElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Program:
		//	'@name' name=(ID | STRING) ('@color' color=STRING)?
		//	pins+=Pin+
		//	elements+=SpinElement+;
		@Override public ParserRule getRule() { return rule; }

		//'@name' name=(ID | STRING) ('@color' color=STRING)? pins+=Pin+ elements+=SpinElement+
		public Group getGroup() { return cGroup; }

		//'@name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//(ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }

		//('@color' color=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//'@color'
		public Keyword getColorKeyword_2_0() { return cColorKeyword_2_0; }

		//color=STRING
		public Assignment getColorAssignment_2_1() { return cColorAssignment_2_1; }

		//STRING
		public RuleCall getColorSTRINGTerminalRuleCall_2_1_0() { return cColorSTRINGTerminalRuleCall_2_1_0; }

		//pins+=Pin+
		public Assignment getPinsAssignment_3() { return cPinsAssignment_3; }

		//Pin
		public RuleCall getPinsPinParserRuleCall_3_0() { return cPinsPinParserRuleCall_3_0; }

		//elements+=SpinElement+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//SpinElement
		public RuleCall getElementsSpinElementParserRuleCall_4_0() { return cElementsSpinElementParserRuleCall_4_0; }
	}

	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Pin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputPinParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputPinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ---------- Pins ------------------
		//Pin:
		//	InputPin | OutputPin;
		@Override public ParserRule getRule() { return rule; }

		//InputPin | OutputPin
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputPin
		public RuleCall getInputPinParserRuleCall_0() { return cInputPinParserRuleCall_0; }

		//OutputPin
		public RuleCall getOutputPinParserRuleCall_1() { return cOutputPinParserRuleCall_1; }
	}

	public class InputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.InputPin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAudioInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputPin:
		//	AudioInput | ControlInput;
		@Override public ParserRule getRule() { return rule; }

		//AudioInput | ControlInput
		public Alternatives getAlternatives() { return cAlternatives; }

		//AudioInput
		public RuleCall getAudioInputParserRuleCall_0() { return cAudioInputParserRuleCall_0; }

		//ControlInput
		public RuleCall getControlInputParserRuleCall_1() { return cControlInputParserRuleCall_1; }
	}

	public class OutputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.OutputPin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAudioOutputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutputPin:
		//	AudioOutput | ControlOutput;
		@Override public ParserRule getRule() { return rule; }

		//AudioOutput | ControlOutput
		public Alternatives getAlternatives() { return cAlternatives; }

		//AudioOutput
		public RuleCall getAudioOutputParserRuleCall_0() { return cAudioOutputParserRuleCall_0; }

		//ControlOutput
		public RuleCall getControlOutputParserRuleCall_1() { return cControlOutputParserRuleCall_1; }
	}

	public class AudioInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.AudioInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudioInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLabelAlternatives_2_0 = (Alternatives)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_2_0_0 = (RuleCall)cLabelAlternatives_2_0.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cLabelAlternatives_2_0.eContents().get(1);
		
		//AudioInput:
		//	'@audioInput' varName=ID label=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@audioInput' varName=ID label=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@audioInput'
		public Keyword getAudioInputKeyword_0() { return cAudioInputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=(ID | STRING)
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//(ID | STRING)
		public Alternatives getLabelAlternatives_2_0() { return cLabelAlternatives_2_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0_0() { return cLabelIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0_1() { return cLabelSTRINGTerminalRuleCall_2_0_1; }
	}

	public class AudioOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.AudioOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudioOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLabelAlternatives_2_0 = (Alternatives)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_2_0_0 = (RuleCall)cLabelAlternatives_2_0.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cLabelAlternatives_2_0.eContents().get(1);
		
		//AudioOutput:
		//	'@audioOutput' varName=ID label=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@audioOutput' varName=ID label=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@audioOutput'
		public Keyword getAudioOutputKeyword_0() { return cAudioOutputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=(ID | STRING)
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//(ID | STRING)
		public Alternatives getLabelAlternatives_2_0() { return cLabelAlternatives_2_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0_0() { return cLabelIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0_1() { return cLabelSTRINGTerminalRuleCall_2_0_1; }
	}

	public class ControlInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ControlInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLabelAlternatives_2_0 = (Alternatives)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_2_0_0 = (RuleCall)cLabelAlternatives_2_0.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cLabelAlternatives_2_0.eContents().get(1);
		
		//ControlInput:
		//	'@controlInput' varName=ID label=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@controlInput' varName=ID label=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@controlInput'
		public Keyword getControlInputKeyword_0() { return cControlInputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=(ID | STRING)
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//(ID | STRING)
		public Alternatives getLabelAlternatives_2_0() { return cLabelAlternatives_2_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0_0() { return cLabelIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0_1() { return cLabelSTRINGTerminalRuleCall_2_0_1; }
	}

	public class ControlOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ControlOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLabelAlternatives_2_0 = (Alternatives)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_2_0_0 = (RuleCall)cLabelAlternatives_2_0.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cLabelAlternatives_2_0.eContents().get(1);
		
		//ControlOutput:
		//	'@controlOutput' varName=ID label=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@controlOutput' varName=ID label=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@controlOutput'
		public Keyword getControlOutputKeyword_0() { return cControlOutputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=(ID | STRING)
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//(ID | STRING)
		public Alternatives getLabelAlternatives_2_0() { return cLabelAlternatives_2_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0_0() { return cLabelIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0_1() { return cLabelSTRINGTerminalRuleCall_2_0_1; }
	}

	public class SpinElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpinIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpinEquateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSpinBoolParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInstructionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLabelParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCommentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMacroParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOffsetParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// --------------- Spin ASM Elements	
		//SpinElement:
		//	SpinInt | Control | SpinEquate | SpinBool | Mem | Instruction | Label | Comment | Macro | Offset;
		@Override public ParserRule getRule() { return rule; }

		//SpinInt | Control | SpinEquate | SpinBool | Mem | Instruction | Label | Comment | Macro | Offset
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpinInt
		public RuleCall getSpinIntParserRuleCall_0() { return cSpinIntParserRuleCall_0; }

		//Control
		public RuleCall getControlParserRuleCall_1() { return cControlParserRuleCall_1; }

		//SpinEquate
		public RuleCall getSpinEquateParserRuleCall_2() { return cSpinEquateParserRuleCall_2; }

		//SpinBool
		public RuleCall getSpinBoolParserRuleCall_3() { return cSpinBoolParserRuleCall_3; }

		//Mem
		public RuleCall getMemParserRuleCall_4() { return cMemParserRuleCall_4; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_5() { return cInstructionParserRuleCall_5; }

		//Label
		public RuleCall getLabelParserRuleCall_6() { return cLabelParserRuleCall_6; }

		//Comment
		public RuleCall getCommentParserRuleCall_7() { return cCommentParserRuleCall_7; }

		//Macro
		public RuleCall getMacroParserRuleCall_8() { return cMacroParserRuleCall_8; }

		//Offset
		public RuleCall getOffsetParserRuleCall_9() { return cOffsetParserRuleCall_9; }
	}

	public class SpinEquateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinEquate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSPINDOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// this now includes info to help set up control panels
		//SpinEquate:
		//	'equ' ename=ID value=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'equ' ename=ID value=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'equ'
		public Keyword getEquKeyword_0() { return cEquKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//value=SPINDOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SPINDOUBLE
		public RuleCall getValueSPINDOUBLEParserRuleCall_2_0() { return cValueSPINDOUBLEParserRuleCall_2_0; }
	}

	public class SpinIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// sometimes you need an integer
		//SpinInt:
		//	'int' ename=ID value=INT;
		@Override public ParserRule getRule() { return rule; }

		//'int' ename=ID value=INT
		public Group getGroup() { return cGroup; }

		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class MemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Mem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBufferAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBufferIDTerminalRuleCall_1_0 = (RuleCall)cBufferAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthSPINREGISTERParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		
		//Mem:
		//	'mem' buffer=ID length=SPINREGISTER;
		@Override public ParserRule getRule() { return rule; }

		//'mem' buffer=ID length=SPINREGISTER
		public Group getGroup() { return cGroup; }

		//'mem'
		public Keyword getMemKeyword_0() { return cMemKeyword_0; }

		//buffer=ID
		public Assignment getBufferAssignment_1() { return cBufferAssignment_1; }

		//ID
		public RuleCall getBufferIDTerminalRuleCall_1_0() { return cBufferIDTerminalRuleCall_1_0; }

		//length=SPINREGISTER
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//SPINREGISTER
		public RuleCall getLengthSPINREGISTERParserRuleCall_2_0() { return cLengthSPINREGISTERParserRuleCall_2_0; }
	}

	public class OffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Offset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		
		//Offset:
		//	'offset' name=ID length=INT;
		@Override public ParserRule getRule() { return rule; }

		//'offset' name=ID length=INT
		public Group getGroup() { return cGroup; }

		//'offset'
		public Keyword getOffsetKeyword_0() { return cOffsetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }
	}

	public class SpinBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLEANParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// SpinCAD logical variable, usually associated with a Checkbox
		//SpinBool:
		//	'bool' label=ID value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//'bool' label=ID value=BOOLEAN
		public Group getGroup() { return cGroup; }

		//'bool'
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_2_0() { return cValueBOOLEANParserRuleCall_2_0; }
	}

	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Control");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpinSliderLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpinCheckBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogFreqSliderLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogFreq2SliderLabelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpinRadioButtonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSliderLabelCheckBoxParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSpinComboBoxParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSliderLabelSpinnerParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////---------------------------------------------
		//// -- Control Panel objects 
		//Control:
		//	SpinSliderLabel | SpinCheckBox | LogFreqSliderLabel | LogFreq2SliderLabel | SpinRadioButton | SliderLabelCheckBox |
		//	SpinComboBox | SliderLabelSpinner;
		@Override public ParserRule getRule() { return rule; }

		//SpinSliderLabel | SpinCheckBox | LogFreqSliderLabel | LogFreq2SliderLabel | SpinRadioButton | SliderLabelCheckBox |
		//SpinComboBox | SliderLabelSpinner
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpinSliderLabel
		public RuleCall getSpinSliderLabelParserRuleCall_0() { return cSpinSliderLabelParserRuleCall_0; }

		//SpinCheckBox
		public RuleCall getSpinCheckBoxParserRuleCall_1() { return cSpinCheckBoxParserRuleCall_1; }

		//LogFreqSliderLabel
		public RuleCall getLogFreqSliderLabelParserRuleCall_2() { return cLogFreqSliderLabelParserRuleCall_2; }

		//LogFreq2SliderLabel
		public RuleCall getLogFreq2SliderLabelParserRuleCall_3() { return cLogFreq2SliderLabelParserRuleCall_3; }

		//SpinRadioButton
		public RuleCall getSpinRadioButtonParserRuleCall_4() { return cSpinRadioButtonParserRuleCall_4; }

		//SliderLabelCheckBox
		public RuleCall getSliderLabelCheckBoxParserRuleCall_5() { return cSliderLabelCheckBoxParserRuleCall_5; }

		//SpinComboBox
		public RuleCall getSpinComboBoxParserRuleCall_6() { return cSpinComboBoxParserRuleCall_6; }

		//SliderLabelSpinner
		public RuleCall getSliderLabelSpinnerParserRuleCall_7() { return cSliderLabelSpinnerParserRuleCall_7; }
	}

	public class SpinSliderLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinSliderLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliderLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMinValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMinValSPINDOUBLEParserRuleCall_3_0_0 = (RuleCall)cMinValAssignment_3_0.eContents().get(0);
		private final Assignment cMaxValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValSPINDOUBLEParserRuleCall_3_1_0 = (RuleCall)cMaxValAssignment_3_1.eContents().get(0);
		private final Assignment cInitValAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitValSPINDOUBLEParserRuleCall_3_2_0 = (RuleCall)cInitValAssignment_3_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplierSPINDOUBLEParserRuleCall_3_3_0 = (RuleCall)cMultiplierAssignment_3_3.eContents().get(0);
		private final Assignment cPrecisionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPrecisionINTTerminalRuleCall_3_4_0 = (RuleCall)cPrecisionAssignment_3_4.eContents().get(0);
		private final Assignment cOptionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cOptionIDTerminalRuleCall_3_5_0 = (RuleCall)cOptionAssignment_3_5.eContents().get(0);
		
		//SpinSliderLabel:
		//	'@sliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@sliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup() { return cGroup; }

		//'@sliderLabel'
		public Keyword getSliderLabelKeyword_0() { return cSliderLabelKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }

		//(minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup_3() { return cGroup_3; }

		//minVal=SPINDOUBLE
		public Assignment getMinValAssignment_3_0() { return cMinValAssignment_3_0; }

		//SPINDOUBLE
		public RuleCall getMinValSPINDOUBLEParserRuleCall_3_0_0() { return cMinValSPINDOUBLEParserRuleCall_3_0_0; }

		//maxVal=SPINDOUBLE
		public Assignment getMaxValAssignment_3_1() { return cMaxValAssignment_3_1; }

		//SPINDOUBLE
		public RuleCall getMaxValSPINDOUBLEParserRuleCall_3_1_0() { return cMaxValSPINDOUBLEParserRuleCall_3_1_0; }

		//initVal=SPINDOUBLE
		public Assignment getInitValAssignment_3_2() { return cInitValAssignment_3_2; }

		//SPINDOUBLE
		public RuleCall getInitValSPINDOUBLEParserRuleCall_3_2_0() { return cInitValSPINDOUBLEParserRuleCall_3_2_0; }

		//multiplier=SPINDOUBLE
		public Assignment getMultiplierAssignment_3_3() { return cMultiplierAssignment_3_3; }

		//SPINDOUBLE
		public RuleCall getMultiplierSPINDOUBLEParserRuleCall_3_3_0() { return cMultiplierSPINDOUBLEParserRuleCall_3_3_0; }

		//precision=INT
		public Assignment getPrecisionAssignment_3_4() { return cPrecisionAssignment_3_4; }

		//INT
		public RuleCall getPrecisionINTTerminalRuleCall_3_4_0() { return cPrecisionINTTerminalRuleCall_3_4_0; }

		//option=ID?
		public Assignment getOptionAssignment_3_5() { return cOptionAssignment_3_5; }

		//ID
		public RuleCall getOptionIDTerminalRuleCall_3_5_0() { return cOptionIDTerminalRuleCall_3_5_0; }
	}

	public class SliderLabelSpinnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SliderLabelSpinner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliderLabelSpinnerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMinValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMinValSPINDOUBLEParserRuleCall_3_0_0 = (RuleCall)cMinValAssignment_3_0.eContents().get(0);
		private final Assignment cMaxValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValSPINDOUBLEParserRuleCall_3_1_0 = (RuleCall)cMaxValAssignment_3_1.eContents().get(0);
		private final Assignment cInitValAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitValSPINDOUBLEParserRuleCall_3_2_0 = (RuleCall)cInitValAssignment_3_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplierSPINDOUBLEParserRuleCall_3_3_0 = (RuleCall)cMultiplierAssignment_3_3.eContents().get(0);
		private final Assignment cPrecisionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPrecisionINTTerminalRuleCall_3_4_0 = (RuleCall)cPrecisionAssignment_3_4.eContents().get(0);
		private final Assignment cOptionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cOptionIDTerminalRuleCall_3_5_0 = (RuleCall)cOptionAssignment_3_5.eContents().get(0);
		
		//SliderLabelSpinner:
		//	'@sliderLabelSpinner' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@sliderLabelSpinner' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup() { return cGroup; }

		//'@sliderLabelSpinner'
		public Keyword getSliderLabelSpinnerKeyword_0() { return cSliderLabelSpinnerKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }

		//(minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup_3() { return cGroup_3; }

		//minVal=SPINDOUBLE
		public Assignment getMinValAssignment_3_0() { return cMinValAssignment_3_0; }

		//SPINDOUBLE
		public RuleCall getMinValSPINDOUBLEParserRuleCall_3_0_0() { return cMinValSPINDOUBLEParserRuleCall_3_0_0; }

		//maxVal=SPINDOUBLE
		public Assignment getMaxValAssignment_3_1() { return cMaxValAssignment_3_1; }

		//SPINDOUBLE
		public RuleCall getMaxValSPINDOUBLEParserRuleCall_3_1_0() { return cMaxValSPINDOUBLEParserRuleCall_3_1_0; }

		//initVal=SPINDOUBLE
		public Assignment getInitValAssignment_3_2() { return cInitValAssignment_3_2; }

		//SPINDOUBLE
		public RuleCall getInitValSPINDOUBLEParserRuleCall_3_2_0() { return cInitValSPINDOUBLEParserRuleCall_3_2_0; }

		//multiplier=SPINDOUBLE
		public Assignment getMultiplierAssignment_3_3() { return cMultiplierAssignment_3_3; }

		//SPINDOUBLE
		public RuleCall getMultiplierSPINDOUBLEParserRuleCall_3_3_0() { return cMultiplierSPINDOUBLEParserRuleCall_3_3_0; }

		//precision=INT
		public Assignment getPrecisionAssignment_3_4() { return cPrecisionAssignment_3_4; }

		//INT
		public RuleCall getPrecisionINTTerminalRuleCall_3_4_0() { return cPrecisionINTTerminalRuleCall_3_4_0; }

		//option=ID?
		public Assignment getOptionAssignment_3_5() { return cOptionAssignment_3_5; }

		//ID
		public RuleCall getOptionIDTerminalRuleCall_3_5_0() { return cOptionIDTerminalRuleCall_3_5_0; }
	}

	public class SliderLabelCheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SliderLabelCheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliderLabelCheckBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMinValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMinValSPINDOUBLEParserRuleCall_3_0_0 = (RuleCall)cMinValAssignment_3_0.eContents().get(0);
		private final Assignment cMaxValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValSPINDOUBLEParserRuleCall_3_1_0 = (RuleCall)cMaxValAssignment_3_1.eContents().get(0);
		private final Assignment cInitValAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitValSPINDOUBLEParserRuleCall_3_2_0 = (RuleCall)cInitValAssignment_3_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplierSPINDOUBLEParserRuleCall_3_3_0 = (RuleCall)cMultiplierAssignment_3_3.eContents().get(0);
		private final Assignment cPrecisionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPrecisionINTTerminalRuleCall_3_4_0 = (RuleCall)cPrecisionAssignment_3_4.eContents().get(0);
		private final Assignment cOptionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cOptionIDTerminalRuleCall_3_5_0 = (RuleCall)cOptionAssignment_3_5.eContents().get(0);
		
		//SliderLabelCheckBox:
		//	'@sliderLabelCheckBox' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@sliderLabelCheckBox' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup() { return cGroup; }

		//'@sliderLabelCheckBox'
		public Keyword getSliderLabelCheckBoxKeyword_0() { return cSliderLabelCheckBoxKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }

		//(minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup_3() { return cGroup_3; }

		//minVal=SPINDOUBLE
		public Assignment getMinValAssignment_3_0() { return cMinValAssignment_3_0; }

		//SPINDOUBLE
		public RuleCall getMinValSPINDOUBLEParserRuleCall_3_0_0() { return cMinValSPINDOUBLEParserRuleCall_3_0_0; }

		//maxVal=SPINDOUBLE
		public Assignment getMaxValAssignment_3_1() { return cMaxValAssignment_3_1; }

		//SPINDOUBLE
		public RuleCall getMaxValSPINDOUBLEParserRuleCall_3_1_0() { return cMaxValSPINDOUBLEParserRuleCall_3_1_0; }

		//initVal=SPINDOUBLE
		public Assignment getInitValAssignment_3_2() { return cInitValAssignment_3_2; }

		//SPINDOUBLE
		public RuleCall getInitValSPINDOUBLEParserRuleCall_3_2_0() { return cInitValSPINDOUBLEParserRuleCall_3_2_0; }

		//multiplier=SPINDOUBLE
		public Assignment getMultiplierAssignment_3_3() { return cMultiplierAssignment_3_3; }

		//SPINDOUBLE
		public RuleCall getMultiplierSPINDOUBLEParserRuleCall_3_3_0() { return cMultiplierSPINDOUBLEParserRuleCall_3_3_0; }

		//precision=INT
		public Assignment getPrecisionAssignment_3_4() { return cPrecisionAssignment_3_4; }

		//INT
		public RuleCall getPrecisionINTTerminalRuleCall_3_4_0() { return cPrecisionINTTerminalRuleCall_3_4_0; }

		//option=ID?
		public Assignment getOptionAssignment_3_5() { return cOptionAssignment_3_5; }

		//ID
		public RuleCall getOptionIDTerminalRuleCall_3_5_0() { return cOptionIDTerminalRuleCall_3_5_0; }
	}

	public class SpinCheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinCheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		
		//// ename is the name of the controlled variable, controlName is the text to display, value is the init value
		//SpinCheckBox:
		//	'@checkbox' ename=ID controlName=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@checkbox' ename=ID controlName=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@checkbox'
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }
	}

	public class LogFreqSliderLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.LogFreqSliderLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogFreqSliderLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMinValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMinValSPINDOUBLEParserRuleCall_3_0_0 = (RuleCall)cMinValAssignment_3_0.eContents().get(0);
		private final Assignment cMaxValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValSPINDOUBLEParserRuleCall_3_1_0 = (RuleCall)cMaxValAssignment_3_1.eContents().get(0);
		private final Assignment cInitValAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitValSPINDOUBLEParserRuleCall_3_2_0 = (RuleCall)cInitValAssignment_3_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplierSPINDOUBLEParserRuleCall_3_3_0 = (RuleCall)cMultiplierAssignment_3_3.eContents().get(0);
		private final Assignment cPrecisionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPrecisionINTTerminalRuleCall_3_4_0 = (RuleCall)cPrecisionAssignment_3_4.eContents().get(0);
		private final Assignment cOptionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cOptionIDTerminalRuleCall_3_5_0 = (RuleCall)cOptionAssignment_3_5.eContents().get(0);
		
		//LogFreqSliderLabel:
		//	'@logFreqSliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@logFreqSliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup() { return cGroup; }

		//'@logFreqSliderLabel'
		public Keyword getLogFreqSliderLabelKeyword_0() { return cLogFreqSliderLabelKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }

		//(minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup_3() { return cGroup_3; }

		//minVal=SPINDOUBLE
		public Assignment getMinValAssignment_3_0() { return cMinValAssignment_3_0; }

		//SPINDOUBLE
		public RuleCall getMinValSPINDOUBLEParserRuleCall_3_0_0() { return cMinValSPINDOUBLEParserRuleCall_3_0_0; }

		//maxVal=SPINDOUBLE
		public Assignment getMaxValAssignment_3_1() { return cMaxValAssignment_3_1; }

		//SPINDOUBLE
		public RuleCall getMaxValSPINDOUBLEParserRuleCall_3_1_0() { return cMaxValSPINDOUBLEParserRuleCall_3_1_0; }

		//initVal=SPINDOUBLE
		public Assignment getInitValAssignment_3_2() { return cInitValAssignment_3_2; }

		//SPINDOUBLE
		public RuleCall getInitValSPINDOUBLEParserRuleCall_3_2_0() { return cInitValSPINDOUBLEParserRuleCall_3_2_0; }

		//multiplier=SPINDOUBLE
		public Assignment getMultiplierAssignment_3_3() { return cMultiplierAssignment_3_3; }

		//SPINDOUBLE
		public RuleCall getMultiplierSPINDOUBLEParserRuleCall_3_3_0() { return cMultiplierSPINDOUBLEParserRuleCall_3_3_0; }

		//precision=INT
		public Assignment getPrecisionAssignment_3_4() { return cPrecisionAssignment_3_4; }

		//INT
		public RuleCall getPrecisionINTTerminalRuleCall_3_4_0() { return cPrecisionINTTerminalRuleCall_3_4_0; }

		//option=ID?
		public Assignment getOptionAssignment_3_5() { return cOptionAssignment_3_5; }

		//ID
		public RuleCall getOptionIDTerminalRuleCall_3_5_0() { return cOptionIDTerminalRuleCall_3_5_0; }
	}

	public class LogFreq2SliderLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.LogFreq2SliderLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogFreq2SliderLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMinValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMinValSPINDOUBLEParserRuleCall_3_0_0 = (RuleCall)cMinValAssignment_3_0.eContents().get(0);
		private final Assignment cMaxValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValSPINDOUBLEParserRuleCall_3_1_0 = (RuleCall)cMaxValAssignment_3_1.eContents().get(0);
		private final Assignment cInitValAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitValSPINDOUBLEParserRuleCall_3_2_0 = (RuleCall)cInitValAssignment_3_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplierSPINDOUBLEParserRuleCall_3_3_0 = (RuleCall)cMultiplierAssignment_3_3.eContents().get(0);
		private final Assignment cPrecisionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPrecisionINTTerminalRuleCall_3_4_0 = (RuleCall)cPrecisionAssignment_3_4.eContents().get(0);
		private final Assignment cOptionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cOptionIDTerminalRuleCall_3_5_0 = (RuleCall)cOptionAssignment_3_5.eContents().get(0);
		
		//LogFreq2SliderLabel:
		//	'@logFreq2SliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@logFreq2SliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
		//multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup() { return cGroup; }

		//'@logFreq2SliderLabel'
		public Keyword getLogFreq2SliderLabelKeyword_0() { return cLogFreq2SliderLabelKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }

		//(minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE multiplier=SPINDOUBLE precision=INT option=ID?)?
		public Group getGroup_3() { return cGroup_3; }

		//minVal=SPINDOUBLE
		public Assignment getMinValAssignment_3_0() { return cMinValAssignment_3_0; }

		//SPINDOUBLE
		public RuleCall getMinValSPINDOUBLEParserRuleCall_3_0_0() { return cMinValSPINDOUBLEParserRuleCall_3_0_0; }

		//maxVal=SPINDOUBLE
		public Assignment getMaxValAssignment_3_1() { return cMaxValAssignment_3_1; }

		//SPINDOUBLE
		public RuleCall getMaxValSPINDOUBLEParserRuleCall_3_1_0() { return cMaxValSPINDOUBLEParserRuleCall_3_1_0; }

		//initVal=SPINDOUBLE
		public Assignment getInitValAssignment_3_2() { return cInitValAssignment_3_2; }

		//SPINDOUBLE
		public RuleCall getInitValSPINDOUBLEParserRuleCall_3_2_0() { return cInitValSPINDOUBLEParserRuleCall_3_2_0; }

		//multiplier=SPINDOUBLE
		public Assignment getMultiplierAssignment_3_3() { return cMultiplierAssignment_3_3; }

		//SPINDOUBLE
		public RuleCall getMultiplierSPINDOUBLEParserRuleCall_3_3_0() { return cMultiplierSPINDOUBLEParserRuleCall_3_3_0; }

		//precision=INT
		public Assignment getPrecisionAssignment_3_4() { return cPrecisionAssignment_3_4; }

		//INT
		public RuleCall getPrecisionINTTerminalRuleCall_3_4_0() { return cPrecisionINTTerminalRuleCall_3_4_0; }

		//option=ID?
		public Assignment getOptionAssignment_3_5() { return cOptionAssignment_3_5; }

		//ID
		public RuleCall getOptionIDTerminalRuleCall_3_5_0() { return cOptionIDTerminalRuleCall_3_5_0; }
	}

	public class SpinRadioButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinRadioButton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpinRadioButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cControlNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cControlNameAlternatives_2_0 = (Alternatives)cControlNameAssignment_2.eContents().get(0);
		private final RuleCall cControlNameIDTerminalRuleCall_2_0_0 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cControlNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cControlNameAlternatives_2_0.eContents().get(1);
		
		//SpinRadioButton:
		//	'@spinRadioButton' ename=ID controlName=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@spinRadioButton' ename=ID controlName=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@spinRadioButton'
		public Keyword getSpinRadioButtonKeyword_0() { return cSpinRadioButtonKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//controlName=(ID | STRING)
		public Assignment getControlNameAssignment_2() { return cControlNameAssignment_2; }

		//(ID | STRING)
		public Alternatives getControlNameAlternatives_2_0() { return cControlNameAlternatives_2_0; }

		//ID
		public RuleCall getControlNameIDTerminalRuleCall_2_0_0() { return cControlNameIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getControlNameSTRINGTerminalRuleCall_2_0_1() { return cControlNameSTRINGTerminalRuleCall_2_0_1; }
	}

	public class SpinComboBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SpinComboBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComboBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cOptionaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionaSTRINGTerminalRuleCall_2_0 = (RuleCall)cOptionaAssignment_2.eContents().get(0);
		private final Assignment cOptionbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionbSTRINGTerminalRuleCall_3_0 = (RuleCall)cOptionbAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOptioncAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOptioncSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cOptioncAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cOptiondAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cOptiondSTRINGTerminalRuleCall_4_1_0_0 = (RuleCall)cOptiondAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Assignment cOptioneAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cOptioneSTRINGTerminalRuleCall_4_1_1_0_0 = (RuleCall)cOptioneAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cOptionfAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cOptionfSTRINGTerminalRuleCall_4_1_1_1_0 = (RuleCall)cOptionfAssignment_4_1_1_1.eContents().get(0);
		
		//SpinComboBox:
		//	'@comboBox' ename=ID optiona=STRING optionb=STRING (optionc=STRING (optiond=STRING (optione=STRING
		//	optionf=STRING?)?)?)?;
		@Override public ParserRule getRule() { return rule; }

		//'@comboBox' ename=ID optiona=STRING optionb=STRING (optionc=STRING (optiond=STRING (optione=STRING optionf=STRING?)?)?)?
		public Group getGroup() { return cGroup; }

		//'@comboBox'
		public Keyword getComboBoxKeyword_0() { return cComboBoxKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//optiona=STRING
		public Assignment getOptionaAssignment_2() { return cOptionaAssignment_2; }

		//STRING
		public RuleCall getOptionaSTRINGTerminalRuleCall_2_0() { return cOptionaSTRINGTerminalRuleCall_2_0; }

		//optionb=STRING
		public Assignment getOptionbAssignment_3() { return cOptionbAssignment_3; }

		//STRING
		public RuleCall getOptionbSTRINGTerminalRuleCall_3_0() { return cOptionbSTRINGTerminalRuleCall_3_0; }

		//(optionc=STRING (optiond=STRING (optione=STRING optionf=STRING?)?)?)?
		public Group getGroup_4() { return cGroup_4; }

		//optionc=STRING
		public Assignment getOptioncAssignment_4_0() { return cOptioncAssignment_4_0; }

		//STRING
		public RuleCall getOptioncSTRINGTerminalRuleCall_4_0_0() { return cOptioncSTRINGTerminalRuleCall_4_0_0; }

		//(optiond=STRING (optione=STRING optionf=STRING?)?)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//optiond=STRING
		public Assignment getOptiondAssignment_4_1_0() { return cOptiondAssignment_4_1_0; }

		//STRING
		public RuleCall getOptiondSTRINGTerminalRuleCall_4_1_0_0() { return cOptiondSTRINGTerminalRuleCall_4_1_0_0; }

		//(optione=STRING optionf=STRING?)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//optione=STRING
		public Assignment getOptioneAssignment_4_1_1_0() { return cOptioneAssignment_4_1_1_0; }

		//STRING
		public RuleCall getOptioneSTRINGTerminalRuleCall_4_1_1_0_0() { return cOptioneSTRINGTerminalRuleCall_4_1_1_0_0; }

		//optionf=STRING?
		public Assignment getOptionfAssignment_4_1_1_1() { return cOptionfAssignment_4_1_1_1; }

		//STRING
		public RuleCall getOptionfSTRINGTerminalRuleCall_4_1_1_1_0() { return cOptionfSTRINGTerminalRuleCall_4_1_1_1_0; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Comment");
		private final Assignment cRemarkAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRemarkSC_COMMENTTerminalRuleCall_0 = (RuleCall)cRemarkAssignment.eContents().get(0);
		
		////------------------------------------------------------------
		//// place a comment in the code
		//Comment:
		//	remark=SC_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//remark=SC_COMMENT
		public Assignment getRemarkAssignment() { return cRemarkAssignment; }

		//SC_COMMENT
		public RuleCall getRemarkSC_COMMENTTerminalRuleCall_0() { return cRemarkSC_COMMENTTerminalRuleCall_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Label:
		//	name=ID ':';
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Macro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsPinConnectedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsTrueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsElseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsEndifParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIsGreaterThanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIsEqualToParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIsOrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIsLessThanParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGetInputDefaultParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReadChorusTapParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSetChorusWidthParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cGetDelayScaleControlParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSetOutputPinParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cGetBaseAddressParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cGetSamplesFromRatioParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cMinusDoubleParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cDivideDoubleParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cDivideIntParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cMultiplyDoubleParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSemitonesToRmpRateParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cEqualsParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cEqualsBoolParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		
		//// - SpinCAD macro for conditional expressions within generateCode()
		//// also for special function calls etc.
		//Macro:
		//	IsPinConnected | IsTrue | IsElse | IsEndif | IsGreaterThan | IsEqualTo | IsOr | IsLessThan | GetInputDefault |
		//	ReadChorusTap | SetChorusWidth | GetDelayScaleControl | SetOutputPin | GetBaseAddress | GetSamplesFromRatio |
		//	MinusDouble | DivideDouble | DivideInt | MultiplyDouble | SemitonesToRmpRate | Equals | EqualsBool;
		@Override public ParserRule getRule() { return rule; }

		//IsPinConnected | IsTrue | IsElse | IsEndif | IsGreaterThan | IsEqualTo | IsOr | IsLessThan | GetInputDefault |
		//ReadChorusTap | SetChorusWidth | GetDelayScaleControl | SetOutputPin | GetBaseAddress | GetSamplesFromRatio |
		//MinusDouble | DivideDouble | DivideInt | MultiplyDouble | SemitonesToRmpRate | Equals | EqualsBool
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsPinConnected
		public RuleCall getIsPinConnectedParserRuleCall_0() { return cIsPinConnectedParserRuleCall_0; }

		//IsTrue
		public RuleCall getIsTrueParserRuleCall_1() { return cIsTrueParserRuleCall_1; }

		//IsElse
		public RuleCall getIsElseParserRuleCall_2() { return cIsElseParserRuleCall_2; }

		//IsEndif
		public RuleCall getIsEndifParserRuleCall_3() { return cIsEndifParserRuleCall_3; }

		//IsGreaterThan
		public RuleCall getIsGreaterThanParserRuleCall_4() { return cIsGreaterThanParserRuleCall_4; }

		//IsEqualTo
		public RuleCall getIsEqualToParserRuleCall_5() { return cIsEqualToParserRuleCall_5; }

		//IsOr
		public RuleCall getIsOrParserRuleCall_6() { return cIsOrParserRuleCall_6; }

		//IsLessThan
		public RuleCall getIsLessThanParserRuleCall_7() { return cIsLessThanParserRuleCall_7; }

		//GetInputDefault
		public RuleCall getGetInputDefaultParserRuleCall_8() { return cGetInputDefaultParserRuleCall_8; }

		//ReadChorusTap
		public RuleCall getReadChorusTapParserRuleCall_9() { return cReadChorusTapParserRuleCall_9; }

		//SetChorusWidth
		public RuleCall getSetChorusWidthParserRuleCall_10() { return cSetChorusWidthParserRuleCall_10; }

		//GetDelayScaleControl
		public RuleCall getGetDelayScaleControlParserRuleCall_11() { return cGetDelayScaleControlParserRuleCall_11; }

		//SetOutputPin
		public RuleCall getSetOutputPinParserRuleCall_12() { return cSetOutputPinParserRuleCall_12; }

		//GetBaseAddress
		public RuleCall getGetBaseAddressParserRuleCall_13() { return cGetBaseAddressParserRuleCall_13; }

		//GetSamplesFromRatio
		public RuleCall getGetSamplesFromRatioParserRuleCall_14() { return cGetSamplesFromRatioParserRuleCall_14; }

		//MinusDouble
		public RuleCall getMinusDoubleParserRuleCall_15() { return cMinusDoubleParserRuleCall_15; }

		//DivideDouble
		public RuleCall getDivideDoubleParserRuleCall_16() { return cDivideDoubleParserRuleCall_16; }

		//DivideInt
		public RuleCall getDivideIntParserRuleCall_17() { return cDivideIntParserRuleCall_17; }

		//MultiplyDouble
		public RuleCall getMultiplyDoubleParserRuleCall_18() { return cMultiplyDoubleParserRuleCall_18; }

		//SemitonesToRmpRate
		public RuleCall getSemitonesToRmpRateParserRuleCall_19() { return cSemitonesToRmpRateParserRuleCall_19; }

		//Equals
		public RuleCall getEqualsParserRuleCall_20() { return cEqualsParserRuleCall_20; }

		//EqualsBool
		public RuleCall getEqualsBoolParserRuleCall_21() { return cEqualsBoolParserRuleCall_21; }
	}

	public class IsPinConnectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsPinConnected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsPinConnectedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArg1Alternatives_1_0 = (Alternatives)cArg1Assignment_1.eContents().get(0);
		private final RuleCall cArg1IDTerminalRuleCall_1_0_0 = (RuleCall)cArg1Alternatives_1_0.eContents().get(0);
		private final RuleCall cArg1STRINGTerminalRuleCall_1_0_1 = (RuleCall)cArg1Alternatives_1_0.eContents().get(1);
		
		//IsPinConnected:
		//	'@isPinConnected' arg1=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//'@isPinConnected' arg1=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//'@isPinConnected'
		public Keyword getIsPinConnectedKeyword_0() { return cIsPinConnectedKeyword_0; }

		//arg1=(ID | STRING)
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//(ID | STRING)
		public Alternatives getArg1Alternatives_1_0() { return cArg1Alternatives_1_0; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0_0() { return cArg1IDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getArg1STRINGTerminalRuleCall_1_0_1() { return cArg1STRINGTerminalRuleCall_1_0_1; }
	}

	public class IsGreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsGreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsGreaterThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IsGreaterThan:
		//	'@isGreaterThan' variable=ID value=INT;
		@Override public ParserRule getRule() { return rule; }

		//'@isGreaterThan' variable=ID value=INT
		public Group getGroup() { return cGroup; }

		//'@isGreaterThan'
		public Keyword getIsGreaterThanKeyword_0() { return cIsGreaterThanKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class IsLessThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsLessThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsLessThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IsLessThan:
		//	'@isLessThan' variable=ID value=INT;
		@Override public ParserRule getRule() { return rule; }

		//'@isLessThan' variable=ID value=INT
		public Group getGroup() { return cGroup; }

		//'@isLessThan'
		public Keyword getIsLessThanKeyword_0() { return cIsLessThanKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class IsEqualToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsEqualTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsEqualToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IsEqualTo:
		//	'@isEqualTo' variable=ID value=INT;
		@Override public ParserRule getRule() { return rule; }

		//'@isEqualTo' variable=ID value=INT
		public Group getGroup() { return cGroup; }

		//'@isEqualTo'
		public Keyword getIsEqualToKeyword_0() { return cIsEqualToKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class IsTrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsTrue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//IsTrue:
		//	'@isTrue' variable=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@isTrue' variable=ID
		public Group getGroup() { return cGroup; }

		//'@isTrue'
		public Keyword getIsTrueKeyword_0() { return cIsTrueKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }
	}

	public class IsElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsElseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsElse:
		//	{IsElse} '@else';
		@Override public ParserRule getRule() { return rule; }

		//{IsElse} '@else'
		public Group getGroup() { return cGroup; }

		//{IsElse}
		public Action getIsElseAction_0() { return cIsElseAction_0; }

		//'@else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
	}

	public class IsEndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsEndif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsEndifAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsEndif:
		//	{IsEndif} "@endif";
		@Override public ParserRule getRule() { return rule; }

		//{IsEndif} "@endif"
		public Group getGroup() { return cGroup; }

		//{IsEndif}
		public Action getIsEndifAction_0() { return cIsEndifAction_0; }

		//"@endif"
		public Keyword getEndifKeyword_1() { return cEndifKeyword_1; }
	}

	public class IsOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.IsOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVar1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVar1IDTerminalRuleCall_1_0 = (RuleCall)cVar1Assignment_1.eContents().get(0);
		private final Assignment cVar2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar2IDTerminalRuleCall_2_0 = (RuleCall)cVar2Assignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBOOLEANParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IsOr:
		//	'@isOr' var1=ID var2=ID value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//'@isOr' var1=ID var2=ID value=BOOLEAN
		public Group getGroup() { return cGroup; }

		//'@isOr'
		public Keyword getIsOrKeyword_0() { return cIsOrKeyword_0; }

		//var1=ID
		public Assignment getVar1Assignment_1() { return cVar1Assignment_1; }

		//ID
		public RuleCall getVar1IDTerminalRuleCall_1_0() { return cVar1IDTerminalRuleCall_1_0; }

		//var2=ID
		public Assignment getVar2Assignment_2() { return cVar2Assignment_2; }

		//ID
		public RuleCall getVar2IDTerminalRuleCall_2_0() { return cVar2IDTerminalRuleCall_2_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_0() { return cValueBOOLEANParserRuleCall_3_0; }
	}

	public class GetInputDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.GetInputDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetInputDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleSPINDOUBLEParserRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		private final Assignment cDefaultValAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultValSPINDOUBLEParserRuleCall_4_0 = (RuleCall)cDefaultValAssignment_4.eContents().get(0);
		
		//GetInputDefault:
		//	'@getInputDefault' label=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'@getInputDefault' label=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'@getInputDefault'
		public Keyword getGetInputDefaultKeyword_0() { return cGetInputDefaultKeyword_0; }

		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }

		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }

		//scale=SPINDOUBLE
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }

		//SPINDOUBLE
		public RuleCall getScaleSPINDOUBLEParserRuleCall_3_0() { return cScaleSPINDOUBLEParserRuleCall_3_0; }

		//defaultVal=SPINDOUBLE
		public Assignment getDefaultValAssignment_4() { return cDefaultValAssignment_4; }

		//SPINDOUBLE
		public RuleCall getDefaultValSPINDOUBLEParserRuleCall_4_0() { return cDefaultValSPINDOUBLEParserRuleCall_4_0; }
	}

	public class GetDelayScaleControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.GetDelayScaleControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetDelayScaleControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRatioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRatioIDTerminalRuleCall_1_0 = (RuleCall)cRatioAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthIDTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Assignment cOffsetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOffsetIDTerminalRuleCall_3_0 = (RuleCall)cOffsetAssignment_3.eContents().get(0);
		private final Assignment cControlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cControlIDTerminalRuleCall_4_0 = (RuleCall)cControlAssignment_4.eContents().get(0);
		
		//GetDelayScaleControl:
		//	'@getDelayScaleControl' ratio=ID length=ID offset=ID control=ID?;
		@Override public ParserRule getRule() { return rule; }

		//'@getDelayScaleControl' ratio=ID length=ID offset=ID control=ID?
		public Group getGroup() { return cGroup; }

		//'@getDelayScaleControl'
		public Keyword getGetDelayScaleControlKeyword_0() { return cGetDelayScaleControlKeyword_0; }

		//ratio=ID
		public Assignment getRatioAssignment_1() { return cRatioAssignment_1; }

		//ID
		public RuleCall getRatioIDTerminalRuleCall_1_0() { return cRatioIDTerminalRuleCall_1_0; }

		//length=ID
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//ID
		public RuleCall getLengthIDTerminalRuleCall_2_0() { return cLengthIDTerminalRuleCall_2_0; }

		//offset=ID
		public Assignment getOffsetAssignment_3() { return cOffsetAssignment_3; }

		//ID
		public RuleCall getOffsetIDTerminalRuleCall_3_0() { return cOffsetIDTerminalRuleCall_3_0; }

		//control=ID?
		public Assignment getControlAssignment_4() { return cControlAssignment_4; }

		//ID
		public RuleCall getControlIDTerminalRuleCall_4_0() { return cControlIDTerminalRuleCall_4_0; }
	}

	public class ReadChorusTapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ReadChorusTap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadChorusTapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLfoIDTerminalRuleCall_1_0 = (RuleCall)cLfoAssignment_1.eContents().get(0);
		private final Assignment cPhaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPhaseINTTerminalRuleCall_2_0 = (RuleCall)cPhaseAssignment_2.eContents().get(0);
		private final Assignment cRatioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRatioIDTerminalRuleCall_3_0 = (RuleCall)cRatioAssignment_3.eContents().get(0);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthIDTerminalRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		private final Assignment cOffsetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOffsetIDTerminalRuleCall_5_0 = (RuleCall)cOffsetAssignment_5.eContents().get(0);
		
		//ReadChorusTap:
		//	'@readChorusTap' lfo=ID phase=INT ratio=ID length=ID offset=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@readChorusTap' lfo=ID phase=INT ratio=ID length=ID offset=ID
		public Group getGroup() { return cGroup; }

		//'@readChorusTap'
		public Keyword getReadChorusTapKeyword_0() { return cReadChorusTapKeyword_0; }

		//lfo=ID
		public Assignment getLfoAssignment_1() { return cLfoAssignment_1; }

		//ID
		public RuleCall getLfoIDTerminalRuleCall_1_0() { return cLfoIDTerminalRuleCall_1_0; }

		//phase=INT
		public Assignment getPhaseAssignment_2() { return cPhaseAssignment_2; }

		//INT
		public RuleCall getPhaseINTTerminalRuleCall_2_0() { return cPhaseINTTerminalRuleCall_2_0; }

		//ratio=ID
		public Assignment getRatioAssignment_3() { return cRatioAssignment_3; }

		//ID
		public RuleCall getRatioIDTerminalRuleCall_3_0() { return cRatioIDTerminalRuleCall_3_0; }

		//length=ID
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }

		//ID
		public RuleCall getLengthIDTerminalRuleCall_4_0() { return cLengthIDTerminalRuleCall_4_0; }

		//offset=ID
		public Assignment getOffsetAssignment_5() { return cOffsetAssignment_5; }

		//ID
		public RuleCall getOffsetIDTerminalRuleCall_5_0() { return cOffsetIDTerminalRuleCall_5_0; }
	}

	public class GetSamplesFromRatioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.GetSamplesFromRatio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetSamplesFromRatioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cRatioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRatioSPINDOUBLEParserRuleCall_2_0 = (RuleCall)cRatioAssignment_2.eContents().get(0);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthSPINDOUBLEParserRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		
		//GetSamplesFromRatio:
		//	'@getSamplesFromRatio' variable=ID ratio=SPINDOUBLE length=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'@getSamplesFromRatio' variable=ID ratio=SPINDOUBLE length=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'@getSamplesFromRatio'
		public Keyword getGetSamplesFromRatioKeyword_0() { return cGetSamplesFromRatioKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//ratio=SPINDOUBLE
		public Assignment getRatioAssignment_2() { return cRatioAssignment_2; }

		//SPINDOUBLE
		public RuleCall getRatioSPINDOUBLEParserRuleCall_2_0() { return cRatioSPINDOUBLEParserRuleCall_2_0; }

		//length=SPINDOUBLE
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }

		//SPINDOUBLE
		public RuleCall getLengthSPINDOUBLEParserRuleCall_3_0() { return cLengthSPINDOUBLEParserRuleCall_3_0; }
	}

	public class SemitonesToRmpRateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SemitonesToRmpRate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemitonesToRmpRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cSemitonesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSemitonesSPINDOUBLEParserRuleCall_2_0 = (RuleCall)cSemitonesAssignment_2.eContents().get(0);
		
		//SemitonesToRmpRate:
		//	'@semitonesToRmpRate' variable=ID semitones=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'@semitonesToRmpRate' variable=ID semitones=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'@semitonesToRmpRate'
		public Keyword getSemitonesToRmpRateKeyword_0() { return cSemitonesToRmpRateKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//semitones=SPINDOUBLE
		public Assignment getSemitonesAssignment_2() { return cSemitonesAssignment_2; }

		//SPINDOUBLE
		public RuleCall getSemitonesSPINDOUBLEParserRuleCall_2_0() { return cSemitonesSPINDOUBLEParserRuleCall_2_0; }
	}

	public class GetBaseAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.GetBaseAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetBaseAddressAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetBaseAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GetBaseAddress:
		//	{GetBaseAddress} '@getBaseAddress';
		@Override public ParserRule getRule() { return rule; }

		//{GetBaseAddress} '@getBaseAddress'
		public Group getGroup() { return cGroup; }

		//{GetBaseAddress}
		public Action getGetBaseAddressAction_0() { return cGetBaseAddressAction_0; }

		//'@getBaseAddress'
		public Keyword getGetBaseAddressKeyword_1() { return cGetBaseAddressKeyword_1; }
	}

	public class SetOutputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SetOutputPin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetOutputPinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPinNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPinNameAlternatives_1_0 = (Alternatives)cPinNameAssignment_1.eContents().get(0);
		private final RuleCall cPinNameIDTerminalRuleCall_1_0_0 = (RuleCall)cPinNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cPinNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPinNameAlternatives_1_0.eContents().get(1);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		
		//SetOutputPin:
		//	'@setOutputPin' pinName=(ID | STRING) varName=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@setOutputPin' pinName=(ID | STRING) varName=ID
		public Group getGroup() { return cGroup; }

		//'@setOutputPin'
		public Keyword getSetOutputPinKeyword_0() { return cSetOutputPinKeyword_0; }

		//pinName=(ID | STRING)
		public Assignment getPinNameAssignment_1() { return cPinNameAssignment_1; }

		//(ID | STRING)
		public Alternatives getPinNameAlternatives_1_0() { return cPinNameAlternatives_1_0; }

		//ID
		public RuleCall getPinNameIDTerminalRuleCall_1_0_0() { return cPinNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getPinNameSTRINGTerminalRuleCall_1_0_1() { return cPinNameSTRINGTerminalRuleCall_1_0_1; }

		//varName=ID
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_2_0() { return cVarNameIDTerminalRuleCall_2_0; }
	}

	public class MinusDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.MinusDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinusDoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighIDTerminalRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		private final Assignment cLowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowIDTerminalRuleCall_3_0 = (RuleCall)cLowAssignment_3.eContents().get(0);
		
		//MinusDouble:
		//	'@minusDouble' varName=ID high=ID low=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@minusDouble' varName=ID high=ID low=ID
		public Group getGroup() { return cGroup; }

		//'@minusDouble'
		public Keyword getMinusDoubleKeyword_0() { return cMinusDoubleKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//high=ID
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }

		//ID
		public RuleCall getHighIDTerminalRuleCall_2_0() { return cHighIDTerminalRuleCall_2_0; }

		//low=ID
		public Assignment getLowAssignment_3() { return cLowAssignment_3; }

		//ID
		public RuleCall getLowIDTerminalRuleCall_3_0() { return cLowIDTerminalRuleCall_3_0; }
	}

	public class DivideDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.DivideDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivideDoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighIDTerminalRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		private final Assignment cLowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowIDTerminalRuleCall_3_0 = (RuleCall)cLowAssignment_3.eContents().get(0);
		
		//DivideDouble:
		//	'@divideDouble' varName=ID high=ID low=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@divideDouble' varName=ID high=ID low=ID
		public Group getGroup() { return cGroup; }

		//'@divideDouble'
		public Keyword getDivideDoubleKeyword_0() { return cDivideDoubleKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//high=ID
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }

		//ID
		public RuleCall getHighIDTerminalRuleCall_2_0() { return cHighIDTerminalRuleCall_2_0; }

		//low=ID
		public Assignment getLowAssignment_3() { return cLowAssignment_3; }

		//ID
		public RuleCall getLowIDTerminalRuleCall_3_0() { return cLowIDTerminalRuleCall_3_0; }
	}

	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSPINDOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Equals:
		//	'@equals' varName=ID value=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'@equals' varName=ID value=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'@equals'
		public Keyword getEqualsKeyword_0() { return cEqualsKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//value=SPINDOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SPINDOUBLE
		public RuleCall getValueSPINDOUBLEParserRuleCall_2_0() { return cValueSPINDOUBLEParserRuleCall_2_0; }
	}

	public class EqualsBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.EqualsBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLEANParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//EqualsBool:
		//	'@equalsBool' varName=ID value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//'@equalsBool' varName=ID value=BOOLEAN
		public Group getGroup() { return cGroup; }

		//'@equalsBool'
		public Keyword getEqualsBoolKeyword_0() { return cEqualsBoolKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_2_0() { return cValueBOOLEANParserRuleCall_2_0; }
	}

	public class DivideIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.DivideInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivideIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighIDTerminalRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		private final Assignment cLowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowINTTerminalRuleCall_3_0 = (RuleCall)cLowAssignment_3.eContents().get(0);
		
		//DivideInt:
		//	'@divideInt' varName=ID high=ID low=INT;
		@Override public ParserRule getRule() { return rule; }

		//'@divideInt' varName=ID high=ID low=INT
		public Group getGroup() { return cGroup; }

		//'@divideInt'
		public Keyword getDivideIntKeyword_0() { return cDivideIntKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//high=ID
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }

		//ID
		public RuleCall getHighIDTerminalRuleCall_2_0() { return cHighIDTerminalRuleCall_2_0; }

		//low=INT
		public Assignment getLowAssignment_3() { return cLowAssignment_3; }

		//INT
		public RuleCall getLowINTTerminalRuleCall_3_0() { return cLowINTTerminalRuleCall_3_0; }
	}

	public class MultiplyDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.MultiplyDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiplyDoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighIDTerminalRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		private final Assignment cLowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowIDTerminalRuleCall_3_0 = (RuleCall)cLowAssignment_3.eContents().get(0);
		
		//MultiplyDouble:
		//	'@multiplyDouble' varName=ID high=ID low=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@multiplyDouble' varName=ID high=ID low=ID
		public Group getGroup() { return cGroup; }

		//'@multiplyDouble'
		public Keyword getMultiplyDoubleKeyword_0() { return cMultiplyDoubleKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//high=ID
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }

		//ID
		public RuleCall getHighIDTerminalRuleCall_2_0() { return cHighIDTerminalRuleCall_2_0; }

		//low=ID
		public Assignment getLowAssignment_3() { return cLowAssignment_3; }

		//ID
		public RuleCall getLowIDTerminalRuleCall_3_0() { return cLowIDTerminalRuleCall_3_0; }
	}

	public class SetChorusWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SetChorusWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetChorusWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthIDTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleIDTerminalRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		
		//SetChorusWidth:
		//	'@setChorusWidth' varName=ID length=ID scale=ID;
		@Override public ParserRule getRule() { return rule; }

		//'@setChorusWidth' varName=ID length=ID scale=ID
		public Group getGroup() { return cGroup; }

		//'@setChorusWidth'
		public Keyword getSetChorusWidthKeyword_0() { return cSetChorusWidthKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//length=ID
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//ID
		public RuleCall getLengthIDTerminalRuleCall_2_0() { return cLengthIDTerminalRuleCall_2_0; }

		//scale=ID
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }

		//ID
		public RuleCall getScaleIDTerminalRuleCall_3_0() { return cScaleIDTerminalRuleCall_3_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInst_B15_S1_9ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInst_B6_S1_14ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInst_S1_14_S1_10ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInst_B6ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInst_B24ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSkipParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJamParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInst_X0ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLoadSinLFOParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLoadRampLFOParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cChorusReadDelayParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cChorusReadValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cChorusScaleOffsetParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLogParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cReadDelayPointerParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		////------------------------ regular Spin ASM instructions
		//Instruction:
		//	Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO |
		//	LoadRampLFO | ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer;
		@Override public ParserRule getRule() { return rule; }

		//Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO | LoadRampLFO
		//| ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer
		public Alternatives getAlternatives() { return cAlternatives; }

		//Inst_B15_S1_9
		public RuleCall getInst_B15_S1_9ParserRuleCall_0() { return cInst_B15_S1_9ParserRuleCall_0; }

		//Inst_B6_S1_14
		public RuleCall getInst_B6_S1_14ParserRuleCall_1() { return cInst_B6_S1_14ParserRuleCall_1; }

		//Inst_S1_14_S1_10
		public RuleCall getInst_S1_14_S1_10ParserRuleCall_2() { return cInst_S1_14_S1_10ParserRuleCall_2; }

		//Inst_B6
		public RuleCall getInst_B6ParserRuleCall_3() { return cInst_B6ParserRuleCall_3; }

		//Inst_B24
		public RuleCall getInst_B24ParserRuleCall_4() { return cInst_B24ParserRuleCall_4; }

		//Skip
		public RuleCall getSkipParserRuleCall_5() { return cSkipParserRuleCall_5; }

		//Jam
		public RuleCall getJamParserRuleCall_6() { return cJamParserRuleCall_6; }

		//Inst_X0
		public RuleCall getInst_X0ParserRuleCall_7() { return cInst_X0ParserRuleCall_7; }

		//LoadSinLFO
		public RuleCall getLoadSinLFOParserRuleCall_8() { return cLoadSinLFOParserRuleCall_8; }

		//LoadRampLFO
		public RuleCall getLoadRampLFOParserRuleCall_9() { return cLoadRampLFOParserRuleCall_9; }

		//ChorusReadDelay
		public RuleCall getChorusReadDelayParserRuleCall_10() { return cChorusReadDelayParserRuleCall_10; }

		//ChorusReadValue
		public RuleCall getChorusReadValueParserRuleCall_11() { return cChorusReadValueParserRuleCall_11; }

		//ChorusScaleOffset
		public RuleCall getChorusScaleOffsetParserRuleCall_12() { return cChorusScaleOffsetParserRuleCall_12; }

		//Log
		public RuleCall getLogParserRuleCall_13() { return cLogParserRuleCall_13; }

		//ReadDelayPointer
		public RuleCall getReadDelayPointerParserRuleCall_14() { return cReadDelayPointerParserRuleCall_14; }
	}

	public class Inst_B6_S1_14Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_B6_S1_14");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadRegisterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWriteRegisterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReadRegisterFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaxxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWriteRegisterHighshelfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWriteRegisterLowshelfParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Inst_B6_S1_14:
		//	ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf;
		@Override public ParserRule getRule() { return rule; }

		//ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReadRegister
		public RuleCall getReadRegisterParserRuleCall_0() { return cReadRegisterParserRuleCall_0; }

		//WriteRegister
		public RuleCall getWriteRegisterParserRuleCall_1() { return cWriteRegisterParserRuleCall_1; }

		//ReadRegisterFilter
		public RuleCall getReadRegisterFilterParserRuleCall_2() { return cReadRegisterFilterParserRuleCall_2; }

		//Maxx
		public RuleCall getMaxxParserRuleCall_3() { return cMaxxParserRuleCall_3; }

		//WriteRegisterHighshelf
		public RuleCall getWriteRegisterHighshelfParserRuleCall_4() { return cWriteRegisterHighshelfParserRuleCall_4; }

		//WriteRegisterLowshelf
		public RuleCall getWriteRegisterLowshelfParserRuleCall_5() { return cWriteRegisterLowshelfParserRuleCall_5; }
	}

	public class Inst_B15_S1_9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_B15_S1_9");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadDelayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWriteDelayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWriteAllpassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_B15_S1_9:
		//	ReadDelay | WriteDelay | WriteAllpass;
		@Override public ParserRule getRule() { return rule; }

		//ReadDelay | WriteDelay | WriteAllpass
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReadDelay
		public RuleCall getReadDelayParserRuleCall_0() { return cReadDelayParserRuleCall_0; }

		//WriteDelay
		public RuleCall getWriteDelayParserRuleCall_1() { return cWriteDelayParserRuleCall_1; }

		//WriteAllpass
		public RuleCall getWriteAllpassParserRuleCall_2() { return cWriteAllpassParserRuleCall_2; }
	}

	public class Inst_B6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_B6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMulxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLdaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inst_B6:
		//	Mulx | Ldax;
		@Override public ParserRule getRule() { return rule; }

		//Mulx | Ldax
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mulx
		public RuleCall getMulxParserRuleCall_0() { return cMulxParserRuleCall_0; }

		//Ldax
		public RuleCall getLdaxParserRuleCall_1() { return cLdaxParserRuleCall_1; }
	}

	public class Inst_B24Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_B24");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_B24:
		//	And | Or | Xor;
		@Override public ParserRule getRule() { return rule; }

		//And | Or | Xor
		public Alternatives getAlternatives() { return cAlternatives; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }

		//Xor
		public RuleCall getXorParserRuleCall_2() { return cXorParserRuleCall_2; }
	}

	public class Inst_X0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_X0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbsaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_X0:
		//	Clr | Not | Absa;
		@Override public ParserRule getRule() { return rule; }

		//Clr | Not | Absa
		public Alternatives getAlternatives() { return cAlternatives; }

		//Clr
		public RuleCall getClrParserRuleCall_0() { return cClrParserRuleCall_0; }

		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }

		//Absa
		public RuleCall getAbsaParserRuleCall_2() { return cAbsaParserRuleCall_2; }
	}

	public class Inst_S1_14_S1_10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Inst_S1_14_S1_10");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScaleOffsetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inst_S1_14_S1_10:
		//	Exp | ScaleOffset;
		@Override public ParserRule getRule() { return rule; }

		//Exp | ScaleOffset
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exp
		public RuleCall getExpParserRuleCall_0() { return cExpParserRuleCall_0; }

		//ScaleOffset
		public RuleCall getScaleOffsetParserRuleCall_1() { return cScaleOffsetParserRuleCall_1; }
	}

	public class ReadRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ReadRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadRegister:
		//	'rdax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'rdax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'rdax'
		public Keyword getRdaxKeyword_0() { return cRdaxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterLowshelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.WriteRegisterLowshelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrlxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegisterLowshelf:
		//	'wrlx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wrlx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wrlx'
		public Keyword getWrlxKeyword_0() { return cWrlxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterHighshelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.WriteRegisterHighshelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrhxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegisterHighshelf:
		//	'wrhx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wrhx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wrhx'
		public Keyword getWrhxKeyword_0() { return cWrhxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.WriteRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWraxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegister:
		//	'wrax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wrax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wrax'
		public Keyword getWraxKeyword_0() { return cWraxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class MaxxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Maxx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Maxx:
		//	'maxx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'maxx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'maxx'
		public Keyword getMaxxKeyword_0() { return cMaxxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ReadRegisterFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ReadRegisterFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdfxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadRegisterFilter:
		//	'rdfx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'rdfx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'rdfx'
		public Keyword getRdfxKeyword_0() { return cRdfxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class MulxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Mulx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Mulx:
		//	'mulx' arg1=ID;
		@Override public ParserRule getRule() { return rule; }

		//'mulx' arg1=ID
		public Group getGroup() { return cGroup; }

		//'mulx'
		public Keyword getMulxKeyword_0() { return cMulxKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class LdaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Ldax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Ldax:
		//	'ldax' arg1=ID;
		@Override public ParserRule getRule() { return rule; }

		//'ldax' arg1=ID
		public Group getGroup() { return cGroup; }

		//'ldax'
		public Keyword getLdaxKeyword_0() { return cLdaxKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Exp:
		//	'exp' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'exp' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'exp'
		public Keyword getExpKeyword_0() { return cExpKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Log:
		//	'log' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'log' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'log'
		public Keyword getLogKeyword_0() { return cLogKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ScaleOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ScaleOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ScaleOffset:
		//	'sof' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'sof' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'sof'
		public Keyword getSofKeyword_0() { return cSofKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.WriteDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteDelay:
		//	'wra' arg1=SPINMEM ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wra' arg1=SPINMEM ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wra'
		public Keyword getWraKeyword_0() { return cWraKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteAllpassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.WriteAllpass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteAllpass:
		//	'wrap' arg1=SPINMEM ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wrap' arg1=SPINMEM ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wrap'
		public Keyword getWrapKeyword_0() { return cWrapKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ReadDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ReadDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadDelay:
		//	'rda' arg1=SPINMEM ',' arg2=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'rda' arg1=SPINMEM ',' arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'rda'
		public Keyword getRdaKeyword_0() { return cRdaKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class LoadSinLFOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.LoadSinLFO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWldsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArg3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArg3SPINDOUBLEParserRuleCall_5_0 = (RuleCall)cArg3Assignment_5.eContents().get(0);
		
		//LoadSinLFO:
		//	'wlds' arg1=SPINREGISTER ',' arg2=SPINDOUBLE ',' arg3=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'wlds' arg1=SPINREGISTER ',' arg2=SPINDOUBLE ',' arg3=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'wlds'
		public Keyword getWldsKeyword_0() { return cWldsKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }

		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//arg3=SPINDOUBLE
		public Assignment getArg3Assignment_5() { return cArg3Assignment_5; }

		//SPINDOUBLE
		public RuleCall getArg3SPINDOUBLEParserRuleCall_5_0() { return cArg3SPINDOUBLEParserRuleCall_5_0; }
	}

	public class LoadRampLFOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.LoadRampLFO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWldrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINREGISTERParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArg3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArg3SPINREGISTERParserRuleCall_5_0 = (RuleCall)cArg3Assignment_5.eContents().get(0);
		
		//LoadRampLFO:
		//	'wldr' arg1=SPINREGISTER ',' arg2=SPINREGISTER ',' arg3=SPINREGISTER;
		@Override public ParserRule getRule() { return rule; }

		//'wldr' arg1=SPINREGISTER ',' arg2=SPINREGISTER ',' arg3=SPINREGISTER
		public Group getGroup() { return cGroup; }

		//'wldr'
		public Keyword getWldrKeyword_0() { return cWldrKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINREGISTER
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINREGISTER
		public RuleCall getArg2SPINREGISTERParserRuleCall_3_0() { return cArg2SPINREGISTERParserRuleCall_3_0; }

		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//arg3=SPINREGISTER
		public Assignment getArg3Assignment_5() { return cArg3Assignment_5; }

		//SPINREGISTER
		public RuleCall getArg3SPINREGISTERParserRuleCall_5_0() { return cArg3SPINREGISTERParserRuleCall_5_0; }
	}

	public class ChorusReadDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ChorusReadDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoRdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArg2SPINCHOREGFLAGSParserRuleCall_4_0 = (RuleCall)cArg2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArg3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArg3SPINMEMParserRuleCall_6_0 = (RuleCall)cArg3Assignment_6.eContents().get(0);
		
		//// Chorus instructions
		//ChorusReadDelay:
		//	'cho rda' ',' arg1=SPINREGISTER ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINMEM;
		@Override public ParserRule getRule() { return rule; }

		//'cho rda' ',' arg1=SPINREGISTER ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINMEM
		public Group getGroup() { return cGroup; }

		//'cho rda'
		public Keyword getChoRdaKeyword_0() { return cChoRdaKeyword_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_2_0() { return cArg1SPINREGISTERParserRuleCall_2_0; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//arg2=SPINCHOREGFLAGS
		public Assignment getArg2Assignment_4() { return cArg2Assignment_4; }

		//SPINCHOREGFLAGS
		public RuleCall getArg2SPINCHOREGFLAGSParserRuleCall_4_0() { return cArg2SPINCHOREGFLAGSParserRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//arg3=SPINMEM
		public Assignment getArg3Assignment_6() { return cArg3Assignment_6; }

		//SPINMEM
		public RuleCall getArg3SPINMEMParserRuleCall_6_0() { return cArg3SPINMEMParserRuleCall_6_0; }
	}

	public class ChorusReadValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ChorusReadValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoRdalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		
		//ChorusReadValue:
		//	'cho rdal' ',' arg1=SPINREGISTER;
		@Override public ParserRule getRule() { return rule; }

		//'cho rdal' ',' arg1=SPINREGISTER
		public Group getGroup() { return cGroup; }

		//'cho rdal'
		public Keyword getChoRdalKeyword_0() { return cChoRdalKeyword_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_2_0() { return cArg1SPINREGISTERParserRuleCall_2_0; }
	}

	public class ChorusScaleOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ChorusScaleOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoSofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1IDTerminalRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArg2SPINCHOREGFLAGSParserRuleCall_4_0 = (RuleCall)cArg2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArg3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArg3SPINDOUBLEParserRuleCall_6_0 = (RuleCall)cArg3Assignment_6.eContents().get(0);
		
		//ChorusScaleOffset:
		//	'cho sof' ',' arg1=ID ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'cho sof' ',' arg1=ID ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'cho sof'
		public Keyword getChoSofKeyword_0() { return cChoSofKeyword_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=ID
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_2_0() { return cArg1IDTerminalRuleCall_2_0; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//arg2=SPINCHOREGFLAGS
		public Assignment getArg2Assignment_4() { return cArg2Assignment_4; }

		//SPINCHOREGFLAGS
		public RuleCall getArg2SPINCHOREGFLAGSParserRuleCall_4_0() { return cArg2SPINCHOREGFLAGSParserRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//arg3=SPINDOUBLE
		public Assignment getArg3Assignment_6() { return cArg3Assignment_6; }

		//SPINDOUBLE
		public RuleCall getArg3SPINDOUBLEParserRuleCall_6_0() { return cArg3SPINDOUBLEParserRuleCall_6_0; }
	}

	public class ReadDelayPointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ReadDelayPointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRmpaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//ReadDelayPointer:
		//	'rmpa' arg1=SPINDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//'rmpa' arg1=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//'rmpa'
		public Keyword getRmpaKeyword_0() { return cRmpaKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//// single argument instructions
		//And:
		//	'and' arg1=BINARY24;
		@Override public ParserRule getRule() { return rule; }

		//'and' arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Or:
		//	'or' arg1=BINARY24;
		@Override public ParserRule getRule() { return rule; }

		//'or' arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//'or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class XorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Xor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Xor:
		//	'xor' arg1=BINARY24;
		@Override public ParserRule getRule() { return rule; }

		//'xor' arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//'xor'
		public Keyword getXorKeyword_0() { return cXorKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class JamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Jam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Jam:
		//	'jam' arg1=ID;
		@Override public ParserRule getRule() { return rule; }

		//'jam' arg1=ID
		public Group getGroup() { return cGroup; }

		//'jam'
		public Keyword getJamKeyword_0() { return cJamKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class ClrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Clr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// zero argument instructions
		//Clr:
		//	{Clr} "clr";
		@Override public ParserRule getRule() { return rule; }

		//{Clr} "clr"
		public Group getGroup() { return cGroup; }

		//{Clr}
		public Action getClrAction_0() { return cClrAction_0; }

		//"clr"
		public Keyword getClrKeyword_1() { return cClrKeyword_1; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Not:
		//	{Not} 'not';
		@Override public ParserRule getRule() { return rule; }

		//{Not} 'not'
		public Group getGroup() { return cGroup; }

		//{Not}
		public Action getNotAction_0() { return cNotAction_0; }

		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}

	public class AbsaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Absa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbsaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbsaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Absa:
		//	{Absa} 'absa';
		@Override public ParserRule getRule() { return rule; }

		//{Absa} 'absa'
		public Group getGroup() { return cGroup; }

		//{Absa}
		public Action getAbsaAction_0() { return cAbsaAction_0; }

		//'absa'
		public Keyword getAbsaKeyword_1() { return cAbsaKeyword_1; }
	}

	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_1_0 = (RuleCall)cFlagsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLabelLabelCrossReference_4_0 = (CrossReference)cLabelAssignment_4.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_4_0_1 = (RuleCall)cLabelLabelCrossReference_4_0.eContents().get(1);
		
		////Then there's Skip
		//Skip:
		//	'skp' flags=ID ('|' ID)* ',' label=[Label];
		@Override public ParserRule getRule() { return rule; }

		//'skp' flags=ID ('|' ID)* ',' label=[Label]
		public Group getGroup() { return cGroup; }

		//'skp'
		public Keyword getSkpKeyword_0() { return cSkpKeyword_0; }

		//flags=ID
		public Assignment getFlagsAssignment_1() { return cFlagsAssignment_1; }

		//ID
		public RuleCall getFlagsIDTerminalRuleCall_1_0() { return cFlagsIDTerminalRuleCall_1_0; }

		//('|' ID)*
		public Group getGroup_2() { return cGroup_2; }

		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//label=[Label]
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_4_0() { return cLabelLabelCrossReference_4_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_4_0_1() { return cLabelLabelIDTerminalRuleCall_4_0_1; }
	}

	public class SPINDOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SPINDOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		
		//// --------------- data type rules -----------------------------
		//SPINDOUBLE:
		//	'-'? (ID | INT ('.' INT)?);
		@Override public ParserRule getRule() { return rule; }

		//'-'? (ID | INT ('.' INT)?)
		public Group getGroup() { return cGroup; }

		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//ID | INT ('.' INT)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//INT ('.' INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }

		//('.' INT)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//'.'
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_1() { return cINTTerminalRuleCall_1_1_1_1; }
	}

	public class SPINREGISTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SPINREGISTER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//SPINREGISTER:
		//	'-'? (ID | INT);
		@Override public ParserRule getRule() { return rule; }

		//'-'? (ID | INT)
		public Group getGroup() { return cGroup; }

		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//ID | INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class SPINCHOREGFLAGSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SPINCHOREGFLAGS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//SPINCHOREGFLAGS:
		//	INT | (ID ('|' ID)*)?;
		@Override public ParserRule getRule() { return rule; }

		//INT | (ID ('|' ID)*)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//(ID ('|' ID)*)?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//('|' ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}

	public class SPINMEMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SPINMEM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBufferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBufferSPINBUFParserRuleCall_0_0 = (RuleCall)cBufferAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cValueAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_1_0_0_0 = (RuleCall)cValueAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cScaleAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cScaleIDTerminalRuleCall_1_0_1_1_0 = (RuleCall)cScaleAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cOffsetAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cOffsetOffsetCrossReference_1_1_0 = (CrossReference)cOffsetAssignment_1_1.eContents().get(0);
		private final RuleCall cOffsetOffsetIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOffsetOffsetCrossReference_1_1_0.eContents().get(1);
		
		//SPINMEM:
		//	buffer=SPINBUF (value=INT ('*' scale=ID)? | offset=[Offset])?;
		@Override public ParserRule getRule() { return rule; }

		//buffer=SPINBUF (value=INT ('*' scale=ID)? | offset=[Offset])?
		public Group getGroup() { return cGroup; }

		//buffer=SPINBUF
		public Assignment getBufferAssignment_0() { return cBufferAssignment_0; }

		//SPINBUF
		public RuleCall getBufferSPINBUFParserRuleCall_0_0() { return cBufferSPINBUFParserRuleCall_0_0; }

		//(value=INT ('*' scale=ID)? | offset=[Offset])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=INT ('*' scale=ID)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_0_0() { return cValueAssignment_1_0_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0_0_0() { return cValueINTTerminalRuleCall_1_0_0_0; }

		//('*' scale=ID)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_1_0() { return cAsteriskKeyword_1_0_1_0; }

		//scale=ID
		public Assignment getScaleAssignment_1_0_1_1() { return cScaleAssignment_1_0_1_1; }

		//ID
		public RuleCall getScaleIDTerminalRuleCall_1_0_1_1_0() { return cScaleIDTerminalRuleCall_1_0_1_1_0; }

		//offset=[Offset]
		public Assignment getOffsetAssignment_1_1() { return cOffsetAssignment_1_1; }

		//[Offset]
		public CrossReference getOffsetOffsetCrossReference_1_1_0() { return cOffsetOffsetCrossReference_1_1_0; }

		//ID
		public RuleCall getOffsetOffsetIDTerminalRuleCall_1_1_0_1() { return cOffsetOffsetIDTerminalRuleCall_1_1_0_1; }
	}

	public class SPINBUFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SPINBUF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//SPINBUF:
		//	ID ('#' | '^')? ('+' | '-')?;
		@Override public ParserRule getRule() { return rule; }

		//ID ('#' | '^')? ('+' | '-')?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('#' | '^')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//('+' | '-')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
	}

	public class BINARY24Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.BINARY24");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//BINARY24:
		//	('%' INT) ID* | '$' INT* ID*;
		@Override public ParserRule getRule() { return rule; }

		//('%' INT) ID* | '$' INT* ID*
		public Alternatives getAlternatives() { return cAlternatives; }

		//('%' INT) ID*
		public Group getGroup_0() { return cGroup_0; }

		//'%' INT
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'%'
		public Keyword getPercentSignKeyword_0_0_0() { return cPercentSignKeyword_0_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_1() { return cINTTerminalRuleCall_0_0_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//'$' INT* ID*
		public Group getGroup_1() { return cGroup_1; }

		//'$'
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }

		//INT*
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final PinElements pPin;
	private final InputPinElements pInputPin;
	private final OutputPinElements pOutputPin;
	private final AudioInputElements pAudioInput;
	private final AudioOutputElements pAudioOutput;
	private final ControlInputElements pControlInput;
	private final ControlOutputElements pControlOutput;
	private final SpinElementElements pSpinElement;
	private final SpinEquateElements pSpinEquate;
	private final SpinIntElements pSpinInt;
	private final MemElements pMem;
	private final OffsetElements pOffset;
	private final SpinBoolElements pSpinBool;
	private final ControlElements pControl;
	private final SpinSliderLabelElements pSpinSliderLabel;
	private final SliderLabelSpinnerElements pSliderLabelSpinner;
	private final SliderLabelCheckBoxElements pSliderLabelCheckBox;
	private final SpinCheckBoxElements pSpinCheckBox;
	private final LogFreqSliderLabelElements pLogFreqSliderLabel;
	private final LogFreq2SliderLabelElements pLogFreq2SliderLabel;
	private final SpinRadioButtonElements pSpinRadioButton;
	private final SpinComboBoxElements pSpinComboBox;
	private final CommentElements pComment;
	private final LabelElements pLabel;
	private final MacroElements pMacro;
	private final IsPinConnectedElements pIsPinConnected;
	private final IsGreaterThanElements pIsGreaterThan;
	private final IsLessThanElements pIsLessThan;
	private final IsEqualToElements pIsEqualTo;
	private final IsTrueElements pIsTrue;
	private final IsElseElements pIsElse;
	private final IsEndifElements pIsEndif;
	private final IsOrElements pIsOr;
	private final GetInputDefaultElements pGetInputDefault;
	private final GetDelayScaleControlElements pGetDelayScaleControl;
	private final ReadChorusTapElements pReadChorusTap;
	private final GetSamplesFromRatioElements pGetSamplesFromRatio;
	private final SemitonesToRmpRateElements pSemitonesToRmpRate;
	private final GetBaseAddressElements pGetBaseAddress;
	private final SetOutputPinElements pSetOutputPin;
	private final MinusDoubleElements pMinusDouble;
	private final DivideDoubleElements pDivideDouble;
	private final EqualsElements pEquals;
	private final EqualsBoolElements pEqualsBool;
	private final DivideIntElements pDivideInt;
	private final MultiplyDoubleElements pMultiplyDouble;
	private final SetChorusWidthElements pSetChorusWidth;
	private final InstructionElements pInstruction;
	private final Inst_B6_S1_14Elements pInst_B6_S1_14;
	private final Inst_B15_S1_9Elements pInst_B15_S1_9;
	private final Inst_B6Elements pInst_B6;
	private final Inst_B24Elements pInst_B24;
	private final Inst_X0Elements pInst_X0;
	private final Inst_S1_14_S1_10Elements pInst_S1_14_S1_10;
	private final ReadRegisterElements pReadRegister;
	private final WriteRegisterLowshelfElements pWriteRegisterLowshelf;
	private final WriteRegisterHighshelfElements pWriteRegisterHighshelf;
	private final WriteRegisterElements pWriteRegister;
	private final MaxxElements pMaxx;
	private final ReadRegisterFilterElements pReadRegisterFilter;
	private final MulxElements pMulx;
	private final LdaxElements pLdax;
	private final ExpElements pExp;
	private final LogElements pLog;
	private final ScaleOffsetElements pScaleOffset;
	private final WriteDelayElements pWriteDelay;
	private final WriteAllpassElements pWriteAllpass;
	private final ReadDelayElements pReadDelay;
	private final LoadSinLFOElements pLoadSinLFO;
	private final LoadRampLFOElements pLoadRampLFO;
	private final ChorusReadDelayElements pChorusReadDelay;
	private final ChorusReadValueElements pChorusReadValue;
	private final ChorusScaleOffsetElements pChorusScaleOffset;
	private final ReadDelayPointerElements pReadDelayPointer;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final XorElements pXor;
	private final JamElements pJam;
	private final ClrElements pClr;
	private final NotElements pNot;
	private final AbsaElements pAbsa;
	private final SkipElements pSkip;
	private final TerminalRule tSC_COMMENT;
	private final SPINDOUBLEElements pSPINDOUBLE;
	private final SPINREGISTERElements pSPINREGISTER;
	private final SPINCHOREGFLAGSElements pSPINCHOREGFLAGS;
	private final SPINMEMElements pSPINMEM;
	private final SPINBUFElements pSPINBUF;
	private final BINARY24Elements pBINARY24;
	private final BOOLEANElements pBOOLEAN;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpinCADGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pPin = new PinElements();
		this.pInputPin = new InputPinElements();
		this.pOutputPin = new OutputPinElements();
		this.pAudioInput = new AudioInputElements();
		this.pAudioOutput = new AudioOutputElements();
		this.pControlInput = new ControlInputElements();
		this.pControlOutput = new ControlOutputElements();
		this.pSpinElement = new SpinElementElements();
		this.pSpinEquate = new SpinEquateElements();
		this.pSpinInt = new SpinIntElements();
		this.pMem = new MemElements();
		this.pOffset = new OffsetElements();
		this.pSpinBool = new SpinBoolElements();
		this.pControl = new ControlElements();
		this.pSpinSliderLabel = new SpinSliderLabelElements();
		this.pSliderLabelSpinner = new SliderLabelSpinnerElements();
		this.pSliderLabelCheckBox = new SliderLabelCheckBoxElements();
		this.pSpinCheckBox = new SpinCheckBoxElements();
		this.pLogFreqSliderLabel = new LogFreqSliderLabelElements();
		this.pLogFreq2SliderLabel = new LogFreq2SliderLabelElements();
		this.pSpinRadioButton = new SpinRadioButtonElements();
		this.pSpinComboBox = new SpinComboBoxElements();
		this.pComment = new CommentElements();
		this.pLabel = new LabelElements();
		this.pMacro = new MacroElements();
		this.pIsPinConnected = new IsPinConnectedElements();
		this.pIsGreaterThan = new IsGreaterThanElements();
		this.pIsLessThan = new IsLessThanElements();
		this.pIsEqualTo = new IsEqualToElements();
		this.pIsTrue = new IsTrueElements();
		this.pIsElse = new IsElseElements();
		this.pIsEndif = new IsEndifElements();
		this.pIsOr = new IsOrElements();
		this.pGetInputDefault = new GetInputDefaultElements();
		this.pGetDelayScaleControl = new GetDelayScaleControlElements();
		this.pReadChorusTap = new ReadChorusTapElements();
		this.pGetSamplesFromRatio = new GetSamplesFromRatioElements();
		this.pSemitonesToRmpRate = new SemitonesToRmpRateElements();
		this.pGetBaseAddress = new GetBaseAddressElements();
		this.pSetOutputPin = new SetOutputPinElements();
		this.pMinusDouble = new MinusDoubleElements();
		this.pDivideDouble = new DivideDoubleElements();
		this.pEquals = new EqualsElements();
		this.pEqualsBool = new EqualsBoolElements();
		this.pDivideInt = new DivideIntElements();
		this.pMultiplyDouble = new MultiplyDoubleElements();
		this.pSetChorusWidth = new SetChorusWidthElements();
		this.pInstruction = new InstructionElements();
		this.pInst_B6_S1_14 = new Inst_B6_S1_14Elements();
		this.pInst_B15_S1_9 = new Inst_B15_S1_9Elements();
		this.pInst_B6 = new Inst_B6Elements();
		this.pInst_B24 = new Inst_B24Elements();
		this.pInst_X0 = new Inst_X0Elements();
		this.pInst_S1_14_S1_10 = new Inst_S1_14_S1_10Elements();
		this.pReadRegister = new ReadRegisterElements();
		this.pWriteRegisterLowshelf = new WriteRegisterLowshelfElements();
		this.pWriteRegisterHighshelf = new WriteRegisterHighshelfElements();
		this.pWriteRegister = new WriteRegisterElements();
		this.pMaxx = new MaxxElements();
		this.pReadRegisterFilter = new ReadRegisterFilterElements();
		this.pMulx = new MulxElements();
		this.pLdax = new LdaxElements();
		this.pExp = new ExpElements();
		this.pLog = new LogElements();
		this.pScaleOffset = new ScaleOffsetElements();
		this.pWriteDelay = new WriteDelayElements();
		this.pWriteAllpass = new WriteAllpassElements();
		this.pReadDelay = new ReadDelayElements();
		this.pLoadSinLFO = new LoadSinLFOElements();
		this.pLoadRampLFO = new LoadRampLFOElements();
		this.pChorusReadDelay = new ChorusReadDelayElements();
		this.pChorusReadValue = new ChorusReadValueElements();
		this.pChorusScaleOffset = new ChorusScaleOffsetElements();
		this.pReadDelayPointer = new ReadDelayPointerElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pXor = new XorElements();
		this.pJam = new JamElements();
		this.pClr = new ClrElements();
		this.pNot = new NotElements();
		this.pAbsa = new AbsaElements();
		this.pSkip = new SkipElements();
		this.tSC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.SC_COMMENT");
		this.pSPINDOUBLE = new SPINDOUBLEElements();
		this.pSPINREGISTER = new SPINREGISTERElements();
		this.pSPINCHOREGFLAGS = new SPINCHOREGFLAGSElements();
		this.pSPINMEM = new SPINMEMElements();
		this.pSPINBUF = new SPINBUFElements();
		this.pBINARY24 = new BINARY24Elements();
		this.pBOOLEAN = new BOOLEANElements();
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.ESCAPED_CHAR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.holycityaudio.spincad.SpinCAD.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.holycityaudio.spincad.SpinCAD".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'@name' name=(ID | STRING) ('@color' color=STRING)?
	//	pins+=Pin+
	//	elements+=SpinElement+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//// ---------- Pins ------------------
	//Pin:
	//	InputPin | OutputPin;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}

	//InputPin:
	//	AudioInput | ControlInput;
	public InputPinElements getInputPinAccess() {
		return pInputPin;
	}
	
	public ParserRule getInputPinRule() {
		return getInputPinAccess().getRule();
	}

	//OutputPin:
	//	AudioOutput | ControlOutput;
	public OutputPinElements getOutputPinAccess() {
		return pOutputPin;
	}
	
	public ParserRule getOutputPinRule() {
		return getOutputPinAccess().getRule();
	}

	//AudioInput:
	//	'@audioInput' varName=ID label=(ID | STRING);
	public AudioInputElements getAudioInputAccess() {
		return pAudioInput;
	}
	
	public ParserRule getAudioInputRule() {
		return getAudioInputAccess().getRule();
	}

	//AudioOutput:
	//	'@audioOutput' varName=ID label=(ID | STRING);
	public AudioOutputElements getAudioOutputAccess() {
		return pAudioOutput;
	}
	
	public ParserRule getAudioOutputRule() {
		return getAudioOutputAccess().getRule();
	}

	//ControlInput:
	//	'@controlInput' varName=ID label=(ID | STRING);
	public ControlInputElements getControlInputAccess() {
		return pControlInput;
	}
	
	public ParserRule getControlInputRule() {
		return getControlInputAccess().getRule();
	}

	//ControlOutput:
	//	'@controlOutput' varName=ID label=(ID | STRING);
	public ControlOutputElements getControlOutputAccess() {
		return pControlOutput;
	}
	
	public ParserRule getControlOutputRule() {
		return getControlOutputAccess().getRule();
	}

	//// --------------- Spin ASM Elements	
	//SpinElement:
	//	SpinInt | Control | SpinEquate | SpinBool | Mem | Instruction | Label | Comment | Macro | Offset;
	public SpinElementElements getSpinElementAccess() {
		return pSpinElement;
	}
	
	public ParserRule getSpinElementRule() {
		return getSpinElementAccess().getRule();
	}

	//// this now includes info to help set up control panels
	//SpinEquate:
	//	'equ' ename=ID value=SPINDOUBLE;
	public SpinEquateElements getSpinEquateAccess() {
		return pSpinEquate;
	}
	
	public ParserRule getSpinEquateRule() {
		return getSpinEquateAccess().getRule();
	}

	//// sometimes you need an integer
	//SpinInt:
	//	'int' ename=ID value=INT;
	public SpinIntElements getSpinIntAccess() {
		return pSpinInt;
	}
	
	public ParserRule getSpinIntRule() {
		return getSpinIntAccess().getRule();
	}

	//Mem:
	//	'mem' buffer=ID length=SPINREGISTER;
	public MemElements getMemAccess() {
		return pMem;
	}
	
	public ParserRule getMemRule() {
		return getMemAccess().getRule();
	}

	//Offset:
	//	'offset' name=ID length=INT;
	public OffsetElements getOffsetAccess() {
		return pOffset;
	}
	
	public ParserRule getOffsetRule() {
		return getOffsetAccess().getRule();
	}

	//// SpinCAD logical variable, usually associated with a Checkbox
	//SpinBool:
	//	'bool' label=ID value=BOOLEAN;
	public SpinBoolElements getSpinBoolAccess() {
		return pSpinBool;
	}
	
	public ParserRule getSpinBoolRule() {
		return getSpinBoolAccess().getRule();
	}

	////---------------------------------------------
	//// -- Control Panel objects 
	//Control:
	//	SpinSliderLabel | SpinCheckBox | LogFreqSliderLabel | LogFreq2SliderLabel | SpinRadioButton | SliderLabelCheckBox |
	//	SpinComboBox | SliderLabelSpinner;
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}

	//SpinSliderLabel:
	//	'@sliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
	//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
	public SpinSliderLabelElements getSpinSliderLabelAccess() {
		return pSpinSliderLabel;
	}
	
	public ParserRule getSpinSliderLabelRule() {
		return getSpinSliderLabelAccess().getRule();
	}

	//SliderLabelSpinner:
	//	'@sliderLabelSpinner' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
	//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
	public SliderLabelSpinnerElements getSliderLabelSpinnerAccess() {
		return pSliderLabelSpinner;
	}
	
	public ParserRule getSliderLabelSpinnerRule() {
		return getSliderLabelSpinnerAccess().getRule();
	}

	//SliderLabelCheckBox:
	//	'@sliderLabelCheckBox' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
	//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
	public SliderLabelCheckBoxElements getSliderLabelCheckBoxAccess() {
		return pSliderLabelCheckBox;
	}
	
	public ParserRule getSliderLabelCheckBoxRule() {
		return getSliderLabelCheckBoxAccess().getRule();
	}

	//// ename is the name of the controlled variable, controlName is the text to display, value is the init value
	//SpinCheckBox:
	//	'@checkbox' ename=ID controlName=(ID | STRING);
	public SpinCheckBoxElements getSpinCheckBoxAccess() {
		return pSpinCheckBox;
	}
	
	public ParserRule getSpinCheckBoxRule() {
		return getSpinCheckBoxAccess().getRule();
	}

	//LogFreqSliderLabel:
	//	'@logFreqSliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
	//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
	public LogFreqSliderLabelElements getLogFreqSliderLabelAccess() {
		return pLogFreqSliderLabel;
	}
	
	public ParserRule getLogFreqSliderLabelRule() {
		return getLogFreqSliderLabelAccess().getRule();
	}

	//LogFreq2SliderLabel:
	//	'@logFreq2SliderLabel' ename=ID controlName=(ID | STRING) (minVal=SPINDOUBLE maxVal=SPINDOUBLE initVal=SPINDOUBLE
	//	multiplier=SPINDOUBLE precision=INT option=ID?)?;
	public LogFreq2SliderLabelElements getLogFreq2SliderLabelAccess() {
		return pLogFreq2SliderLabel;
	}
	
	public ParserRule getLogFreq2SliderLabelRule() {
		return getLogFreq2SliderLabelAccess().getRule();
	}

	//SpinRadioButton:
	//	'@spinRadioButton' ename=ID controlName=(ID | STRING);
	public SpinRadioButtonElements getSpinRadioButtonAccess() {
		return pSpinRadioButton;
	}
	
	public ParserRule getSpinRadioButtonRule() {
		return getSpinRadioButtonAccess().getRule();
	}

	//SpinComboBox:
	//	'@comboBox' ename=ID optiona=STRING optionb=STRING (optionc=STRING (optiond=STRING (optione=STRING
	//	optionf=STRING?)?)?)?;
	public SpinComboBoxElements getSpinComboBoxAccess() {
		return pSpinComboBox;
	}
	
	public ParserRule getSpinComboBoxRule() {
		return getSpinComboBoxAccess().getRule();
	}

	////------------------------------------------------------------
	//// place a comment in the code
	//Comment:
	//	remark=SC_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Label:
	//	name=ID ':';
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//// - SpinCAD macro for conditional expressions within generateCode()
	//// also for special function calls etc.
	//Macro:
	//	IsPinConnected | IsTrue | IsElse | IsEndif | IsGreaterThan | IsEqualTo | IsOr | IsLessThan | GetInputDefault |
	//	ReadChorusTap | SetChorusWidth | GetDelayScaleControl | SetOutputPin | GetBaseAddress | GetSamplesFromRatio |
	//	MinusDouble | DivideDouble | DivideInt | MultiplyDouble | SemitonesToRmpRate | Equals | EqualsBool;
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//IsPinConnected:
	//	'@isPinConnected' arg1=(ID | STRING);
	public IsPinConnectedElements getIsPinConnectedAccess() {
		return pIsPinConnected;
	}
	
	public ParserRule getIsPinConnectedRule() {
		return getIsPinConnectedAccess().getRule();
	}

	//IsGreaterThan:
	//	'@isGreaterThan' variable=ID value=INT;
	public IsGreaterThanElements getIsGreaterThanAccess() {
		return pIsGreaterThan;
	}
	
	public ParserRule getIsGreaterThanRule() {
		return getIsGreaterThanAccess().getRule();
	}

	//IsLessThan:
	//	'@isLessThan' variable=ID value=INT;
	public IsLessThanElements getIsLessThanAccess() {
		return pIsLessThan;
	}
	
	public ParserRule getIsLessThanRule() {
		return getIsLessThanAccess().getRule();
	}

	//IsEqualTo:
	//	'@isEqualTo' variable=ID value=INT;
	public IsEqualToElements getIsEqualToAccess() {
		return pIsEqualTo;
	}
	
	public ParserRule getIsEqualToRule() {
		return getIsEqualToAccess().getRule();
	}

	//IsTrue:
	//	'@isTrue' variable=ID;
	public IsTrueElements getIsTrueAccess() {
		return pIsTrue;
	}
	
	public ParserRule getIsTrueRule() {
		return getIsTrueAccess().getRule();
	}

	//IsElse:
	//	{IsElse} '@else';
	public IsElseElements getIsElseAccess() {
		return pIsElse;
	}
	
	public ParserRule getIsElseRule() {
		return getIsElseAccess().getRule();
	}

	//IsEndif:
	//	{IsEndif} "@endif";
	public IsEndifElements getIsEndifAccess() {
		return pIsEndif;
	}
	
	public ParserRule getIsEndifRule() {
		return getIsEndifAccess().getRule();
	}

	//IsOr:
	//	'@isOr' var1=ID var2=ID value=BOOLEAN;
	public IsOrElements getIsOrAccess() {
		return pIsOr;
	}
	
	public ParserRule getIsOrRule() {
		return getIsOrAccess().getRule();
	}

	//GetInputDefault:
	//	'@getInputDefault' label=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE;
	public GetInputDefaultElements getGetInputDefaultAccess() {
		return pGetInputDefault;
	}
	
	public ParserRule getGetInputDefaultRule() {
		return getGetInputDefaultAccess().getRule();
	}

	//GetDelayScaleControl:
	//	'@getDelayScaleControl' ratio=ID length=ID offset=ID control=ID?;
	public GetDelayScaleControlElements getGetDelayScaleControlAccess() {
		return pGetDelayScaleControl;
	}
	
	public ParserRule getGetDelayScaleControlRule() {
		return getGetDelayScaleControlAccess().getRule();
	}

	//ReadChorusTap:
	//	'@readChorusTap' lfo=ID phase=INT ratio=ID length=ID offset=ID;
	public ReadChorusTapElements getReadChorusTapAccess() {
		return pReadChorusTap;
	}
	
	public ParserRule getReadChorusTapRule() {
		return getReadChorusTapAccess().getRule();
	}

	//GetSamplesFromRatio:
	//	'@getSamplesFromRatio' variable=ID ratio=SPINDOUBLE length=SPINDOUBLE;
	public GetSamplesFromRatioElements getGetSamplesFromRatioAccess() {
		return pGetSamplesFromRatio;
	}
	
	public ParserRule getGetSamplesFromRatioRule() {
		return getGetSamplesFromRatioAccess().getRule();
	}

	//SemitonesToRmpRate:
	//	'@semitonesToRmpRate' variable=ID semitones=SPINDOUBLE;
	public SemitonesToRmpRateElements getSemitonesToRmpRateAccess() {
		return pSemitonesToRmpRate;
	}
	
	public ParserRule getSemitonesToRmpRateRule() {
		return getSemitonesToRmpRateAccess().getRule();
	}

	//GetBaseAddress:
	//	{GetBaseAddress} '@getBaseAddress';
	public GetBaseAddressElements getGetBaseAddressAccess() {
		return pGetBaseAddress;
	}
	
	public ParserRule getGetBaseAddressRule() {
		return getGetBaseAddressAccess().getRule();
	}

	//SetOutputPin:
	//	'@setOutputPin' pinName=(ID | STRING) varName=ID;
	public SetOutputPinElements getSetOutputPinAccess() {
		return pSetOutputPin;
	}
	
	public ParserRule getSetOutputPinRule() {
		return getSetOutputPinAccess().getRule();
	}

	//MinusDouble:
	//	'@minusDouble' varName=ID high=ID low=ID;
	public MinusDoubleElements getMinusDoubleAccess() {
		return pMinusDouble;
	}
	
	public ParserRule getMinusDoubleRule() {
		return getMinusDoubleAccess().getRule();
	}

	//DivideDouble:
	//	'@divideDouble' varName=ID high=ID low=ID;
	public DivideDoubleElements getDivideDoubleAccess() {
		return pDivideDouble;
	}
	
	public ParserRule getDivideDoubleRule() {
		return getDivideDoubleAccess().getRule();
	}

	//Equals:
	//	'@equals' varName=ID value=SPINDOUBLE;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}

	//EqualsBool:
	//	'@equalsBool' varName=ID value=BOOLEAN;
	public EqualsBoolElements getEqualsBoolAccess() {
		return pEqualsBool;
	}
	
	public ParserRule getEqualsBoolRule() {
		return getEqualsBoolAccess().getRule();
	}

	//DivideInt:
	//	'@divideInt' varName=ID high=ID low=INT;
	public DivideIntElements getDivideIntAccess() {
		return pDivideInt;
	}
	
	public ParserRule getDivideIntRule() {
		return getDivideIntAccess().getRule();
	}

	//MultiplyDouble:
	//	'@multiplyDouble' varName=ID high=ID low=ID;
	public MultiplyDoubleElements getMultiplyDoubleAccess() {
		return pMultiplyDouble;
	}
	
	public ParserRule getMultiplyDoubleRule() {
		return getMultiplyDoubleAccess().getRule();
	}

	//SetChorusWidth:
	//	'@setChorusWidth' varName=ID length=ID scale=ID;
	public SetChorusWidthElements getSetChorusWidthAccess() {
		return pSetChorusWidth;
	}
	
	public ParserRule getSetChorusWidthRule() {
		return getSetChorusWidthAccess().getRule();
	}

	////------------------------ regular Spin ASM instructions
	//Instruction:
	//	Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO |
	//	LoadRampLFO | ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Inst_B6_S1_14:
	//	ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf;
	public Inst_B6_S1_14Elements getInst_B6_S1_14Access() {
		return pInst_B6_S1_14;
	}
	
	public ParserRule getInst_B6_S1_14Rule() {
		return getInst_B6_S1_14Access().getRule();
	}

	//Inst_B15_S1_9:
	//	ReadDelay | WriteDelay | WriteAllpass;
	public Inst_B15_S1_9Elements getInst_B15_S1_9Access() {
		return pInst_B15_S1_9;
	}
	
	public ParserRule getInst_B15_S1_9Rule() {
		return getInst_B15_S1_9Access().getRule();
	}

	//Inst_B6:
	//	Mulx | Ldax;
	public Inst_B6Elements getInst_B6Access() {
		return pInst_B6;
	}
	
	public ParserRule getInst_B6Rule() {
		return getInst_B6Access().getRule();
	}

	//Inst_B24:
	//	And | Or | Xor;
	public Inst_B24Elements getInst_B24Access() {
		return pInst_B24;
	}
	
	public ParserRule getInst_B24Rule() {
		return getInst_B24Access().getRule();
	}

	//Inst_X0:
	//	Clr | Not | Absa;
	public Inst_X0Elements getInst_X0Access() {
		return pInst_X0;
	}
	
	public ParserRule getInst_X0Rule() {
		return getInst_X0Access().getRule();
	}

	//Inst_S1_14_S1_10:
	//	Exp | ScaleOffset;
	public Inst_S1_14_S1_10Elements getInst_S1_14_S1_10Access() {
		return pInst_S1_14_S1_10;
	}
	
	public ParserRule getInst_S1_14_S1_10Rule() {
		return getInst_S1_14_S1_10Access().getRule();
	}

	//ReadRegister:
	//	'rdax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public ReadRegisterElements getReadRegisterAccess() {
		return pReadRegister;
	}
	
	public ParserRule getReadRegisterRule() {
		return getReadRegisterAccess().getRule();
	}

	//WriteRegisterLowshelf:
	//	'wrlx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public WriteRegisterLowshelfElements getWriteRegisterLowshelfAccess() {
		return pWriteRegisterLowshelf;
	}
	
	public ParserRule getWriteRegisterLowshelfRule() {
		return getWriteRegisterLowshelfAccess().getRule();
	}

	//WriteRegisterHighshelf:
	//	'wrhx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public WriteRegisterHighshelfElements getWriteRegisterHighshelfAccess() {
		return pWriteRegisterHighshelf;
	}
	
	public ParserRule getWriteRegisterHighshelfRule() {
		return getWriteRegisterHighshelfAccess().getRule();
	}

	//WriteRegister:
	//	'wrax' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public WriteRegisterElements getWriteRegisterAccess() {
		return pWriteRegister;
	}
	
	public ParserRule getWriteRegisterRule() {
		return getWriteRegisterAccess().getRule();
	}

	//Maxx:
	//	'maxx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public MaxxElements getMaxxAccess() {
		return pMaxx;
	}
	
	public ParserRule getMaxxRule() {
		return getMaxxAccess().getRule();
	}

	//ReadRegisterFilter:
	//	'rdfx' arg1=SPINREGISTER ',' arg2=SPINDOUBLE;
	public ReadRegisterFilterElements getReadRegisterFilterAccess() {
		return pReadRegisterFilter;
	}
	
	public ParserRule getReadRegisterFilterRule() {
		return getReadRegisterFilterAccess().getRule();
	}

	//Mulx:
	//	'mulx' arg1=ID;
	public MulxElements getMulxAccess() {
		return pMulx;
	}
	
	public ParserRule getMulxRule() {
		return getMulxAccess().getRule();
	}

	//Ldax:
	//	'ldax' arg1=ID;
	public LdaxElements getLdaxAccess() {
		return pLdax;
	}
	
	public ParserRule getLdaxRule() {
		return getLdaxAccess().getRule();
	}

	//Exp:
	//	'exp' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//Log:
	//	'log' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}

	//ScaleOffset:
	//	'sof' arg1=SPINDOUBLE ',' arg2=SPINDOUBLE;
	public ScaleOffsetElements getScaleOffsetAccess() {
		return pScaleOffset;
	}
	
	public ParserRule getScaleOffsetRule() {
		return getScaleOffsetAccess().getRule();
	}

	//WriteDelay:
	//	'wra' arg1=SPINMEM ',' arg2=SPINDOUBLE;
	public WriteDelayElements getWriteDelayAccess() {
		return pWriteDelay;
	}
	
	public ParserRule getWriteDelayRule() {
		return getWriteDelayAccess().getRule();
	}

	//WriteAllpass:
	//	'wrap' arg1=SPINMEM ',' arg2=SPINDOUBLE;
	public WriteAllpassElements getWriteAllpassAccess() {
		return pWriteAllpass;
	}
	
	public ParserRule getWriteAllpassRule() {
		return getWriteAllpassAccess().getRule();
	}

	//ReadDelay:
	//	'rda' arg1=SPINMEM ',' arg2=SPINDOUBLE;
	public ReadDelayElements getReadDelayAccess() {
		return pReadDelay;
	}
	
	public ParserRule getReadDelayRule() {
		return getReadDelayAccess().getRule();
	}

	//LoadSinLFO:
	//	'wlds' arg1=SPINREGISTER ',' arg2=SPINDOUBLE ',' arg3=SPINDOUBLE;
	public LoadSinLFOElements getLoadSinLFOAccess() {
		return pLoadSinLFO;
	}
	
	public ParserRule getLoadSinLFORule() {
		return getLoadSinLFOAccess().getRule();
	}

	//LoadRampLFO:
	//	'wldr' arg1=SPINREGISTER ',' arg2=SPINREGISTER ',' arg3=SPINREGISTER;
	public LoadRampLFOElements getLoadRampLFOAccess() {
		return pLoadRampLFO;
	}
	
	public ParserRule getLoadRampLFORule() {
		return getLoadRampLFOAccess().getRule();
	}

	//// Chorus instructions
	//ChorusReadDelay:
	//	'cho rda' ',' arg1=SPINREGISTER ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINMEM;
	public ChorusReadDelayElements getChorusReadDelayAccess() {
		return pChorusReadDelay;
	}
	
	public ParserRule getChorusReadDelayRule() {
		return getChorusReadDelayAccess().getRule();
	}

	//ChorusReadValue:
	//	'cho rdal' ',' arg1=SPINREGISTER;
	public ChorusReadValueElements getChorusReadValueAccess() {
		return pChorusReadValue;
	}
	
	public ParserRule getChorusReadValueRule() {
		return getChorusReadValueAccess().getRule();
	}

	//ChorusScaleOffset:
	//	'cho sof' ',' arg1=ID ',' arg2=SPINCHOREGFLAGS ',' arg3=SPINDOUBLE;
	public ChorusScaleOffsetElements getChorusScaleOffsetAccess() {
		return pChorusScaleOffset;
	}
	
	public ParserRule getChorusScaleOffsetRule() {
		return getChorusScaleOffsetAccess().getRule();
	}

	//ReadDelayPointer:
	//	'rmpa' arg1=SPINDOUBLE;
	public ReadDelayPointerElements getReadDelayPointerAccess() {
		return pReadDelayPointer;
	}
	
	public ParserRule getReadDelayPointerRule() {
		return getReadDelayPointerAccess().getRule();
	}

	//// single argument instructions
	//And:
	//	'and' arg1=BINARY24;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or:
	//	'or' arg1=BINARY24;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor:
	//	'xor' arg1=BINARY24;
	public XorElements getXorAccess() {
		return pXor;
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	//Jam:
	//	'jam' arg1=ID;
	public JamElements getJamAccess() {
		return pJam;
	}
	
	public ParserRule getJamRule() {
		return getJamAccess().getRule();
	}

	//// zero argument instructions
	//Clr:
	//	{Clr} "clr";
	public ClrElements getClrAccess() {
		return pClr;
	}
	
	public ParserRule getClrRule() {
		return getClrAccess().getRule();
	}

	//Not:
	//	{Not} 'not';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Absa:
	//	{Absa} 'absa';
	public AbsaElements getAbsaAccess() {
		return pAbsa;
	}
	
	public ParserRule getAbsaRule() {
		return getAbsaAccess().getRule();
	}

	////Then there's Skip
	//Skip:
	//	'skp' flags=ID ('|' ID)* ',' label=[Label];
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}

	//terminal SC_COMMENT:
	//	';' !('\n' | '\r')* ('\r'? '\n');
	public TerminalRule getSC_COMMENTRule() {
		return tSC_COMMENT;
	} 

	//// --------------- data type rules -----------------------------
	//SPINDOUBLE:
	//	'-'? (ID | INT ('.' INT)?);
	public SPINDOUBLEElements getSPINDOUBLEAccess() {
		return pSPINDOUBLE;
	}
	
	public ParserRule getSPINDOUBLERule() {
		return getSPINDOUBLEAccess().getRule();
	}

	//SPINREGISTER:
	//	'-'? (ID | INT);
	public SPINREGISTERElements getSPINREGISTERAccess() {
		return pSPINREGISTER;
	}
	
	public ParserRule getSPINREGISTERRule() {
		return getSPINREGISTERAccess().getRule();
	}

	//SPINCHOREGFLAGS:
	//	INT | (ID ('|' ID)*)?;
	public SPINCHOREGFLAGSElements getSPINCHOREGFLAGSAccess() {
		return pSPINCHOREGFLAGS;
	}
	
	public ParserRule getSPINCHOREGFLAGSRule() {
		return getSPINCHOREGFLAGSAccess().getRule();
	}

	//SPINMEM:
	//	buffer=SPINBUF (value=INT ('*' scale=ID)? | offset=[Offset])?;
	public SPINMEMElements getSPINMEMAccess() {
		return pSPINMEM;
	}
	
	public ParserRule getSPINMEMRule() {
		return getSPINMEMAccess().getRule();
	}

	//SPINBUF:
	//	ID ('#' | '^')? ('+' | '-')?;
	public SPINBUFElements getSPINBUFAccess() {
		return pSPINBUF;
	}
	
	public ParserRule getSPINBUFRule() {
		return getSPINBUFAccess().getRule();
	}

	//BINARY24:
	//	('%' INT) ID* | '$' INT* ID*;
	public BINARY24Elements getBINARY24Access() {
		return pBINARY24;
	}
	
	public ParserRule getBINARY24Rule() {
		return getBINARY24Access().getRule();
	}

	//BOOLEAN:
	//	"true" | "false";
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//terminal fragment ESCAPED_CHAR:
	//	'\\' ('n' | 't' | 'r' | '\\');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	} 

	//terminal STRING:
	//	'"' (ESCAPED_CHAR | !('\\' | '"'))* '"' |
	//	"'" (ESCAPED_CHAR | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
