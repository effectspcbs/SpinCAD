/*
 * generated by Xtext
 */
package com.holycityaudio.spincadmenu.serializer;

import com.google.inject.Inject;
import com.holycityaudio.spincadmenu.services.SpinCADMenuGrammarAccess;
import com.holycityaudio.spincadmenu.spinCADMenu.MENU_HEADER;
import com.holycityaudio.spincadmenu.spinCADMenu.MENU_ITEM;
import com.holycityaudio.spincadmenu.spinCADMenu.Menu;
import com.holycityaudio.spincadmenu.spinCADMenu.SpinCADMenuPackage;
import com.holycityaudio.spincadmenu.spinCADMenu.TEST_ITEM;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SpinCADMenuSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SpinCADMenuGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SpinCADMenuPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpinCADMenuPackage.MENU_HEADER:
				sequence_MENU_HEADER(context, (MENU_HEADER) semanticObject); 
				return; 
			case SpinCADMenuPackage.MENU_ITEM:
				sequence_MENU_ITEM(context, (MENU_ITEM) semanticObject); 
				return; 
			case SpinCADMenuPackage.MENU:
				sequence_Menu(context, (Menu) semanticObject); 
				return; 
			case SpinCADMenuPackage.TEST_ITEM:
				sequence_TEST_ITEM(context, (TEST_ITEM) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns MENU_HEADER
	 *     MENU_HEADER returns MENU_HEADER
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_MENU_HEADER(ISerializationContext context, MENU_HEADER semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpinCADMenuPackage.Literals.MENU_HEADER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpinCADMenuPackage.Literals.MENU_HEADER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMENU_HEADERAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MENU_ITEM
	 *     MENU_ITEM returns MENU_ITEM
	 *
	 * Constraint:
	 *     (name=STRING className=ID)
	 */
	protected void sequence_MENU_ITEM(ISerializationContext context, MENU_ITEM semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpinCADMenuPackage.Literals.MENU_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpinCADMenuPackage.Literals.MENU_ITEM__NAME));
			if (transientValues.isValueTransient(semanticObject, SpinCADMenuPackage.Literals.MENU_ITEM__CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpinCADMenuPackage.Literals.MENU_ITEM__CLASS_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMENU_ITEMAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMENU_ITEMAccess().getClassNameIDTerminalRuleCall_2_0(), semanticObject.getClassName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Menu returns Menu
	 *
	 * Constraint:
	 *     elements+=Element+
	 */
	protected void sequence_Menu(ISerializationContext context, Menu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns TEST_ITEM
	 *     TEST_ITEM returns TEST_ITEM
	 *
	 * Constraint:
	 *     className=ID
	 */
	protected void sequence_TEST_ITEM(ISerializationContext context, TEST_ITEM semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpinCADMenuPackage.Literals.TEST_ITEM__CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpinCADMenuPackage.Literals.TEST_ITEM__CLASS_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTEST_ITEMAccess().getClassNameIDTerminalRuleCall_1_0(), semanticObject.getClassName());
		feeder.finish();
	}
	
	
}
